/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#define CIMGUI_DEFINE_ENUMS_AND_STRUCTS


/* Includes the header in the wrapper code */
#include "cimgui.h"

// TODO: Look at implication of doing this... for caching jmethodid.
//
// #include "jni.h"
//
// static JavaVM *cached_jvm = 0;
//
// JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *jvm, void *reserved) {
//     cached_jvm = jvm;
//     return JNI_VERSION_1_1;
// }
//
// static JNIEnv* JNU_GetEnv() {
//     JNIEnv *env;
//     jint rc = cached_jvm->GetEnv((void **)&env, JNI_VERSION_1_1);
//     if (rc == JNI_EDETACHED) throw std::runtime_error("Current thread not attached");
//     if (rc == JNI_EVERSION) throw std::runtime_error("jni version not supported");
//     return env;
// }




#include <assert.h>

struct UserDataValuesGetter {
    JNIEnv *env;
    jobject callback;
};

static float jvmValuesGetter(void* data, int idx) {
    struct UserDataValuesGetter *userData = (UserDataValuesGetter*) data;
    JNIEnv *env = userData->env;

    // TODO: Cache these at library load.
    const jclass interfaceClass = env->FindClass("cimgui/internal/ValuesGetter");
    assert(interfaceClass);
    const jmethodID valueMethod = env->GetMethodID(interfaceClass, "getValue", "(I)F");
    assert(valueMethod);

    jfloat value = env->CallFloatMethod(userData->callback, valueMethod, (jint)idx);
    return (float) value;
}




#include <assert.h>

struct UserDataItemsGetter {
    JNIEnv *env;
    jobject callback;
    jstring item;
    const char* item_cstr;
};

static bool jvmItemsGetter(void* data, int idx, const char** out_text) {
    UserDataItemsGetter *userData = (UserDataItemsGetter*) data;
    JNIEnv *env = userData->env;

    // TODO: Cache these at library load.
    const jclass interfaceClass = env->FindClass("cimgui/internal/ItemsGetter");
    assert(interfaceClass);
    const jmethodID itemMethod = env->GetMethodID(interfaceClass, "getItem", "(I)Ljava/lang/String;");
    assert(itemMethod);

    // Need to free the results of the previous call to this function.
    if (userData->item_cstr != NULL) {
        env->ReleaseStringUTFChars(userData->item, userData->item_cstr);
        env->DeleteLocalRef(userData->item);
        userData->item = NULL;
        userData->item_cstr = NULL;
    }

    jstring value = (jstring) env->CallObjectMethod(userData->callback, itemMethod, (jint)idx);
    if (value != NULL) {
        const char* c_string = env->GetStringUTFChars(value, 0);
        assert(c_string);
        *out_text = c_string;

        // Remember these so we can free them in the next call.
        userData->item = value;
        userData->item_cstr = c_string;
        return true;
    } else {
        return false;
    }
}




#include <assert.h>

struct UserDataCustomCallback {
    JNIEnv *env;
    jobject callback;
};

static void jvmCustomCallback(ImGuiSizeCallbackData* data) {
    struct UserDataCustomCallback *userData = (UserDataCustomCallback*) data->UserData;
    JNIEnv *env = userData->env;

    // TODO: Cache these at library load.
    const jclass interfaceClass = env->FindClass("cimgui/internal/CustomCallback");
    assert(interfaceClass);
    const jmethodID invokeMethod = env->GetMethodID(interfaceClass, "invoke", "(J)");
    assert(invokeMethod);

    // We make sure to set this to NULL and hide it from Java code.
    data->UserData = NULL;
    env->CallVoidMethod(userData->callback, invokeMethod, (jlong)data);

    // FIXME: What if callback is not called. i.e user does not call `ImGui.begin(...)`.
    env->DeleteGlobalRef(userData->callback);
}




#include <assert.h>

struct UserDataInputCallback {
    JNIEnv *env;
    jobject callback;
};

static int jvmInputCallback(ImGuiInputTextCallbackData* data) {
    struct UserDataInputCallback *userData = (UserDataInputCallback*) data->UserData;
    JNIEnv *env = userData->env;

    // TODO: Cache these at library load.
    const jclass interfaceClass = env->FindClass("cimgui/internal/InputTextCallback");
    assert(interfaceClass);
    const jmethodID invokeMethod = env->GetMethodID(interfaceClass, "invoke", "(J)I");
    assert(invokeMethod);

    // We make sure to set this to NULL and hide it from Java code.
    data->UserData = NULL;
    int value = (int) env->CallIntMethod(userData->callback, invokeMethod, (jlong)data);
    return value;
}



static int *new_intp() { 
  return new int(); 
}

static int *copy_intp(int value) { 
  return new int(value); 
}

static void delete_intp(int *obj) { 
  if (obj) delete obj; 
}

static void intp_assign(int *obj, int value) {
  *obj = value;
}

static int intp_value(int *obj) {
  return *obj;
}


static unsigned int *new_uintp() { 
  return new unsigned int(); 
}

static unsigned int *copy_uintp(unsigned int value) { 
  return new unsigned int(value); 
}

static void delete_uintp(unsigned int *obj) { 
  if (obj) delete obj; 
}

static void uintp_assign(unsigned int *obj, unsigned int value) {
  *obj = value;
}

static unsigned int uintp_value(unsigned int *obj) {
  return *obj;
}


static size_t *new_size_tp() { 
  return new size_t(); 
}

static size_t *copy_size_tp(size_t value) { 
  return new size_t(value); 
}

static void delete_size_tp(size_t *obj) { 
  if (obj) delete obj; 
}

static void size_tp_assign(size_t *obj, size_t value) {
  *obj = value;
}

static size_t size_tp_value(size_t *obj) {
  return *obj;
}


static bool *new_boolp() { 
  return new bool(); 
}

static bool *copy_boolp(bool value) { 
  return new bool(value); 
}

static void delete_boolp(bool *obj) { 
  if (obj) delete obj; 
}

static void boolp_assign(bool *obj, bool value) {
  *obj = value;
}

static bool boolp_value(bool *obj) {
  return *obj;
}


static float *new_floatp() { 
  return new float(); 
}

static float *copy_floatp(float value) { 
  return new float(value); 
}

static void delete_floatp(float *obj) { 
  if (obj) delete obj; 
}

static void floatp_assign(float *obj, float value) {
  *obj = value;
}

static float floatp_value(float *obj) {
  return *obj;
}


static double *new_doublep() { 
  return new double(); 
}

static double *copy_doublep(double value) { 
  return new double(value); 
}

static void delete_doublep(double *obj) { 
  if (obj) delete obj; 
}

static void doublep_assign(double *obj, double value) {
  *obj = value;
}

static double doublep_value(double *obj) {
  return *obj;
}


static unsigned char* *new_unsigned_charpp() { 
  return new unsigned char*(); 
}

static unsigned char* *copy_unsigned_charpp(unsigned char* value) { 
  return new unsigned char*(value); 
}

static void delete_unsigned_charpp(unsigned char* *obj) { 
  if (obj) delete obj; 
}

static void unsigned_charpp_assign(unsigned char* *obj, unsigned char* value) {
  *obj = value;
}

static unsigned char* unsigned_charpp_value(unsigned char* *obj) {
  return *obj;
}


static void* *new_voidp() { 
  return new void*(); 
}

static void* *copy_voidp(void* value) { 
  return new void*(value); 
}

static void delete_voidp(void* *obj) { 
  if (obj) delete obj; 
}

static void voidp_assign(void* *obj, void* value) {
  *obj = value;
}

static void* voidp_value(void* *obj) {
  return *obj;
}


static int *new_intArray(int nelements) { 
  return new int[nelements](); 
}

static void delete_intArray(int *ary) { 
  delete [] ary; 
}

static int intArray_getitem(int *ary, int index) {
    return ary[index];
}
static void intArray_setitem(int *ary, int index, int value) {
    ary[index] = value;
}


static float *new_floatArray(int nelements) { 
  return new float[nelements](); 
}

static void delete_floatArray(float *ary) { 
  delete [] ary; 
}

static float floatArray_getitem(float *ary, int index) {
    return ary[index];
}
static void floatArray_setitem(float *ary, int index, float value) {
    ary[index] = value;
}


static bool *new_boolArray(int nelements) { 
  return new bool[nelements](); 
}

static void delete_boolArray(bool *ary) { 
  delete [] ary; 
}

static bool boolArray_getitem(bool *ary, int index) {
    return ary[index];
}
static void boolArray_setitem(bool *ary, int index, bool value) {
    ary[index] = value;
}


static unsigned short *new_ushortArray(int nelements) { 
  return new unsigned short[nelements](); 
}

static void delete_ushortArray(unsigned short *ary) { 
  delete [] ary; 
}

static unsigned short ushortArray_getitem(unsigned short *ary, int index) {
    return ary[index];
}
static void ushortArray_setitem(unsigned short *ary, int index, unsigned short value) {
    ary[index] = value;
}


static ImDrawCmd *new_ImDrawCmdArray(int nelements) { 
  return new ImDrawCmd[nelements](); 
}

static void delete_ImDrawCmdArray(ImDrawCmd *ary) { 
  delete [] ary; 
}

static ImDrawCmd ImDrawCmdArray_getitem(ImDrawCmd *ary, int index) {
    return ary[index];
}
static void ImDrawCmdArray_setitem(ImDrawCmd *ary, int index, ImDrawCmd value) {
    ary[index] = value;
}


static ImDrawList* *new_pImDrawListArray(int nelements) { 
  return new ImDrawList*[nelements](); 
}

static void delete_pImDrawListArray(ImDrawList* *ary) { 
  delete [] ary; 
}

static ImDrawList* pImDrawListArray_getitem(ImDrawList* *ary, int index) {
    return ary[index];
}
static void pImDrawListArray_setitem(ImDrawList* *ary, int index, ImDrawList* value) {
    ary[index] = value;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1Simple_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec2_Simple *arg1 = (ImVec2_Simple *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2_Simple **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1Simple_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec2_Simple *arg1 = (ImVec2_Simple *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2_Simple **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1Simple_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec2_Simple *arg1 = (ImVec2_Simple *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2_Simple **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1Simple_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec2_Simple *arg1 = (ImVec2_Simple *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2_Simple **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVec2_1Simple(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVec2_Simple *)new ImVec2_Simple();
  *(ImVec2_Simple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVec2_1Simple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVec2_Simple *arg1 = (ImVec2_Simple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVec2_Simple **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1Simple_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec4_Simple *arg1 = (ImVec4_Simple *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4_Simple **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1Simple_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec4_Simple *arg1 = (ImVec4_Simple *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4_Simple **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1Simple_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec4_Simple *arg1 = (ImVec4_Simple *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4_Simple **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1Simple_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec4_Simple *arg1 = (ImVec4_Simple *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4_Simple **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1Simple_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec4_Simple *arg1 = (ImVec4_Simple *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4_Simple **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1Simple_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec4_Simple *arg1 = (ImVec4_Simple *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4_Simple **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1Simple_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec4_Simple *arg1 = (ImVec4_Simple *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4_Simple **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1Simple_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec4_Simple *arg1 = (ImVec4_Simple *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4_Simple **)&jarg1; 
  result = (float) ((arg1)->w);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVec4_1Simple(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec4_Simple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVec4_Simple *)new ImVec4_Simple();
  *(ImVec4_Simple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVec4_1Simple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVec4_Simple *arg1 = (ImVec4_Simple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVec4_Simple **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1Simple_1Value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImColor_Simple *arg1 = (ImColor_Simple *) 0 ;
  ImVec4_Simple *arg2 = (ImVec4_Simple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImColor_Simple **)&jarg1; 
  arg2 = *(ImVec4_Simple **)&jarg2; 
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1Simple_1Value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImColor_Simple *arg1 = (ImColor_Simple *) 0 ;
  ImVec4_Simple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImColor_Simple **)&jarg1; 
  result = (ImVec4_Simple *)& ((arg1)->Value);
  *(ImVec4_Simple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImColor_1Simple(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImColor_Simple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImColor_Simple *)new ImColor_Simple();
  *(ImColor_Simple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImColor_1Simple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImColor_Simple *arg1 = (ImColor_Simple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImColor_Simple **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector *arg1 = (ImVector *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector *arg1 = (ImVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector *arg1 = (ImVector *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector *arg1 = (ImVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImVector *arg1 = (ImVector *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector *arg1 = (ImVector *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector **)&jarg1; 
  result = (void *) ((arg1)->Data);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector *)new ImVector();
  *(ImVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector *arg1 = (ImVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1float_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_float *arg1 = (ImVector_float *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_float **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1float_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_float *arg1 = (ImVector_float *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_float **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1float_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_float *arg1 = (ImVector_float *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_float **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1float_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_float *arg1 = (ImVector_float *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_float **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1float_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImVector_float *arg1 = (ImVector_float *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_float **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1float_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_float *arg1 = (ImVector_float *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_float **)&jarg1; 
  result = (float *) ((arg1)->Data);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1float(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_float *)new ImVector_float();
  *(ImVector_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1float(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_float *arg1 = (ImVector_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_float **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  arg2 = *(ImWchar **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  result = (ImWchar *) ((arg1)->Data);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImWchar(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImWchar *)new ImVector_ImWchar();
  *(ImVector_ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImWchar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawVert_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImDrawVert *arg1 = (ImVector_ImDrawVert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawVert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawVert_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImDrawVert *arg1 = (ImVector_ImDrawVert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawVert **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawVert_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImDrawVert *arg1 = (ImVector_ImDrawVert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawVert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawVert_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImDrawVert *arg1 = (ImVector_ImDrawVert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawVert **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawVert_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImDrawVert *arg1 = (ImVector_ImDrawVert *) 0 ;
  ImDrawVert *arg2 = (ImDrawVert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImDrawVert **)&jarg1; 
  arg2 = *(ImDrawVert **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawVert_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImDrawVert *arg1 = (ImVector_ImDrawVert *) 0 ;
  ImDrawVert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawVert **)&jarg1; 
  result = (ImDrawVert *) ((arg1)->Data);
  *(ImDrawVert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImDrawVert(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImDrawVert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImDrawVert *)new ImVector_ImDrawVert();
  *(ImVector_ImDrawVert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImDrawVert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImDrawVert *arg1 = (ImVector_ImDrawVert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImDrawVert **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontGlyph_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImFontGlyph *arg1 = (ImVector_ImFontGlyph *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontGlyph **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontGlyph_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImFontGlyph *arg1 = (ImVector_ImFontGlyph *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontGlyph **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontGlyph_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImFontGlyph *arg1 = (ImVector_ImFontGlyph *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontGlyph **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontGlyph_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImFontGlyph *arg1 = (ImVector_ImFontGlyph *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontGlyph **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontGlyph_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImFontGlyph *arg1 = (ImVector_ImFontGlyph *) 0 ;
  ImFontGlyph *arg2 = (ImFontGlyph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImFontGlyph **)&jarg1; 
  arg2 = *(ImFontGlyph **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontGlyph_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImFontGlyph *arg1 = (ImVector_ImFontGlyph *) 0 ;
  ImFontGlyph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontGlyph **)&jarg1; 
  result = (ImFontGlyph *) ((arg1)->Data);
  *(ImFontGlyph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImFontGlyph(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImFontGlyph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImFontGlyph *)new ImVector_ImFontGlyph();
  *(ImVector_ImFontGlyph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImFontGlyph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImFontGlyph *arg1 = (ImVector_ImFontGlyph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImFontGlyph **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiTextRange_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImGuiTextRange *arg1 = (ImVector_ImGuiTextRange *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiTextRange **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiTextRange_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImGuiTextRange *arg1 = (ImVector_ImGuiTextRange *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiTextRange **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiTextRange_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImGuiTextRange *arg1 = (ImVector_ImGuiTextRange *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiTextRange **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiTextRange_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImGuiTextRange *arg1 = (ImVector_ImGuiTextRange *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiTextRange **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiTextRange_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImGuiTextRange *arg1 = (ImVector_ImGuiTextRange *) 0 ;
  ImGuiTextRange *arg2 = (ImGuiTextRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImGuiTextRange **)&jarg1; 
  arg2 = *(ImGuiTextRange **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiTextRange_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImGuiTextRange *arg1 = (ImVector_ImGuiTextRange *) 0 ;
  ImGuiTextRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiTextRange **)&jarg1; 
  result = (ImGuiTextRange *) ((arg1)->Data);
  *(ImGuiTextRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImGuiTextRange(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImGuiTextRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImGuiTextRange *)new ImVector_ImGuiTextRange();
  *(ImVector_ImGuiTextRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImGuiTextRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImGuiTextRange *arg1 = (ImVector_ImGuiTextRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImGuiTextRange **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiStoragePair_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImGuiStoragePair *arg1 = (ImVector_ImGuiStoragePair *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiStoragePair **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiStoragePair_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImGuiStoragePair *arg1 = (ImVector_ImGuiStoragePair *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiStoragePair **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiStoragePair_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImGuiStoragePair *arg1 = (ImVector_ImGuiStoragePair *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiStoragePair **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiStoragePair_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImGuiStoragePair *arg1 = (ImVector_ImGuiStoragePair *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiStoragePair **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiStoragePair_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImGuiStoragePair *arg1 = (ImVector_ImGuiStoragePair *) 0 ;
  ImGuiStoragePair *arg2 = (ImGuiStoragePair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImGuiStoragePair **)&jarg1; 
  arg2 = *(ImGuiStoragePair **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImGuiStoragePair_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImGuiStoragePair *arg1 = (ImVector_ImGuiStoragePair *) 0 ;
  ImGuiStoragePair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImGuiStoragePair **)&jarg1; 
  result = (ImGuiStoragePair *) ((arg1)->Data);
  *(ImGuiStoragePair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImGuiStoragePair(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImGuiStoragePair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImGuiStoragePair *)new ImVector_ImGuiStoragePair();
  *(ImVector_ImGuiStoragePair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImGuiStoragePair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImGuiStoragePair *arg1 = (ImVector_ImGuiStoragePair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImGuiStoragePair **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawChannel_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImDrawChannel *arg1 = (ImVector_ImDrawChannel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawChannel_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImDrawChannel *arg1 = (ImVector_ImDrawChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawChannel **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawChannel_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImDrawChannel *arg1 = (ImVector_ImDrawChannel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawChannel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawChannel_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImDrawChannel *arg1 = (ImVector_ImDrawChannel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawChannel **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawChannel_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImDrawChannel *arg1 = (ImVector_ImDrawChannel *) 0 ;
  ImDrawChannel *arg2 = (ImDrawChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImDrawChannel **)&jarg1; 
  arg2 = *(ImDrawChannel **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawChannel_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImDrawChannel *arg1 = (ImVector_ImDrawChannel *) 0 ;
  ImDrawChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawChannel **)&jarg1; 
  result = (ImDrawChannel *) ((arg1)->Data);
  *(ImDrawChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImDrawChannel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImDrawChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImDrawChannel *)new ImVector_ImDrawChannel();
  *(ImVector_ImDrawChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImDrawChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImDrawChannel *arg1 = (ImVector_ImDrawChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImDrawChannel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1char_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_char *arg1 = (ImVector_char *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_char **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1char_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_char *arg1 = (ImVector_char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_char **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1char_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_char *arg1 = (ImVector_char *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_char **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1char_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_char *arg1 = (ImVector_char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_char **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1char_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImVector_char *arg1 = (ImVector_char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_char **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->Data;
    if (arg2) {
      arg1->Data = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Data, (const char *)arg2);
    } else {
      arg1->Data = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1char_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImVector_char *arg1 = (ImVector_char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_char **)&jarg1; 
  result = (char *) ((arg1)->Data);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1char(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_char *)new ImVector_char();
  *(ImVector_char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1char(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_char *arg1 = (ImVector_char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_char **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImU32_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImU32 *arg1 = (ImVector_ImU32 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImU32 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImU32_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImU32 *arg1 = (ImVector_ImU32 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImU32 **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImU32_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImU32 *arg1 = (ImVector_ImU32 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImU32 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImU32_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImU32 *arg1 = (ImVector_ImU32 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImU32 **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImU32_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImVector_ImU32 *arg1 = (ImVector_ImU32 *) 0 ;
  ImU32 *arg2 = (ImU32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImU32 **)&jarg1; 
  arg2 = *(ImU32 **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImU32_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImU32 *arg1 = (ImVector_ImU32 *) 0 ;
  ImU32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImU32 **)&jarg1; 
  result = (ImU32 *) ((arg1)->Data);
  *(ImU32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImU32(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImU32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImU32 *)new ImVector_ImU32();
  *(ImVector_ImU32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImU32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImU32 *arg1 = (ImVector_ImU32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImU32 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontAtlasCustomRect_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImFontAtlasCustomRect *arg1 = (ImVector_ImFontAtlasCustomRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontAtlasCustomRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontAtlasCustomRect_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImFontAtlasCustomRect *arg1 = (ImVector_ImFontAtlasCustomRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontAtlasCustomRect **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontAtlasCustomRect_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImFontAtlasCustomRect *arg1 = (ImVector_ImFontAtlasCustomRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontAtlasCustomRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontAtlasCustomRect_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImFontAtlasCustomRect *arg1 = (ImVector_ImFontAtlasCustomRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontAtlasCustomRect **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontAtlasCustomRect_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImFontAtlasCustomRect *arg1 = (ImVector_ImFontAtlasCustomRect *) 0 ;
  ImFontAtlasCustomRect *arg2 = (ImFontAtlasCustomRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImFontAtlasCustomRect **)&jarg1; 
  arg2 = *(ImFontAtlasCustomRect **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontAtlasCustomRect_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImFontAtlasCustomRect *arg1 = (ImVector_ImFontAtlasCustomRect *) 0 ;
  ImFontAtlasCustomRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontAtlasCustomRect **)&jarg1; 
  result = (ImFontAtlasCustomRect *) ((arg1)->Data);
  *(ImFontAtlasCustomRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImFontAtlasCustomRect(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImFontAtlasCustomRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImFontAtlasCustomRect *)new ImVector_ImFontAtlasCustomRect();
  *(ImVector_ImFontAtlasCustomRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImFontAtlasCustomRect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImFontAtlasCustomRect *arg1 = (ImVector_ImFontAtlasCustomRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImFontAtlasCustomRect **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImTextureID_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImTextureID *arg1 = (ImVector_ImTextureID *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImTextureID **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImTextureID_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImTextureID *arg1 = (ImVector_ImTextureID *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImTextureID **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImTextureID_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImTextureID *arg1 = (ImVector_ImTextureID *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImTextureID **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImTextureID_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImTextureID *arg1 = (ImVector_ImTextureID *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImTextureID **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImTextureID_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImVector_ImTextureID *arg1 = (ImVector_ImTextureID *) 0 ;
  ImTextureID *arg2 = (ImTextureID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImTextureID **)&jarg1; 
  arg2 = *(ImTextureID **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImTextureID_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImTextureID *arg1 = (ImVector_ImTextureID *) 0 ;
  ImTextureID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImTextureID **)&jarg1; 
  result = (ImTextureID *) ((arg1)->Data);
  *(ImTextureID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImTextureID(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImTextureID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImTextureID *)new ImVector_ImTextureID();
  *(ImVector_ImTextureID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImTextureID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImTextureID *arg1 = (ImVector_ImTextureID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImTextureID **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontConfig_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImFontConfig *arg1 = (ImVector_ImFontConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontConfig_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImFontConfig *arg1 = (ImVector_ImFontConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontConfig **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontConfig_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImFontConfig *arg1 = (ImVector_ImFontConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontConfig_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImFontConfig *arg1 = (ImVector_ImFontConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontConfig **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontConfig_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImFontConfig *arg1 = (ImVector_ImFontConfig *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImFontConfig **)&jarg1; 
  arg2 = *(ImFontConfig **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontConfig_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImFontConfig *arg1 = (ImVector_ImFontConfig *) 0 ;
  ImFontConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontConfig **)&jarg1; 
  result = (ImFontConfig *) ((arg1)->Data);
  *(ImFontConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImFontConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImFontConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImFontConfig *)new ImVector_ImFontConfig();
  *(ImVector_ImFontConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImFontConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImFontConfig *arg1 = (ImVector_ImFontConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImFontConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontPtr_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImFontPtr *arg1 = (ImVector_ImFontPtr *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontPtr **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontPtr_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImFontPtr *arg1 = (ImVector_ImFontPtr *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontPtr **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontPtr_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImFontPtr *arg1 = (ImVector_ImFontPtr *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontPtr **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontPtr_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImFontPtr *arg1 = (ImVector_ImFontPtr *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontPtr **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontPtr_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImVector_ImFontPtr *arg1 = (ImVector_ImFontPtr *) 0 ;
  ImFont **arg2 = (ImFont **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontPtr **)&jarg1; 
  arg2 = *(ImFont ***)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImFontPtr_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImFontPtr *arg1 = (ImVector_ImFontPtr *) 0 ;
  ImFont **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImFontPtr **)&jarg1; 
  result = (ImFont **) ((arg1)->Data);
  *(ImFont ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImFontPtr(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImFontPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImFontPtr *)new ImVector_ImFontPtr();
  *(ImVector_ImFontPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImFontPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImFontPtr *arg1 = (ImVector_ImFontPtr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImFontPtr **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawCmd_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImDrawCmd *arg1 = (ImVector_ImDrawCmd *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawCmd **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawCmd_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImDrawCmd *arg1 = (ImVector_ImDrawCmd *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawCmd **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawCmd_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImDrawCmd *arg1 = (ImVector_ImDrawCmd *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawCmd **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawCmd_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImDrawCmd *arg1 = (ImVector_ImDrawCmd *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawCmd **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawCmd_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImDrawCmd *arg1 = (ImVector_ImDrawCmd *) 0 ;
  ImDrawCmd *arg2 = (ImDrawCmd *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImDrawCmd **)&jarg1; 
  arg2 = *(ImDrawCmd **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawCmd_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImDrawCmd *arg1 = (ImVector_ImDrawCmd *) 0 ;
  ImDrawCmd *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawCmd **)&jarg1; 
  result = (ImDrawCmd *) ((arg1)->Data);
  *(ImDrawCmd **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImDrawCmd(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImDrawCmd *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImDrawCmd *)new ImVector_ImDrawCmd();
  *(ImVector_ImDrawCmd **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImDrawCmd(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImDrawCmd *arg1 = (ImVector_ImDrawCmd *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImDrawCmd **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec4_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImVec4 *arg1 = (ImVector_ImVec4 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec4 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec4_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImVec4 *arg1 = (ImVector_ImVec4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec4 **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec4_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImVec4 *arg1 = (ImVector_ImVec4 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec4 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec4_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImVec4 *arg1 = (ImVector_ImVec4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec4 **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec4_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImVec4 *arg1 = (ImVector_ImVec4 *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImVec4 **)&jarg1; 
  arg2 = *(ImVec4 **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec4_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImVec4 *arg1 = (ImVector_ImVec4 *) 0 ;
  ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec4 **)&jarg1; 
  result = (ImVec4 *) ((arg1)->Data);
  *(ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImVec4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImVec4 *)new ImVector_ImVec4();
  *(ImVector_ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImVec4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImVec4 *arg1 = (ImVector_ImVec4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImVec4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawIdx_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImDrawIdx *arg1 = (ImVector_ImDrawIdx *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawIdx **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawIdx_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImDrawIdx *arg1 = (ImVector_ImDrawIdx *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawIdx **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawIdx_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImDrawIdx *arg1 = (ImVector_ImDrawIdx *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawIdx **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawIdx_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImDrawIdx *arg1 = (ImVector_ImDrawIdx *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawIdx **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawIdx_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImVector_ImDrawIdx *arg1 = (ImVector_ImDrawIdx *) 0 ;
  ImDrawIdx *arg2 = (ImDrawIdx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawIdx **)&jarg1; 
  arg2 = *(ImDrawIdx **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImDrawIdx_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImDrawIdx *arg1 = (ImVector_ImDrawIdx *) 0 ;
  ImDrawIdx *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImDrawIdx **)&jarg1; 
  result = (ImDrawIdx *) ((arg1)->Data);
  *(ImDrawIdx **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImDrawIdx(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImDrawIdx *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImDrawIdx *)new ImVector_ImDrawIdx();
  *(ImVector_ImDrawIdx **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImDrawIdx(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImDrawIdx *arg1 = (ImVector_ImDrawIdx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImDrawIdx **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec2_1Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImVec2 *arg1 = (ImVector_ImVec2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec2_1Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImVec2 *arg1 = (ImVector_ImVec2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec2 **)&jarg1; 
  result = (int) ((arg1)->Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec2_1Capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVector_ImVec2 *arg1 = (ImVector_ImVec2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec2_1Capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImVector_ImVec2 *arg1 = (ImVector_ImVec2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec2 **)&jarg1; 
  result = (int) ((arg1)->Capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec2_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVector_ImVec2 *arg1 = (ImVector_ImVec2 *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVector_ImVec2 **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImVec2_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVector_ImVec2 *arg1 = (ImVector_ImVec2 *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImVec2 **)&jarg1; 
  result = (ImVec2 *) ((arg1)->Data);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVector_1ImVec2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImVec2 *)new ImVector_ImVec2();
  *(ImVector_ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVector_1ImVec2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVector_ImVec2 *arg1 = (ImVector_ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVector_ImVec2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVec2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVec2 *)new ImVec2();
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVec2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVec2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  result = (float) ((arg1)->w);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImVec4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVec4 *)new ImVec4();
  *(ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImVec4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImVec4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1Alpha_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Alpha = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1Alpha_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->Alpha);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowPadding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->WindowPadding = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowPadding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->WindowPadding);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowRounding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->WindowRounding = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowRounding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->WindowRounding);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowBorderSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->WindowBorderSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowBorderSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->WindowBorderSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowMinSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->WindowMinSize = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowMinSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->WindowMinSize);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowTitleAlign_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->WindowTitleAlign = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowTitleAlign_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->WindowTitleAlign);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowMenuButtonPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (ImGuiDir)jarg2; 
  if (arg1) (arg1)->WindowMenuButtonPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1WindowMenuButtonPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImGuiDir) ((arg1)->WindowMenuButtonPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ChildRounding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ChildRounding = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ChildRounding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->ChildRounding);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ChildBorderSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ChildBorderSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ChildBorderSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->ChildBorderSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1PopupRounding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PopupRounding = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1PopupRounding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->PopupRounding);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1PopupBorderSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PopupBorderSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1PopupBorderSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->PopupBorderSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1FramePadding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->FramePadding = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1FramePadding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->FramePadding);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1FrameRounding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FrameRounding = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1FrameRounding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->FrameRounding);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1FrameBorderSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FrameBorderSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1FrameBorderSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->FrameBorderSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ItemSpacing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->ItemSpacing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ItemSpacing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->ItemSpacing);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ItemInnerSpacing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->ItemInnerSpacing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ItemInnerSpacing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->ItemInnerSpacing);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1TouchExtraPadding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->TouchExtraPadding = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1TouchExtraPadding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->TouchExtraPadding);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1IndentSpacing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->IndentSpacing = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1IndentSpacing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->IndentSpacing);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ColumnsMinSpacing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ColumnsMinSpacing = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ColumnsMinSpacing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->ColumnsMinSpacing);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ScrollbarSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScrollbarSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ScrollbarSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->ScrollbarSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ScrollbarRounding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScrollbarRounding = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ScrollbarRounding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->ScrollbarRounding);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1GrabMinSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GrabMinSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1GrabMinSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->GrabMinSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1GrabRounding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GrabRounding = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1GrabRounding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->GrabRounding);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1TabRounding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TabRounding = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1TabRounding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->TabRounding);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1TabBorderSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TabBorderSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1TabBorderSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->TabBorderSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ColorButtonPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (ImGuiDir)jarg2; 
  if (arg1) (arg1)->ColorButtonPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ColorButtonPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImGuiDir) ((arg1)->ColorButtonPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ButtonTextAlign_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->ButtonTextAlign = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ButtonTextAlign_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->ButtonTextAlign);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1SelectableTextAlign_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->SelectableTextAlign = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1SelectableTextAlign_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->SelectableTextAlign);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1DisplayWindowPadding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->DisplayWindowPadding = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1DisplayWindowPadding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplayWindowPadding);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1DisplaySafeAreaPadding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->DisplaySafeAreaPadding = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1DisplaySafeAreaPadding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplaySafeAreaPadding);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1MouseCursorScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseCursorScale = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1MouseCursorScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->MouseCursorScale);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1AntiAliasedLines_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AntiAliasedLines = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1AntiAliasedLines_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (bool) ((arg1)->AntiAliasedLines);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1AntiAliasedFill_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AntiAliasedFill = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1AntiAliasedFill_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (bool) ((arg1)->AntiAliasedFill);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1CurveTessellationTol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CurveTessellationTol = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1CurveTessellationTol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->CurveTessellationTol);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1CircleSegmentMaxError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CircleSegmentMaxError = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1CircleSegmentMaxError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (float) ((arg1)->CircleSegmentMaxError);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1Colors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = *(ImVec4 **)&jarg2; 
  {
    size_t ii;
    ImVec4 *b = (ImVec4 *) arg1->Colors;
    for (ii = 0; ii < (size_t)ImGuiCol_COUNT; ii++) b[ii] = *((ImVec4 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1Colors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  result = (ImVec4 *)(ImVec4 *) ((arg1)->Colors);
  *(ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiStyle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiStyle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiStyle *)new ImGuiStyle();
  *(ImGuiStyle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiStyle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiConfigFlags arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (ImGuiConfigFlags)jarg2; 
  if (arg1) (arg1)->ConfigFlags = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiConfigFlags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImGuiConfigFlags) ((arg1)->ConfigFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiBackendFlags arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (ImGuiBackendFlags)jarg2; 
  if (arg1) (arg1)->BackendFlags = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiBackendFlags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImGuiBackendFlags) ((arg1)->BackendFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1DisplaySize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->DisplaySize = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1DisplaySize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplaySize);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1DeltaTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DeltaTime = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1DeltaTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->DeltaTime);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1IniSavingRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->IniSavingRate = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1IniSavingRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->IniSavingRate);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1IniFilename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->IniFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->IniFilename, (const char *)arg2);
    } else {
      arg1->IniFilename = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1IniFilename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (char *) ((arg1)->IniFilename);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1LogFilename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->LogFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->LogFilename, (const char *)arg2);
    } else {
      arg1->LogFilename = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1LogFilename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (char *) ((arg1)->LogFilename);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDoubleClickTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseDoubleClickTime = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDoubleClickTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->MouseDoubleClickTime);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDoubleClickMaxDist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseDoubleClickMaxDist = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDoubleClickMaxDist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->MouseDoubleClickMaxDist);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDragThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseDragThreshold = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDragThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->MouseDragThreshold);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->KeyMap;
    for (ii = 0; ii < (size_t)ImGuiKey_COUNT; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (int *)(int *) ((arg1)->KeyMap);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyRepeatDelay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->KeyRepeatDelay = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyRepeatDelay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->KeyRepeatDelay);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyRepeatRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->KeyRepeatRate = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyRepeatRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->KeyRepeatRate);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1UserData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->UserData = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1UserData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (void *) ((arg1)->UserData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1Fonts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *arg2 = (ImFontAtlas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImFontAtlas **)&jarg2; 
  if (arg1) (arg1)->Fonts = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1Fonts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImFontAtlas *) ((arg1)->Fonts);
  *(ImFontAtlas **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1FontGlobalScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FontGlobalScale = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1FontGlobalScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->FontGlobalScale);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1FontAllowUserScaling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FontAllowUserScaling = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1FontAllowUserScaling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->FontAllowUserScaling);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1FontDefault_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImFont **)&jarg2; 
  if (arg1) (arg1)->FontDefault = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1FontDefault_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImFont *) ((arg1)->FontDefault);
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1DisplayFramebufferScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->DisplayFramebufferScale = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1DisplayFramebufferScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplayFramebufferScale);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDrawCursor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MouseDrawCursor = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDrawCursor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->MouseDrawCursor);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigMacOSXBehaviors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigMacOSXBehaviors = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigMacOSXBehaviors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->ConfigMacOSXBehaviors);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigInputTextCursorBlink_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigInputTextCursorBlink = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigInputTextCursorBlink_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->ConfigInputTextCursorBlink);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigWindowsResizeFromEdges_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigWindowsResizeFromEdges = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigWindowsResizeFromEdges_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->ConfigWindowsResizeFromEdges);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigWindowsMoveFromTitleBarOnly_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigWindowsMoveFromTitleBarOnly = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigWindowsMoveFromTitleBarOnly_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->ConfigWindowsMoveFromTitleBarOnly);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigWindowsMemoryCompactTimer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ConfigWindowsMemoryCompactTimer = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ConfigWindowsMemoryCompactTimer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->ConfigWindowsMemoryCompactTimer);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendPlatformName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->BackendPlatformName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->BackendPlatformName, (const char *)arg2);
    } else {
      arg1->BackendPlatformName = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendPlatformName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (char *) ((arg1)->BackendPlatformName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendRendererName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->BackendRendererName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->BackendRendererName, (const char *)arg2);
    } else {
      arg1->BackendRendererName = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendRendererName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (char *) ((arg1)->BackendRendererName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendPlatformUserData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->BackendPlatformUserData = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendPlatformUserData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (void *) ((arg1)->BackendPlatformUserData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendRendererUserData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->BackendRendererUserData = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendRendererUserData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (void *) ((arg1)->BackendRendererUserData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendLanguageUserData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->BackendLanguageUserData = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1BackendLanguageUserData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (void *) ((arg1)->BackendLanguageUserData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1GetClipboardTextFn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*arg2)(void *) = (char *(*)(void *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(char *(**)(void *))&jarg2; 
  if (arg1) (arg1)->GetClipboardTextFn = (char const *(*)(void *))arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1GetClipboardTextFn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*result)(void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (char *(*)(void *)) ((arg1)->GetClipboardTextFn);
  *(char *(**)(void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1SetClipboardTextFn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(void *,char const *) = (void (*)(void *,char const *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(void (**)(void *,char const *))&jarg2; 
  if (arg1) (arg1)->SetClipboardTextFn = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1SetClipboardTextFn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(void *,char const *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (void (*)(void *,char const *)) ((arg1)->SetClipboardTextFn);
  *(void (**)(void *,char const *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ClipboardUserData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->ClipboardUserData = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ClipboardUserData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (void *) ((arg1)->ClipboardUserData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ImeSetInputScreenPosFn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(int,int) = (void (*)(int,int)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(void (**)(int,int))&jarg2; 
  if (arg1) (arg1)->ImeSetInputScreenPosFn = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ImeSetInputScreenPosFn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(int,int) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (void (*)(int,int)) ((arg1)->ImeSetInputScreenPosFn);
  *(void (**)(int,int))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ImeWindowHandle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->ImeWindowHandle = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ImeWindowHandle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (void *) ((arg1)->ImeWindowHandle);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1RenderDrawListsFnUnused_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->RenderDrawListsFnUnused = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1RenderDrawListsFnUnused_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (void *) ((arg1)->RenderDrawListsFnUnused);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MousePos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->MousePos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MousePos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->MousePos);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDown_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDown;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDown_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseDown);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseWheel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseWheel = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseWheel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->MouseWheel);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseWheelH_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseWheelH = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseWheelH_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->MouseWheelH);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyCtrl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->KeyCtrl = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyCtrl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->KeyCtrl);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyShift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->KeyShift = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyShift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->KeyShift);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyAlt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->KeyAlt = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeyAlt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->KeyAlt);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeySuper_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->KeySuper = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeySuper_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->KeySuper);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeysDown_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->KeysDown;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeysDown_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool *)(bool *) ((arg1)->KeysDown);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavInputs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->NavInputs;
    for (ii = 0; ii < (size_t)ImGuiNavInput_COUNT; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavInputs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float *)(float *) ((arg1)->NavInputs);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantCaptureMouse_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantCaptureMouse = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantCaptureMouse_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->WantCaptureMouse);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantCaptureKeyboard_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantCaptureKeyboard = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantCaptureKeyboard_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->WantCaptureKeyboard);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantTextInput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantTextInput = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantTextInput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->WantTextInput);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantSetMousePos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantSetMousePos = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantSetMousePos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->WantSetMousePos);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantSaveIniSettings_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantSaveIniSettings = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1WantSaveIniSettings_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->WantSaveIniSettings);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NavActive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->NavActive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavVisible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NavVisible = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavVisible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool) ((arg1)->NavVisible);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1Framerate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Framerate = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1Framerate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float) ((arg1)->Framerate);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsRenderVertices_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsRenderVertices = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsRenderVertices_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (int) ((arg1)->MetricsRenderVertices);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsRenderIndices_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsRenderIndices = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsRenderIndices_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (int) ((arg1)->MetricsRenderIndices);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsRenderWindows_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsRenderWindows = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsRenderWindows_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (int) ((arg1)->MetricsRenderWindows);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsActiveWindows_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsActiveWindows = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsActiveWindows_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (int) ((arg1)->MetricsActiveWindows);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsActiveAllocations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsActiveAllocations = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MetricsActiveAllocations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (int) ((arg1)->MetricsActiveAllocations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDelta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->MouseDelta = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDelta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->MouseDelta);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MousePosPrev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->MousePosPrev = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MousePosPrev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->MousePosPrev);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseClickedPos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  {
    size_t ii;
    ImVec2 *b = (ImVec2 *) arg1->MouseClickedPos;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImVec2 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseClickedPos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImVec2 *)(ImVec2 *) ((arg1)->MouseClickedPos);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseClickedTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->MouseClickedTime;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseClickedTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (double *)(double *) ((arg1)->MouseClickedTime);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseClicked_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseClicked;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseClicked_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseClicked);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDoubleClicked_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDoubleClicked;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDoubleClicked_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseDoubleClicked);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseReleased_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseReleased;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseReleased_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseReleased);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDownOwned_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDownOwned;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDownOwned_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseDownOwned);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDownWasDoubleClick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDownWasDoubleClick;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDownWasDoubleClick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseDownWasDoubleClick);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDownDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->MouseDownDuration;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDownDuration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float *)(float *) ((arg1)->MouseDownDuration);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDownDurationPrev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->MouseDownDurationPrev;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDownDurationPrev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float *)(float *) ((arg1)->MouseDownDurationPrev);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDragMaxDistanceAbs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  {
    size_t ii;
    ImVec2 *b = (ImVec2 *) arg1->MouseDragMaxDistanceAbs;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImVec2 *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDragMaxDistanceAbs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImVec2 *)(ImVec2 *) ((arg1)->MouseDragMaxDistanceAbs);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDragMaxDistanceSqr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->MouseDragMaxDistanceSqr;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1MouseDragMaxDistanceSqr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float *)(float *) ((arg1)->MouseDragMaxDistanceSqr);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeysDownDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->KeysDownDuration;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeysDownDuration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float *)(float *) ((arg1)->KeysDownDuration);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeysDownDurationPrev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->KeysDownDurationPrev;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1KeysDownDurationPrev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float *)(float *) ((arg1)->KeysDownDurationPrev);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavInputsDownDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->NavInputsDownDuration;
    for (ii = 0; ii < (size_t)ImGuiNavInput_COUNT; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavInputsDownDuration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float *)(float *) ((arg1)->NavInputsDownDuration);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavInputsDownDurationPrev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->NavInputsDownDurationPrev;
    for (ii = 0; ii < (size_t)ImGuiNavInput_COUNT; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1NavInputsDownDurationPrev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (float *)(float *) ((arg1)->NavInputsDownDurationPrev);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1InputQueueCharacters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVector_ImWchar *arg2 = (ImVector_ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = *(ImVector_ImWchar **)&jarg2; 
  if (arg1) (arg1)->InputQueueCharacters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1InputQueueCharacters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVector_ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  result = (ImVector_ImWchar *)& ((arg1)->InputQueueCharacters);
  *(ImVector_ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiIO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiIO *)new ImGuiIO();
  *(ImGuiIO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiIO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiIO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1EventFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (ImGuiInputTextFlags)jarg2; 
  if (arg1) (arg1)->EventFlag = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1EventFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (ImGuiInputTextFlags) ((arg1)->EventFlag);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1Flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (ImGuiInputTextFlags)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1Flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (ImGuiInputTextFlags) ((arg1)->Flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1UserData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->UserData = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1UserData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (void *) ((arg1)->UserData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1EventChar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImWchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->EventChar = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1EventChar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImWchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (ImWchar) ((arg1)->EventChar);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1EventKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiKey arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (ImGuiKey)jarg2; 
  if (arg1) (arg1)->EventKey = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1EventKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (ImGuiKey) ((arg1)->EventKey);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1Buf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->Buf;
    if (arg2) {
      arg1->Buf = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Buf, (const char *)arg2);
    } else {
      arg1->Buf = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1Buf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (char *) ((arg1)->Buf);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1BufTextLen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BufTextLen = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1BufTextLen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (int) ((arg1)->BufTextLen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1BufSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BufSize = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1BufSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (int) ((arg1)->BufSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1BufDirty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->BufDirty = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1BufDirty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (bool) ((arg1)->BufDirty);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1CursorPos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CursorPos = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1CursorPos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (int) ((arg1)->CursorPos);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1SelectionStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SelectionStart = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1SelectionStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (int) ((arg1)->SelectionStart);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1SelectionEnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SelectionEnd = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1SelectionEnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (int) ((arg1)->SelectionEnd);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiInputTextCallbackData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiInputTextCallbackData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiInputTextCallbackData *)new ImGuiInputTextCallbackData();
  *(ImGuiInputTextCallbackData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiInputTextCallbackData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiSizeCallbackData_1UserData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiSizeCallbackData **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->UserData = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiSizeCallbackData_1UserData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiSizeCallbackData **)&jarg1; 
  result = (void *) ((arg1)->UserData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiSizeCallbackData_1Pos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiSizeCallbackData **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->Pos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiSizeCallbackData_1Pos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiSizeCallbackData **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->Pos);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiSizeCallbackData_1CurrentSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiSizeCallbackData **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->CurrentSize = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiSizeCallbackData_1CurrentSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiSizeCallbackData **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->CurrentSize);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiSizeCallbackData_1DesiredSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiSizeCallbackData **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->DesiredSize = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiSizeCallbackData_1DesiredSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiSizeCallbackData **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->DesiredSize);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiSizeCallbackData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiSizeCallbackData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiSizeCallbackData *)new ImGuiSizeCallbackData();
  *(ImGuiSizeCallbackData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiSizeCallbackData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiSizeCallbackData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (void *) ((arg1)->Data);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1DataSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DataSize = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1DataSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (int) ((arg1)->DataSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1SourceId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->SourceId = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1SourceId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (ImGuiID) ((arg1)->SourceId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1SourceParentId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->SourceParentId = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1SourceParentId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (ImGuiID) ((arg1)->SourceParentId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1DataFrameCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DataFrameCount = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1DataFrameCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (int) ((arg1)->DataFrameCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1DataType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DataType, (const char *)arg2, 32+1-1);
      arg1->DataType[32+1-1] = 0;
    } else {
      arg1->DataType[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1DataType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (char *)(char *) ((arg1)->DataType);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1Preview_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Preview = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1Preview_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (bool) ((arg1)->Preview);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1Delivery_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Delivery = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1Delivery_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (bool) ((arg1)->Delivery);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiPayload(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiPayload *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiPayload *)new ImGuiPayload();
  *(ImGuiPayload **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiPayload(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiPayload **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiOnceUponAFrame_1RefFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiOnceUponAFrame **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RefFrame = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiOnceUponAFrame_1RefFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiOnceUponAFrame **)&jarg1; 
  result = (int) ((arg1)->RefFrame);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiOnceUponAFrame(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiOnceUponAFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiOnceUponAFrame *)new ImGuiOnceUponAFrame();
  *(ImGuiOnceUponAFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiOnceUponAFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiOnceUponAFrame **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1InputBuf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InputBuf, (const char *)arg2, 256-1);
      arg1->InputBuf[256-1] = 0;
    } else {
      arg1->InputBuf[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1InputBuf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  result = (char *)(char *) ((arg1)->InputBuf);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1Filters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  ImVector_ImGuiTextRange *arg2 = (ImVector_ImGuiTextRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  arg2 = *(ImVector_ImGuiTextRange **)&jarg2; 
  if (arg1) (arg1)->Filters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1Filters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  ImVector_ImGuiTextRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  result = (ImVector_ImGuiTextRange *)& ((arg1)->Filters);
  *(ImVector_ImGuiTextRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1CountGrep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CountGrep = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1CountGrep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  result = (int) ((arg1)->CountGrep);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiTextFilter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiTextFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiTextFilter *)new ImGuiTextFilter();
  *(ImGuiTextFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiTextFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1Buf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  ImVector_char *arg2 = (ImVector_char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  arg2 = *(ImVector_char **)&jarg2; 
  if (arg1) (arg1)->Buf = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1Buf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  ImVector_char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  result = (ImVector_char *)& ((arg1)->Buf);
  *(ImVector_char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiTextBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiTextBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiTextBuffer *)new ImGuiTextBuffer();
  *(ImGuiTextBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiTextBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImVector_ImGuiStoragePair *arg2 = (ImVector_ImGuiStoragePair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = *(ImVector_ImGuiStoragePair **)&jarg2; 
  if (arg1) (arg1)->Data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImVector_ImGuiStoragePair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  result = (ImVector_ImGuiStoragePair *)& ((arg1)->Data);
  *(ImVector_ImGuiStoragePair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiStorage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiStorage *)new ImGuiStorage();
  *(ImGuiStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiStorage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1DisplayStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DisplayStart = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1DisplayStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  result = (int) ((arg1)->DisplayStart);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1DisplayEnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DisplayEnd = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1DisplayEnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  result = (int) ((arg1)->DisplayEnd);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1ItemsCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ItemsCount = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1ItemsCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  result = (int) ((arg1)->ItemsCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1StepNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StepNo = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1StepNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  result = (int) ((arg1)->StepNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1ItemsHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ItemsHeight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1ItemsHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  result = (float) ((arg1)->ItemsHeight);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1StartPosY_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->StartPosY = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1StartPosY_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  result = (float) ((arg1)->StartPosY);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiListClipper(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiListClipper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiListClipper *)new ImGuiListClipper();
  *(ImGuiListClipper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiListClipper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1Value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImColor **)&jarg1; 
  arg2 = *(ImVec4 **)&jarg2; 
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1Value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImColor **)&jarg1; 
  result = (ImVec4 *)& ((arg1)->Value);
  *(ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImColor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImColor *)new ImColor();
  *(ImColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImColor *arg1 = (ImColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImColor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1ElemCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ElemCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1ElemCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  result = (unsigned int) ((arg1)->ElemCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1ClipRect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  arg2 = *(ImVec4 **)&jarg2; 
  if (arg1) (arg1)->ClipRect = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1ClipRect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  result = (ImVec4 *)& ((arg1)->ClipRect);
  *(ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1TextureId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  arg2 = *(ImTextureID *)&jarg2; 
  if (arg1) (arg1)->TextureId = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1TextureId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  result = (ImTextureID) ((arg1)->TextureId);
  *(ImTextureID *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1VtxOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->VtxOffset = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1VtxOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  result = (unsigned int) ((arg1)->VtxOffset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1IdxOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->IdxOffset = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1IdxOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  result = (unsigned int) ((arg1)->IdxOffset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1UserCallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  arg2 = *(ImDrawCallback *)&jarg2; 
  if (arg1) (arg1)->UserCallback = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1UserCallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  result = (ImDrawCallback) ((arg1)->UserCallback);
  *(ImDrawCallback *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1UserCallbackData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->UserCallbackData = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1UserCallbackData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  result = (void *) ((arg1)->UserCallbackData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImDrawCmd(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawCmd *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawCmd *)new ImDrawCmd();
  *(ImDrawCmd **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImDrawCmd(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImDrawCmd **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawVert_1pos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawVert **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawVert_1pos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawVert **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->pos);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawVert_1uv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawVert **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->uv = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawVert_1uv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawVert **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->uv);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawVert_1col_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawVert **)&jarg1; 
  arg2 = (ImU32)jarg2; 
  if (arg1) (arg1)->col = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawVert_1col_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawVert **)&jarg1; 
  result = (ImU32) ((arg1)->col);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImDrawVert(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawVert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawVert *)new ImDrawVert();
  *(ImDrawVert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImDrawVert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImDrawVert **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawChannel_1_1CmdBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector_ImDrawCmd *arg2 = (ImVector_ImDrawCmd *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawChannel **)&jarg1; 
  arg2 = *(ImVector_ImDrawCmd **)&jarg2; 
  if (arg1) (arg1)->_CmdBuffer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawChannel_1_1CmdBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector_ImDrawCmd *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawChannel **)&jarg1; 
  result = (ImVector_ImDrawCmd *)& ((arg1)->_CmdBuffer);
  *(ImVector_ImDrawCmd **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawChannel_1_1IdxBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector_ImDrawIdx *arg2 = (ImVector_ImDrawIdx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawChannel **)&jarg1; 
  arg2 = *(ImVector_ImDrawIdx **)&jarg2; 
  if (arg1) (arg1)->_IdxBuffer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawChannel_1_1IdxBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector_ImDrawIdx *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawChannel **)&jarg1; 
  result = (ImVector_ImDrawIdx *)& ((arg1)->_IdxBuffer);
  *(ImVector_ImDrawIdx **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImDrawChannel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawChannel *)new ImDrawChannel();
  *(ImDrawChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImDrawChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImDrawChannel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1_1Current_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_Current = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1_1Current_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  result = (int) ((arg1)->_Current);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1_1Count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_Count = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1_1Count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  result = (int) ((arg1)->_Count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1_1Channels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImVector_ImDrawChannel *arg2 = (ImVector_ImDrawChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  arg2 = *(ImVector_ImDrawChannel **)&jarg2; 
  if (arg1) (arg1)->_Channels = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1_1Channels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImVector_ImDrawChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  result = (ImVector_ImDrawChannel *)& ((arg1)->_Channels);
  *(ImVector_ImDrawChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImDrawListSplitter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawListSplitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawListSplitter *)new ImDrawListSplitter();
  *(ImDrawListSplitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImDrawListSplitter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1CmdBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImDrawCmd *arg2 = (ImVector_ImDrawCmd *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImVector_ImDrawCmd **)&jarg2; 
  if (arg1) (arg1)->CmdBuffer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1CmdBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImDrawCmd *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImVector_ImDrawCmd *)& ((arg1)->CmdBuffer);
  *(ImVector_ImDrawCmd **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1IdxBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImDrawIdx *arg2 = (ImVector_ImDrawIdx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImVector_ImDrawIdx **)&jarg2; 
  if (arg1) (arg1)->IdxBuffer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1IdxBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImDrawIdx *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImVector_ImDrawIdx *)& ((arg1)->IdxBuffer);
  *(ImVector_ImDrawIdx **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1VtxBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImDrawVert *arg2 = (ImVector_ImDrawVert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImVector_ImDrawVert **)&jarg2; 
  if (arg1) (arg1)->VtxBuffer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1VtxBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImDrawVert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImVector_ImDrawVert *)& ((arg1)->VtxBuffer);
  *(ImVector_ImDrawVert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1Flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListFlags arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (ImDrawListFlags)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1Flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListFlags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImDrawListFlags) ((arg1)->Flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1Data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSharedData *arg2 = (ImDrawListSharedData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImDrawListSharedData **)&jarg2; 
  if (arg1) (arg1)->_Data = (ImDrawListSharedData const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1Data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSharedData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImDrawListSharedData *) ((arg1)->_Data);
  *(ImDrawListSharedData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1OwnerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->_OwnerName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_OwnerName, (const char *)arg2);
    } else {
      arg1->_OwnerName = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1OwnerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (char *) ((arg1)->_OwnerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1VtxCurrentOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->_VtxCurrentOffset = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1VtxCurrentOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (unsigned int) ((arg1)->_VtxCurrentOffset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1VtxCurrentIdx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->_VtxCurrentIdx = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1VtxCurrentIdx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (unsigned int) ((arg1)->_VtxCurrentIdx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1VtxWritePtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *arg2 = (ImDrawVert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImDrawVert **)&jarg2; 
  if (arg1) (arg1)->_VtxWritePtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1VtxWritePtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImDrawVert *) ((arg1)->_VtxWritePtr);
  *(ImDrawVert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1IdxWritePtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *arg2 = (ImDrawIdx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImDrawIdx **)&jarg2; 
  if (arg1) (arg1)->_IdxWritePtr = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1IdxWritePtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImDrawIdx *) ((arg1)->_IdxWritePtr);
  *(ImDrawIdx **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1ClipRectStack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImVec4 *arg2 = (ImVector_ImVec4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImVector_ImVec4 **)&jarg2; 
  if (arg1) (arg1)->_ClipRectStack = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1ClipRectStack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImVector_ImVec4 *)& ((arg1)->_ClipRectStack);
  *(ImVector_ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1TextureIdStack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImTextureID *arg2 = (ImVector_ImTextureID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImVector_ImTextureID **)&jarg2; 
  if (arg1) (arg1)->_TextureIdStack = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1TextureIdStack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImTextureID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImVector_ImTextureID *)& ((arg1)->_TextureIdStack);
  *(ImVector_ImTextureID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1Path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImVec2 *arg2 = (ImVector_ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImVector_ImVec2 **)&jarg2; 
  if (arg1) (arg1)->_Path = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1Path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector_ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImVector_ImVec2 *)& ((arg1)->_Path);
  *(ImVector_ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1Splitter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSplitter *arg2 = (ImDrawListSplitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImDrawListSplitter **)&jarg2; 
  if (arg1) (arg1)->_Splitter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1_1Splitter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSplitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImDrawListSplitter *)& ((arg1)->_Splitter);
  *(ImDrawListSplitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImDrawList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawList *)new ImDrawList();
  *(ImDrawList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImDrawList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImDrawList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1Valid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Valid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1Valid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  result = (bool) ((arg1)->Valid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1CmdLists_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImDrawList **arg2 = (ImDrawList **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  arg2 = *(ImDrawList ***)&jarg2; 
  if (arg1) (arg1)->CmdLists = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1CmdLists_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImDrawList **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  result = (ImDrawList **) ((arg1)->CmdLists);
  *(ImDrawList ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1CmdListsCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CmdListsCount = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1CmdListsCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  result = (int) ((arg1)->CmdListsCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1TotalIdxCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalIdxCount = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1TotalIdxCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  result = (int) ((arg1)->TotalIdxCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1TotalVtxCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalVtxCount = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1TotalVtxCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  result = (int) ((arg1)->TotalVtxCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1DisplayPos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawData **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->DisplayPos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1DisplayPos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplayPos);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1DisplaySize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawData **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->DisplaySize = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1DisplaySize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplaySize);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1FramebufferScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawData **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->FramebufferScale = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1FramebufferScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->FramebufferScale);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImDrawData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawData *)new ImDrawData();
  *(ImDrawData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImDrawData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImDrawData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1FontData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->FontData = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1FontData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (void *) ((arg1)->FontData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1FontDataSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FontDataSize = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1FontDataSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (int) ((arg1)->FontDataSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1FontDataOwnedByAtlas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FontDataOwnedByAtlas = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1FontDataOwnedByAtlas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (bool) ((arg1)->FontDataOwnedByAtlas);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1FontNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FontNo = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1FontNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (int) ((arg1)->FontNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1SizePixels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SizePixels = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1SizePixels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (float) ((arg1)->SizePixels);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1OversampleH_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OversampleH = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1OversampleH_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (int) ((arg1)->OversampleH);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1OversampleV_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OversampleV = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1OversampleV_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (int) ((arg1)->OversampleV);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1PixelSnapH_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PixelSnapH = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1PixelSnapH_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (bool) ((arg1)->PixelSnapH);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphExtraSpacing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->GlyphExtraSpacing = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphExtraSpacing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->GlyphExtraSpacing);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->GlyphOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->GlyphOffset);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphRanges_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = *(ImWchar **)&jarg2; 
  if (arg1) (arg1)->GlyphRanges = (ImWchar const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphRanges_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (ImWchar *) ((arg1)->GlyphRanges);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphMinAdvanceX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GlyphMinAdvanceX = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphMinAdvanceX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (float) ((arg1)->GlyphMinAdvanceX);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphMaxAdvanceX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GlyphMaxAdvanceX = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1GlyphMaxAdvanceX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (float) ((arg1)->GlyphMaxAdvanceX);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1MergeMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MergeMode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1MergeMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (bool) ((arg1)->MergeMode);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1RasterizerFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->RasterizerFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1RasterizerFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (unsigned int) ((arg1)->RasterizerFlags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1RasterizerMultiply_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RasterizerMultiply = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1RasterizerMultiply_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (float) ((arg1)->RasterizerMultiply);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1EllipsisChar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->EllipsisChar = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1EllipsisChar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (ImWchar) ((arg1)->EllipsisChar);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 40-1);
      arg1->Name[40-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1DstFont_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontConfig **)&jarg1; 
  arg2 = *(ImFont **)&jarg2; 
  if (arg1) (arg1)->DstFont = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1DstFont_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  result = (ImFont *) ((arg1)->DstFont);
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImFontConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFontConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFontConfig *)new ImFontConfig();
  *(ImFontConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImFontConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImFontConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1Codepoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  ImWchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->Codepoint = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1Codepoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  ImWchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (ImWchar) ((arg1)->Codepoint);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1AdvanceX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AdvanceX = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1AdvanceX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (float) ((arg1)->AdvanceX);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1X0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X0 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1X0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (float) ((arg1)->X0);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1Y0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y0 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1Y0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (float) ((arg1)->Y0);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1X1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1X1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (float) ((arg1)->X1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1Y1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1Y1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (float) ((arg1)->Y1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1U0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->U0 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1U0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (float) ((arg1)->U0);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1V0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->V0 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1V0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (float) ((arg1)->V0);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1U1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->U1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1U1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (float) ((arg1)->U1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1V1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->V1 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyph_1V1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyph **)&jarg1; 
  result = (float) ((arg1)->V1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImFontGlyph(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFontGlyph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFontGlyph *)new ImFontGlyph();
  *(ImFontGlyph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImFontGlyph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImFontGlyph **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1UsedChars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector_ImU32 *arg2 = (ImVector_ImU32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  arg2 = *(ImVector_ImU32 **)&jarg2; 
  if (arg1) (arg1)->UsedChars = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1UsedChars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector_ImU32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  result = (ImVector_ImU32 *)& ((arg1)->UsedChars);
  *(ImVector_ImU32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImFontGlyphRangesBuilder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFontGlyphRangesBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFontGlyphRangesBuilder *)new ImFontGlyphRangesBuilder();
  *(ImFontGlyphRangesBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImFontGlyphRangesBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1ID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1ID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  result = (unsigned int) ((arg1)->ID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1Width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1Width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  result = (unsigned short) ((arg1)->Width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1Height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1Height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  result = (unsigned short) ((arg1)->Height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1X_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  result = (unsigned short) ((arg1)->X);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1Y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  result = (unsigned short) ((arg1)->Y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1GlyphAdvanceX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GlyphAdvanceX = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1GlyphAdvanceX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  result = (float) ((arg1)->GlyphAdvanceX);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1GlyphOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->GlyphOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1GlyphOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->GlyphOffset);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1Font_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  arg2 = *(ImFont **)&jarg2; 
  if (arg1) (arg1)->Font = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1Font_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  result = (ImFont *) ((arg1)->Font);
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImFontAtlasCustomRect(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFontAtlasCustomRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFontAtlasCustomRect *)new ImFontAtlasCustomRect();
  *(ImFontAtlasCustomRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImFontAtlasCustomRect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1Locked_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Locked = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1Locked_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (bool) ((arg1)->Locked);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1Flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasFlags arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = (ImFontAtlasFlags)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1Flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasFlags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImFontAtlasFlags) ((arg1)->Flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImTextureID *)&jarg2; 
  if (arg1) (arg1)->TexID = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImTextureID) ((arg1)->TexID);
  *(ImTextureID *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexDesiredWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TexDesiredWidth = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexDesiredWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (int) ((arg1)->TexDesiredWidth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexGlyphPadding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TexGlyphPadding = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexGlyphPadding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (int) ((arg1)->TexGlyphPadding);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexPixelsAlpha8_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->TexPixelsAlpha8 = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexPixelsAlpha8_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (unsigned char *) ((arg1)->TexPixelsAlpha8);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexPixelsRGBA32_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  if (arg1) (arg1)->TexPixelsRGBA32 = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexPixelsRGBA32_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (unsigned int *) ((arg1)->TexPixelsRGBA32);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TexWidth = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (int) ((arg1)->TexWidth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TexHeight = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (int) ((arg1)->TexHeight);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexUvScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->TexUvScale = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexUvScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->TexUvScale);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexUvWhitePixel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->TexUvWhitePixel = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1TexUvWhitePixel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->TexUvWhitePixel);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1Fonts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector_ImFontPtr *arg2 = (ImVector_ImFontPtr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImVector_ImFontPtr **)&jarg2; 
  if (arg1) (arg1)->Fonts = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1Fonts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector_ImFontPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImVector_ImFontPtr *)& ((arg1)->Fonts);
  *(ImVector_ImFontPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1CustomRects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector_ImFontAtlasCustomRect *arg2 = (ImVector_ImFontAtlasCustomRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImVector_ImFontAtlasCustomRect **)&jarg2; 
  if (arg1) (arg1)->CustomRects = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1CustomRects_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector_ImFontAtlasCustomRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImVector_ImFontAtlasCustomRect *)& ((arg1)->CustomRects);
  *(ImVector_ImFontAtlasCustomRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1ConfigData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector_ImFontConfig *arg2 = (ImVector_ImFontConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImVector_ImFontConfig **)&jarg2; 
  if (arg1) (arg1)->ConfigData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1ConfigData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector_ImFontConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImVector_ImFontConfig *)& ((arg1)->ConfigData);
  *(ImVector_ImFontConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1CustomRectIds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->CustomRectIds;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1CustomRectIds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (int *)(int *) ((arg1)->CustomRectIds);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImFontAtlas(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFontAtlas *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFontAtlas *)new ImFontAtlas();
  *(ImFontAtlas **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImFontAtlas(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImFontAtlas **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1IndexAdvanceX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector_float *arg2 = (ImVector_float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = *(ImVector_float **)&jarg2; 
  if (arg1) (arg1)->IndexAdvanceX = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1IndexAdvanceX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector_float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (ImVector_float *)& ((arg1)->IndexAdvanceX);
  *(ImVector_float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FallbackAdvanceX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FallbackAdvanceX = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FallbackAdvanceX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (float) ((arg1)->FallbackAdvanceX);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FontSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FontSize = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FontSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (float) ((arg1)->FontSize);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1IndexLookup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector_ImWchar *arg2 = (ImVector_ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = *(ImVector_ImWchar **)&jarg2; 
  if (arg1) (arg1)->IndexLookup = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1IndexLookup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector_ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (ImVector_ImWchar *)& ((arg1)->IndexLookup);
  *(ImVector_ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1Glyphs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector_ImFontGlyph *arg2 = (ImVector_ImFontGlyph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = *(ImVector_ImFontGlyph **)&jarg2; 
  if (arg1) (arg1)->Glyphs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1Glyphs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector_ImFontGlyph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (ImVector_ImFontGlyph *)& ((arg1)->Glyphs);
  *(ImVector_ImFontGlyph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FallbackGlyph_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontGlyph *arg2 = (ImFontGlyph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = *(ImFontGlyph **)&jarg2; 
  if (arg1) (arg1)->FallbackGlyph = (ImFontGlyph const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FallbackGlyph_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontGlyph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (ImFontGlyph *) ((arg1)->FallbackGlyph);
  *(ImFontGlyph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1DisplayOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  if (arg1) (arg1)->DisplayOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1DisplayOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplayOffset);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1ContainerAtlas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontAtlas *arg2 = (ImFontAtlas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = *(ImFontAtlas **)&jarg2; 
  if (arg1) (arg1)->ContainerAtlas = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1ContainerAtlas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontAtlas *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (ImFontAtlas *) ((arg1)->ContainerAtlas);
  *(ImFontAtlas **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1ConfigData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = *(ImFontConfig **)&jarg2; 
  if (arg1) (arg1)->ConfigData = (ImFontConfig const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1ConfigData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (ImFontConfig *) ((arg1)->ConfigData);
  *(ImFontConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1ConfigDataCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->ConfigDataCount = arg2;
}


SWIGEXPORT jshort JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1ConfigDataCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (short) ((arg1)->ConfigDataCount);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FallbackChar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->FallbackChar = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FallbackChar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (ImWchar) ((arg1)->FallbackChar);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1EllipsisChar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->EllipsisChar = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1EllipsisChar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (ImWchar) ((arg1)->EllipsisChar);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1DirtyLookupTables_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DirtyLookupTables = arg2;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1DirtyLookupTables_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (bool) ((arg1)->DirtyLookupTables);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1Scale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1Scale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (float) ((arg1)->Scale);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1Ascent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Ascent = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1Ascent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (float) ((arg1)->Ascent);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1Descent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Descent = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1Descent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (float) ((arg1)->Descent);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1MetricsTotalSurface_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsTotalSurface = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1MetricsTotalSurface_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (int) ((arg1)->MetricsTotalSurface);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImFont(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFont *)new ImFont();
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImFont(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImFont **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextRange_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiTextRange *arg1 = (ImGuiTextRange *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextRange **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->b = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->b, (const char *)arg2);
    } else {
      arg1->b = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextRange_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiTextRange *arg1 = (ImGuiTextRange *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextRange **)&jarg1; 
  result = (char *) ((arg1)->b);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextRange_1e_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiTextRange *arg1 = (ImGuiTextRange *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextRange **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->e = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->e, (const char *)arg2);
    } else {
      arg1->e = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextRange_1e_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiTextRange *arg1 = (ImGuiTextRange *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextRange **)&jarg1; 
  result = (char *) ((arg1)->e);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiTextRange(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiTextRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiTextRange *)new ImGuiTextRange();
  *(ImGuiTextRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiTextRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiTextRange *arg1 = (ImGuiTextRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiTextRange **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  ImGuiID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->key = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  ImGuiID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  result = (ImGuiID) ((arg1)->key);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1val_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->val_i = arg2;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1val_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  result = (int) ((arg1)->val_i);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1val_1f_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->val_f = arg2;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1val_1f_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  result = (float) ((arg1)->val_f);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1val_1p_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->val_p = arg2;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1val_1p_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  result = (void *) ((arg1)->val_p);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImGuiStoragePair(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiStoragePair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiStoragePair *)new ImGuiStoragePair();
  *(ImGuiStoragePair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImGuiStoragePair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1ImVec2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVec2 *)ImVec2_ImVec2();
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  ImVec2_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVec2_1ImVec2Float(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  ImVec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ImVec2 *)ImVec2_ImVec2Float(arg1,arg2);
  *(ImVec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1ImVec4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVec4 *)ImVec4_ImVec4();
  *(ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  ImVec4_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVec4_1ImVec4Float(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ImVec4 *)ImVec4_ImVec4Float(arg1,arg2,arg3,arg4);
  *(ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igCreateContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImGuiContext *)igCreateContext(arg1);
  *(ImGuiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igDestroyContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiContext **)&jarg1; 
  igDestroyContext(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetCurrentContext(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiContext *)igGetCurrentContext();
  *(ImGuiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetCurrentContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImGuiContext **)&jarg1; 
  igSetCurrentContext(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDebugCheckVersionAndDataLayout(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (bool)igDebugCheckVersionAndDataLayout((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetIO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiIO *)igGetIO();
  *(ImGuiIO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetStyle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiStyle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiStyle *)igGetStyle();
  *(ImGuiStyle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igNewFrame(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igNewFrame();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndFrame(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndFrame();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igRender(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igRender();
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetDrawData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawData *)igGetDrawData();
  *(ImDrawData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igShowDemoWindow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  igShowDemoWindow(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igShowAboutWindow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  igShowAboutWindow(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igShowMetricsWindow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  igShowMetricsWindow(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igShowStyleEditor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  igShowStyleEditor(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igShowStyleSelector(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)igShowStyleSelector((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igShowFontSelector(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igShowFontSelector((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igShowUserGuide(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igShowUserGuide();
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_igGetVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)igGetVersion();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igStyleColorsDark(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  igStyleColorsDark(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igStyleColorsClassic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  igStyleColorsClassic(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igStyleColorsLight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  igStyleColorsLight(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBegin(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  arg3 = (ImGuiWindowFlags)jarg3; 
  result = (bool)igBegin((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEnd(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEnd();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginChild(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 arg2 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (ImGuiWindowFlags)jarg4; 
  result = (bool)igBeginChild((char const *)arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginChildID(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ImGuiID arg1 ;
  ImVec2 arg2 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (ImGuiID)jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (ImGuiWindowFlags)jarg4; 
  result = (bool)igBeginChildID(arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndChild(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndChild();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsWindowAppearing(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsWindowAppearing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsWindowCollapsed(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsWindowCollapsed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsWindowFocused(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  ImGuiFocusedFlags arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiFocusedFlags)jarg1; 
  result = (bool)igIsWindowFocused(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsWindowHovered(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  ImGuiHoveredFlags arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiHoveredFlags)jarg1; 
  result = (bool)igIsWindowHovered(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowDrawList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawList *)igGetWindowDrawList();
  *(ImDrawList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowPos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetWindowPos();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowSize(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetWindowSize();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowWidth(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetWindowWidth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowHeight(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetWindowHeight();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetNextWindowPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  ImVec2 arg1 ;
  ImGuiCond arg2 ;
  ImVec2 arg3 ;
  ImVec2 const *argp1 ;
  ImVec2 const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  arg2 = (ImGuiCond)jarg2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  igSetNextWindowPos(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetNextWindowSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVec2 arg1 ;
  ImGuiCond arg2 ;
  ImVec2 const *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  arg2 = (ImGuiCond)jarg2; 
  igSetNextWindowSize(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetNextWindowSizeConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  ImGuiSizeCallback arg3 = (ImGuiSizeCallback) 0 ;
  void *arg4 = (void *) 0 ;
  ImVec2 const *argp1 ;
  ImVec2 const *argp2 ;
  UserDataCustomCallback userData3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  {
    if (jarg3) {
      userData3.env = jenv;
      userData3.callback = jenv->NewGlobalRef(jarg3);
      arg3 = jvmCustomCallback;
      arg4 = &userData3;
    } else {
      arg3 = NULL;
      arg4 = NULL;
    }
  }
  igSetNextWindowSizeConstraints(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetNextWindowContentSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 arg1 ;
  ImVec2 const *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  igSetNextWindowContentSize(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetNextWindowCollapsed(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (ImGuiCond)jarg2; 
  igSetNextWindowCollapsed(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetNextWindowFocus(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igSetNextWindowFocus();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetNextWindowBgAlpha(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igSetNextWindowBgAlpha(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetWindowPosVec2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVec2 arg1 ;
  ImGuiCond arg2 ;
  ImVec2 const *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  arg2 = (ImGuiCond)jarg2; 
  igSetWindowPosVec2(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetWindowSizeVec2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImVec2 arg1 ;
  ImGuiCond arg2 ;
  ImVec2 const *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  arg2 = (ImGuiCond)jarg2; 
  igSetWindowSizeVec2(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetWindowCollapsedBool(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (ImGuiCond)jarg2; 
  igSetWindowCollapsedBool(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetWindowFocus(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igSetWindowFocus();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetWindowFontScale(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igSetWindowFontScale(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetWindowPosStr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  char *arg1 = (char *) 0 ;
  ImVec2 arg2 ;
  ImGuiCond arg3 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (ImGuiCond)jarg3; 
  igSetWindowPosStr((char const *)arg1,arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetWindowSizeStr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  char *arg1 = (char *) 0 ;
  ImVec2 arg2 ;
  ImGuiCond arg3 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (ImGuiCond)jarg3; 
  igSetWindowSizeStr((char const *)arg1,arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetWindowCollapsedStr(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jint jarg3) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiCond arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = (ImGuiCond)jarg3; 
  igSetWindowCollapsedStr((char const *)arg1,arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetWindowFocusStr(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igSetWindowFocusStr((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetContentRegionMax(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetContentRegionMax();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetContentRegionAvail(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetContentRegionAvail();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowContentRegionMin(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetWindowContentRegionMin();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowContentRegionMax(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetWindowContentRegionMax();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowContentRegionWidth(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetWindowContentRegionWidth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetScrollX(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetScrollX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetScrollY(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetScrollY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetScrollMaxX(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetScrollMaxX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetScrollMaxY(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetScrollMaxY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetScrollX(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igSetScrollX(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetScrollY(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igSetScrollY(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetScrollHereX(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igSetScrollHereX(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetScrollHereY(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igSetScrollHereY(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetScrollFromPosX(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  float arg1 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  igSetScrollFromPosX(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetScrollFromPosY(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  float arg1 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  igSetScrollFromPosY(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  igPushFont(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPopFont(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igPopFont();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushStyleColorU32(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  ImGuiCol arg1 ;
  ImU32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiCol)jarg1; 
  arg2 = (ImU32)jarg2; 
  igPushStyleColorU32(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushStyleColor(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  ImGuiCol arg1 ;
  ImVec4 arg2 ;
  ImVec4 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (ImGuiCol)jarg1; 
  argp2 = *(ImVec4 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return ;
  }
  arg2 = *argp2; 
  igPushStyleColor(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPopStyleColor(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  igPopStyleColor(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushStyleVarFloat(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  ImGuiStyleVar arg1 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiStyleVar)jarg1; 
  arg2 = (float)jarg2; 
  igPushStyleVarFloat(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushStyleVarVec2(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  ImGuiStyleVar arg1 ;
  ImVec2 arg2 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (ImGuiStyleVar)jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  igPushStyleVarVec2(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPopStyleVar(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  igPopStyleVar(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetStyleColorVec4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ImGuiCol arg1 ;
  ImVec4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiCol)jarg1; 
  result = (ImVec4 *)igGetStyleColorVec4(arg1);
  *(ImVec4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetFont(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFont *)igGetFont();
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetFontSize(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetFontSize();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetFontTexUvWhitePixel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetFontTexUvWhitePixel();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetColorU32(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  ImGuiCol arg1 ;
  float arg2 ;
  ImU32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiCol)jarg1; 
  arg2 = (float)jarg2; 
  result = (ImU32)igGetColorU32(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetColorU32Vec4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVec4 arg1 ;
  ImVec4 const *argp1 ;
  ImU32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec4 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return 0;
  }
  arg1 = *argp1; 
  result = (ImU32)igGetColorU32Vec4(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetColorU32U32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ImU32 arg1 ;
  ImU32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImU32)jarg1; 
  result = (ImU32)igGetColorU32U32(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushItemWidth(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igPushItemWidth(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPopItemWidth(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igPopItemWidth();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetNextItemWidth(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igSetNextItemWidth(arg1);
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igCalcItemWidth(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igCalcItemWidth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushTextWrapPos(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igPushTextWrapPos(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPopTextWrapPos(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igPopTextWrapPos();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushAllowKeyboardFocus(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  igPushAllowKeyboardFocus(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPopAllowKeyboardFocus(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igPopAllowKeyboardFocus();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushButtonRepeat(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  igPushButtonRepeat(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPopButtonRepeat(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igPopButtonRepeat();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSeparator(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igSeparator();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSameLine(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  float arg1 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  igSameLine(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igNewLine(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igNewLine();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSpacing(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igSpacing();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igDummy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 arg1 ;
  ImVec2 const *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  igDummy(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igIndent(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igIndent(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igUnindent(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igUnindent(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igBeginGroup(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igBeginGroup();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndGroup(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndGroup();
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorPos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetCursorPos();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorPosX(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetCursorPosX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorPosY(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetCursorPosY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetCursorPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 arg1 ;
  ImVec2 const *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  igSetCursorPos(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetCursorPosX(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igSetCursorPosX(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetCursorPosY(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  igSetCursorPosY(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorStartPos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetCursorStartPos();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorScreenPos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetCursorScreenPos();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetCursorScreenPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 arg1 ;
  ImVec2 const *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  igSetCursorScreenPos(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igAlignTextToFramePadding(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igAlignTextToFramePadding();
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetTextLineHeight(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetTextLineHeight();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetTextLineHeightWithSpacing(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetTextLineHeightWithSpacing();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetFrameHeight(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetFrameHeight();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetFrameHeightWithSpacing(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetFrameHeightWithSpacing();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushIDStr(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igPushIDStr((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushIDRange(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  igPushIDRange((char const *)arg1,(char const *)arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushIDPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  igPushIDPtr((void const *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushIDInt(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  igPushIDInt(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPopID(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igPopID();
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetIDStr(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiID result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ImGuiID)igGetIDStr((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetIDRange(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiID result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ImGuiID)igGetIDRange((char const *)arg1,(char const *)arg2);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetIDPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ImGuiID result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (ImGuiID)igGetIDPtr((void const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igTextUnformatted(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  igTextUnformatted((char const *)arg1,(char const *)arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igText(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igText((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igTextColored(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImVec4 arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  ImVec4 const *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec4 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return ;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  igTextColored(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igTextDisabled(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igTextDisabled((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igTextWrapped(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igTextWrapped((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igLabelText(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  igLabelText((char const *)arg1,(char const *)arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igBulletText(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igBulletText((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igButton(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 arg2 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)igButton((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSmallButton(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)igSmallButton((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInvisibleButton(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 arg2 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)igInvisibleButton((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igArrowButton(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDir arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiDir)jarg2; 
  result = (bool)igArrowButton((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImVec4 arg5 ;
  ImVec4 arg6 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec4 const *argp5 ;
  ImVec4 const *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(ImTextureID *)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ImVec4 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ImVec4 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return ;
  }
  arg6 = *argp6; 
  igImage(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igImageButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jboolean jresult = 0 ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  int arg5 ;
  ImVec4 arg6 ;
  ImVec4 arg7 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec4 const *argp6 ;
  ImVec4 const *argp7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(ImTextureID *)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  argp6 = *(ImVec4 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return 0;
  }
  arg6 = *argp6; 
  argp7 = *(ImVec4 **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return 0;
  }
  arg7 = *argp7; 
  result = (bool)igImageButton(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igCheckbox(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  result = (bool)igCheckbox((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igCheckboxFlags(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)igCheckboxFlags((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igRadioButtonBool(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (bool)igRadioButtonBool((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igRadioButtonIntPtr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)igRadioButtonIntPtr((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igProgressBar(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  float arg1 ;
  ImVec2 arg2 ;
  char *arg3 = (char *) 0 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  igProgressBar(arg1,arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igBullet(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igBullet();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginCombo(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiComboFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ImGuiComboFlags)jarg3; 
  result = (bool)igBeginCombo((char const *)arg1,(char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndCombo(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndCombo();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igCombo(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobjectArray jarg3, jint jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "swigCPtr null");
      return 0;
    }
    
    arg4 = jenv->GetArrayLength(jarg3);
    arg3 = new char*[arg4]; // Consider putting this on the stack, when small enough. 20?
    
    for (int i = 0; i < arg4; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg3, i);
      const char *c_string = jenv->GetStringUTFChars(j_string, 0);
      arg3[i] = (char*) c_string;
      jenv->DeleteLocalRef(j_string);
    }
  }
  arg5 = (int)jarg5; 
  result = (bool)igCombo((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    for (int i = 0; i < arg4; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg3, i);
      const char *c_string = arg3[i];
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    delete[] arg3;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igComboStr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)igComboStr((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igComboFnPtr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg3, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  UserDataItemsGetter userData3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  {
    userData3.env = jenv;
    userData3.callback = jarg3;
    userData3.item = NULL;
    userData3.item_cstr = NULL;
    arg3 = jvmItemsGetter;
    arg4 = &userData3;
  }
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)igComboFnPtr((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    UserDataItemsGetter *userData = (UserDataItemsGetter*) arg4; // TODO: Eliminate need for this line.
    if (userData->item_cstr != NULL) {
      jenv->ReleaseStringUTFChars(userData->item, userData->item_cstr);
      jenv->DeleteLocalRef(userData->item);
    }
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragFloat(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jstring jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (float)jarg7; 
  result = (bool)igDragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragFloat2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jstring jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (float)jarg7; 
  result = (bool)igDragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragFloat3(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jstring jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (float)jarg7; 
  result = (bool)igDragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragFloat4(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jstring jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (float)jarg7; 
  result = (bool)igDragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragFloatRange2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jstring jarg7, jstring jarg8, jfloat jarg9) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (float)jarg9; 
  result = (bool)igDragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragInt(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jint jarg4, jint jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)igDragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragInt2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jint jarg4, jint jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)igDragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragInt3(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jint jarg4, jint jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)igDragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragInt4(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jint jarg4, jint jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)igDragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragIntRange2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jfloat jarg4, jint jarg5, jint jarg6, jstring jarg7, jstring jarg8) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (bool)igDragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragScalar(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jfloat jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jfloat jarg8) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = (float)jarg8; 
  result = (bool)igDragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igDragScalarN(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jint jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jstring jarg8, jfloat jarg9) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (float)jarg9; 
  result = (bool)igDragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8,arg9);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderFloat(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (float)jarg6; 
  result = (bool)igSliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderFloat2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (float)jarg6; 
  result = (bool)igSliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderFloat3(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (float)jarg6; 
  result = (bool)igSliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderFloat4(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (float)jarg6; 
  result = (bool)igSliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderAngle(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)igSliderAngle((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderInt(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)igSliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderInt2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)igSliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderInt3(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)igSliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderInt4(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)igSliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderScalar(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (float)jarg7; 
  result = (bool)igSliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSliderScalarN(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jfloat jarg8) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = (float)jarg8; 
  result = (bool)igSliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igVSliderFloat(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jfloat jarg4, jfloat jarg5, jstring jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(float **)&jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (float)jarg7; 
  result = (bool)igVSliderFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igVSliderInt(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4, jint jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(int **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)igVSliderInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igVSliderScalar(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jfloat jarg8) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 arg2 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ImGuiDataType)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = (float)jarg8; 
  result = (bool)igVSliderScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputText(JNIEnv *jenv, jclass jcls, jstring jarg1, jbyteArray jarg2, jlong jarg3, jint jarg4, jobject jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) 0 ;
  void *arg6 = (void *) 0 ;
  UserDataInputCallback userData5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (size_t)jarg3; 
  arg4 = (ImGuiInputTextFlags)jarg4; 
  {
    if (jarg5) {
      userData5.env = jenv;
      userData5.callback = jarg5;
      arg5 = jvmInputCallback;
      arg6 = &userData5;
    } else {
      arg5 = NULL;
      arg6 = NULL;
    }
  }
  result = (bool)igInputText((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputTextMultiline(JNIEnv *jenv, jclass jcls, jstring jarg1, jbyteArray jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jobject jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 arg4 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  void *arg7 = (void *) 0 ;
  ImVec2 const *argp4 ;
  UserDataInputCallback userData6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (size_t)jarg3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  {
    if (jarg6) {
      userData6.env = jenv;
      userData6.callback = jarg6;
      arg6 = jvmInputCallback;
      arg7 = &userData6;
    } else {
      arg6 = NULL;
      arg7 = NULL;
    }
  }
  result = (bool)igInputTextMultiline((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputTextWithHint(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jbyteArray jarg3, jlong jarg4, jint jarg5, jobject jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  void *arg7 = (void *) 0 ;
  UserDataInputCallback userData6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    arg3 = (char *) jenv->GetByteArrayElements(jarg3, 0); 
  }
  arg4 = (size_t)jarg4; 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  {
    if (jarg6) {
      userData6.env = jenv;
      userData6.callback = jarg6;
      arg6 = jvmInputCallback;
      arg7 = &userData6;
    } else {
      arg6 = NULL;
      arg7 = NULL;
    }
  }
  result = (bool)igInputTextWithHint((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  {
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3, 0); 
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputFloat(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (ImGuiInputTextFlags)jarg6; 
  result = (bool)igInputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputFloat2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (ImGuiInputTextFlags)jarg4; 
  result = (bool)igInputFloat2((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputFloat3(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (ImGuiInputTextFlags)jarg4; 
  result = (bool)igInputFloat3((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputFloat4(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (ImGuiInputTextFlags)jarg4; 
  result = (bool)igInputFloat4((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputInt(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  result = (bool)igInputInt((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputInt2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (ImGuiInputTextFlags)jarg3; 
  result = (bool)igInputInt2((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputInt3(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (ImGuiInputTextFlags)jarg3; 
  result = (bool)igInputInt3((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputInt4(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = (ImGuiInputTextFlags)jarg3; 
  result = (bool)igInputInt4((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputDouble(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jstring jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(double **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (ImGuiInputTextFlags)jarg6; 
  result = (bool)igInputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputScalar(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jint jarg7) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  ImGuiInputTextFlags arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (ImGuiInputTextFlags)jarg7; 
  result = (bool)igInputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igInputScalarN(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jint jarg8) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiInputTextFlags arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = (ImGuiInputTextFlags)jarg8; 
  result = (bool)igInputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igColorEdit3(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  result = (bool)igColorEdit3((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igColorEdit4(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  result = (bool)igColorEdit4((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igColorPicker3(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  result = (bool)igColorPicker3((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igColorPicker4(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (bool)igColorPicker4((char const *)arg1,arg2,arg3,(float const *)arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igColorButton(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImVec4 arg2 ;
  ImGuiColorEditFlags arg3 ;
  ImVec2 arg4 ;
  ImVec4 const *argp2 ;
  ImVec2 *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ImVec4 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)igColorButton((char const *)arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetColorEditOptions(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ImGuiColorEditFlags arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiColorEditFlags)jarg1; 
  igSetColorEditOptions(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igTreeNodeStr(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)igTreeNodeStr((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igTreeNodeStrStr(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)igTreeNodeStrStr((char const *)arg1,(char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igTreeNodePtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)igTreeNodePtr((void const *)arg1,(char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igTreeNodeExStr(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  result = (bool)igTreeNodeExStr((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igTreeNodeExStrStr(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)igTreeNodeExStrStr((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igTreeNodeExPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  void *arg1 = (void *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)igTreeNodeExPtr((void const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igTreePushStr(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igTreePushStr((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igTreePushPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  igTreePushPtr((void const *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igTreePop(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igTreePop();
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetTreeNodeToLabelSpacing(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGetTreeNodeToLabelSpacing();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igCollapsingHeader(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  result = (bool)igCollapsingHeader((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igCollapsingHeaderBoolPtr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTreeNodeFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  arg3 = (ImGuiTreeNodeFlags)jarg3; 
  result = (bool)igCollapsingHeaderBoolPtr((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetNextItemOpen(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (ImGuiCond)jarg2; 
  igSetNextItemOpen(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSelectable(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 arg4 ;
  ImVec2 const *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = (ImGuiSelectableFlags)jarg3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)igSelectable((char const *)arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSelectableBoolPtr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 arg4 ;
  ImVec2 const *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  arg3 = (ImGuiSelectableFlags)jarg3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)igSelectableBoolPtr((char const *)arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igListBoxStr_1arr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobjectArray jarg3, jint jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "swigCPtr null");
      return 0;
    }
    
    arg4 = jenv->GetArrayLength(jarg3);
    arg3 = new char*[arg4]; // Consider putting this on the stack, when small enough. 20?
    
    for (int i = 0; i < arg4; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg3, i);
      const char *c_string = jenv->GetStringUTFChars(j_string, 0);
      arg3[i] = (char*) c_string;
      jenv->DeleteLocalRef(j_string);
    }
  }
  arg5 = (int)jarg5; 
  result = (bool)igListBoxStr_arr((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    for (int i = 0; i < arg4; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg3, i);
      const char *c_string = arg3[i];
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    delete[] arg3;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igListBoxFnPtr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg3, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  UserDataItemsGetter userData3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  {
    userData3.env = jenv;
    userData3.callback = jarg3;
    userData3.item = NULL;
    userData3.item_cstr = NULL;
    arg3 = jvmItemsGetter;
    arg4 = &userData3;
  }
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)igListBoxFnPtr((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    UserDataItemsGetter *userData = (UserDataItemsGetter*) arg4; // TODO: Eliminate need for this line.
    if (userData->item_cstr != NULL) {
      jenv->ReleaseStringUTFChars(userData->item, userData->item_cstr);
      jenv->DeleteLocalRef(userData->item);
    }
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igListBoxHeaderVec2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImVec2 arg2 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)igListBoxHeaderVec2((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igListBoxHeaderInt(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)igListBoxHeaderInt((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igListBoxFooter(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igListBoxFooter();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPlotLines(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4, jstring jarg5, jfloat jarg6, jfloat jarg7, jlong jarg8, jobject jarg8_, jint jarg9) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  argp8 = *(ImVec2 **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2");
    return ;
  }
  arg8 = *argp8; 
  arg9 = (int)jarg9; 
  igPlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPlotLinesFnPtr(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2, jint jarg4, jint jarg5, jstring jarg6, jfloat jarg7, jfloat jarg8, jlong jarg9, jobject jarg9_) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  UserDataValuesGetter userData2 ;
  ImVec2 *argp9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg9_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    userData2.env = jenv;
    userData2.callback = jarg2;
    arg2 = jvmValuesGetter;
    arg3 = &userData2;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  argp9 = *(ImVec2 **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2");
    return ;
  }
  arg9 = *argp9; 
  igPlotLinesFnPtr((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPlotHistogramFloatPtr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4, jstring jarg5, jfloat jarg6, jfloat jarg7, jlong jarg8, jobject jarg8_, jint jarg9) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  argp8 = *(ImVec2 **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2");
    return ;
  }
  arg8 = *argp8; 
  arg9 = (int)jarg9; 
  igPlotHistogramFloatPtr((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPlotHistogramFnPtr(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2, jint jarg4, jint jarg5, jstring jarg6, jfloat jarg7, jfloat jarg8, jlong jarg9, jobject jarg9_) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  UserDataValuesGetter userData2 ;
  ImVec2 *argp9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg9_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    userData2.env = jenv;
    userData2.callback = jarg2;
    arg2 = jvmValuesGetter;
    arg3 = &userData2;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  argp9 = *(ImVec2 **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2");
    return ;
  }
  arg9 = *argp9; 
  igPlotHistogramFnPtr((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igValueBool(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = jarg2 ? true : false; 
  igValueBool((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igValueInt(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (int)jarg2; 
  igValueInt((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igValueUint(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (unsigned int)jarg2; 
  igValueUint((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igValueFloat(JNIEnv *jenv, jclass jcls, jstring jarg1, jfloat jarg2, jstring jarg3) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (float)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  igValueFloat((char const *)arg1,arg2,(char const *)arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginMenuBar(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igBeginMenuBar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndMenuBar(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndMenuBar();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginMainMenuBar(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igBeginMainMenuBar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndMainMenuBar(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndMainMenuBar();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginMenu(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (bool)igBeginMenu((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndMenu(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndMenu();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igMenuItemBool(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)igMenuItemBool((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igMenuItemBoolPtr(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(bool **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)igMenuItemBoolPtr((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igBeginTooltip(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igBeginTooltip();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndTooltip(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndTooltip();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetTooltip(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igSetTooltip((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igOpenPopup(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igOpenPopup((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginPopup(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiWindowFlags arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiWindowFlags)jarg2; 
  result = (bool)igBeginPopup((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginPopupContextItem(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiMouseButton arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiMouseButton)jarg2; 
  result = (bool)igBeginPopupContextItem((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginPopupContextWindow(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiMouseButton arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiMouseButton)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)igBeginPopupContextWindow((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginPopupContextVoid(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiMouseButton arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiMouseButton)jarg2; 
  result = (bool)igBeginPopupContextVoid((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginPopupModal(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  arg3 = (ImGuiWindowFlags)jarg3; 
  result = (bool)igBeginPopupModal((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndPopup(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndPopup();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igOpenPopupOnItemClick(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiMouseButton arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiMouseButton)jarg2; 
  result = (bool)igOpenPopupOnItemClick((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsPopupOpen(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)igIsPopupOpen((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igCloseCurrentPopup(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igCloseCurrentPopup();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igColumns(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jboolean jarg3) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  igColumns(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igNextColumn(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igNextColumn();
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_igGetColumnIndex(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)igGetColumnIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetColumnWidth(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jfloat jresult = 0 ;
  int arg1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (float)igGetColumnWidth(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetColumnWidth(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  int arg1 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  igSetColumnWidth(arg1,arg2);
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGetColumnOffset(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jfloat jresult = 0 ;
  int arg1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (float)igGetColumnOffset(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetColumnOffset(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  int arg1 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  igSetColumnOffset(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_igGetColumnsCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)igGetColumnsCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginTabBar(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTabBarFlags arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiTabBarFlags)jarg2; 
  result = (bool)igBeginTabBar((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndTabBar(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndTabBar();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginTabItem(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTabItemFlags arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  arg3 = (ImGuiTabItemFlags)jarg3; 
  result = (bool)igBeginTabItem((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndTabItem(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndTabItem();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetTabItemClosed(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igSetTabItemClosed((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igLogToTTY(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  igLogToTTY(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igLogToFile(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  igLogToFile(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igLogToClipboard(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  igLogToClipboard(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igLogFinish(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igLogFinish();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igLogButtons(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igLogButtons();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginDragDropSource(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  ImGuiDragDropFlags arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiDragDropFlags)jarg1; 
  result = (bool)igBeginDragDropSource(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igSetDragDropPayload(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ImGuiCond arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (ImGuiCond)jarg4; 
  result = (bool)igSetDragDropPayload((char const *)arg1,(void const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndDragDropSource(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndDragDropSource();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginDragDropTarget(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igBeginDragDropTarget();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igAcceptDragDropPayload(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiDragDropFlags arg2 ;
  ImGuiPayload *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ImGuiDragDropFlags)jarg2; 
  result = (ImGuiPayload *)igAcceptDragDropPayload((char const *)arg1,arg2);
  *(ImGuiPayload **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndDragDropTarget(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndDragDropTarget();
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetDragDropPayload(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiPayload *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiPayload *)igGetDragDropPayload();
  *(ImGuiPayload **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPushClipRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  bool arg3 ;
  ImVec2 const *argp1 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  igPushClipRect(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igPopClipRect(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igPopClipRect();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetItemDefaultFocus(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igSetItemDefaultFocus();
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetKeyboardFocusHere(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  igSetKeyboardFocusHere(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemHovered(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  ImGuiHoveredFlags arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiHoveredFlags)jarg1; 
  result = (bool)igIsItemHovered(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemActive(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsItemActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemFocused(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsItemFocused();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemClicked(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)igIsItemClicked(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemVisible(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsItemVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemEdited(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsItemEdited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemActivated(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsItemActivated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemDeactivated(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsItemDeactivated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemDeactivatedAfterEdit(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsItemDeactivatedAfterEdit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsItemToggledOpen(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsItemToggledOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsAnyItemHovered(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsAnyItemHovered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsAnyItemActive(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsAnyItemActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsAnyItemFocused(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsAnyItemFocused();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetItemRectMin(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetItemRectMin();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetItemRectMax(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetItemRectMax();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetItemRectSize(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetItemRectSize();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetItemAllowOverlap(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igSetItemAllowOverlap();
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsRectVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImVec2 arg1 ;
  ImVec2 const *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)igIsRectVisible(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsRectVisibleVec2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  ImVec2 const *argp1 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)igIsRectVisibleVec2(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_cimgui_internal_CImGuiJNI_igGetTime(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)igGetTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_igGetFrameCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)igGetFrameCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetBackgroundDrawList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawList *)igGetBackgroundDrawList();
  *(ImDrawList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetForegroundDrawList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawList *)igGetForegroundDrawList();
  *(ImDrawList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetDrawListSharedData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawListSharedData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawListSharedData *)igGetDrawListSharedData();
  *(ImDrawListSharedData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_igGetStyleColorName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  ImGuiCol arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiCol)jarg1; 
  result = (char *)igGetStyleColorName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  igSetStateStorage(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetStateStorage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiStorage *)igGetStateStorage();
  *(ImGuiStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igCalcTextSize(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  float arg4 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  result = igCalcTextSize((char const *)arg1,(char const *)arg2,arg3,arg4);
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igCalcListClipping(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2, jlong jarg3, jlong jarg4) {
  int arg1 ;
  float arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  igCalcListClipping(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igBeginChildFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  ImGuiID arg1 ;
  ImVec2 arg2 ;
  ImGuiWindowFlags arg3 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (ImGuiID)jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ImGuiWindowFlags)jarg3; 
  result = (bool)igBeginChildFrame(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igEndChildFrame(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  igEndChildFrame();
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igColorConvertU32ToFloat4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ImU32 arg1 ;
  ImVec4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImU32)jarg1; 
  result = igColorConvertU32ToFloat4(arg1);
  *(ImVec4 **)&jresult = new ImVec4((const ImVec4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igColorConvertFloat4ToU32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVec4 arg1 ;
  ImVec4 const *argp1 ;
  ImU32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec4 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return 0;
  }
  arg1 = *argp1; 
  result = (ImU32)igColorConvertFloat4ToU32(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_igGetKeyIndex(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  ImGuiKey arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiKey)jarg1; 
  result = (int)igGetKeyIndex(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsKeyDown(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)igIsKeyDown(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsKeyPressed(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)igIsKeyPressed(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsKeyReleased(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)igIsKeyReleased(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_igGetKeyPressedAmount(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)igGetKeyPressedAmount(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igCaptureKeyboardFromApp(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  igCaptureKeyboardFromApp(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsMouseDown(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)igIsMouseDown(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsMouseClicked(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  ImGuiMouseButton arg1 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseButton)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)igIsMouseClicked(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsMouseReleased(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)igIsMouseReleased(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsMouseDoubleClicked(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)igIsMouseDoubleClicked(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsMouseHoveringRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ImVec2 arg1 ;
  ImVec2 arg2 ;
  bool arg3 ;
  ImVec2 const *argp1 ;
  ImVec2 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(ImVec2 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)igIsMouseHoveringRect(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsMousePosValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  result = (bool)igIsMousePosValid((ImVec2 const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsAnyMouseDown(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)igIsAnyMouseDown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetMousePos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetMousePos();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetMousePosOnOpeningCurrentPopup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  result = igGetMousePosOnOpeningCurrentPopup();
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_igIsMouseDragging(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jboolean jresult = 0 ;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseButton)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)igIsMouseDragging(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetMouseDragDelta(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseButton)jarg1; 
  arg2 = (float)jarg2; 
  result = igGetMouseDragDelta(arg1,arg2);
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igResetMouseDragDelta(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ImGuiMouseButton arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseButton)jarg1; 
  igResetMouseDragDelta(arg1);
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_igGetMouseCursor(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ImGuiMouseCursor result;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiMouseCursor)igGetMouseCursor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetMouseCursor(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ImGuiMouseCursor arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseCursor)jarg1; 
  igSetMouseCursor(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igCaptureMouseFromApp(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  igCaptureMouseFromApp(arg1);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_igGetClipboardText(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)igGetClipboardText();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetClipboardText(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igSetClipboardText((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igLoadIniSettingsFromDisk(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igLoadIniSettingsFromDisk((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igLoadIniSettingsFromMemory(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  igLoadIniSettingsFromMemory((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSaveIniSettingsToDisk(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igSaveIniSettingsToDisk((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_igSaveIniSettingsToMemory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  size_t *arg1 = (size_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(size_t **)&jarg1; 
  result = (char *)igSaveIniSettingsToMemory(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igSetAllocatorFunctions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  void *(*arg1)(size_t,void *) = (void *(*)(size_t,void *)) 0 ;
  void (*arg2)(void *,void *) = (void (*)(void *,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void *(**)(size_t,void *))&jarg1; 
  arg2 = *(void (**)(void *,void *))&jarg2; 
  arg3 = *(void **)&jarg3; 
  igSetAllocatorFunctions(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igMemAlloc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (void *)igMemAlloc(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igMemFree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  igMemFree(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ImGuiStyle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiStyle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiStyle *)ImGuiStyle_ImGuiStyle();
  *(ImGuiStyle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  ImGuiStyle_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStyle_1ScaleAllSizes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStyle **)&jarg1; 
  arg2 = (float)jarg2; 
  ImGuiStyle_ScaleAllSizes(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1AddInputCharacter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  ImGuiIO_AddInputCharacter(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1AddInputCharactersUTF8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ImGuiIO_AddInputCharactersUTF8(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ClearInputCharacters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  ImGuiIO_ClearInputCharacters(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1ImGuiIO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiIO *)ImGuiIO_ImGuiIO();
  *(ImGuiIO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiIO_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiIO **)&jarg1; 
  ImGuiIO_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1ImGuiInputTextCallbackData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiInputTextCallbackData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiInputTextCallbackData *)ImGuiInputTextCallbackData_ImGuiInputTextCallbackData();
  *(ImGuiInputTextCallbackData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  ImGuiInputTextCallbackData_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1DeleteChars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  ImGuiInputTextCallbackData_DeleteChars(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1InsertChars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ImGuiInputTextCallbackData_InsertChars(arg1,arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiInputTextCallbackData_1HasSelection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiInputTextCallbackData **)&jarg1; 
  result = (bool)ImGuiInputTextCallbackData_HasSelection(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1ImGuiPayload(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiPayload *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiPayload *)ImGuiPayload_ImGuiPayload();
  *(ImGuiPayload **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  ImGuiPayload_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  ImGuiPayload_Clear(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1IsDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)ImGuiPayload_IsDataType(arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1IsPreview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (bool)ImGuiPayload_IsPreview(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiPayload_1IsDelivery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiPayload **)&jarg1; 
  result = (bool)ImGuiPayload_IsDelivery(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiOnceUponAFrame_1ImGuiOnceUponAFrame(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiOnceUponAFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiOnceUponAFrame *)ImGuiOnceUponAFrame_ImGuiOnceUponAFrame();
  *(ImGuiOnceUponAFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiOnceUponAFrame_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiOnceUponAFrame **)&jarg1; 
  ImGuiOnceUponAFrame_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1ImGuiTextFilter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ImGuiTextFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ImGuiTextFilter *)ImGuiTextFilter_ImGuiTextFilter((char const *)arg1);
  *(ImGuiTextFilter **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  ImGuiTextFilter_destroy(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1Draw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  result = (bool)ImGuiTextFilter_Draw(arg1,(char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1PassFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)ImGuiTextFilter_PassFilter(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1Build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  ImGuiTextFilter_Build(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  ImGuiTextFilter_Clear(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextFilter_1IsActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextFilter **)&jarg1; 
  result = (bool)ImGuiTextFilter_IsActive(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextRange_1ImGuiTextRange(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiTextRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiTextRange *)ImGuiTextRange_ImGuiTextRange();
  *(ImGuiTextRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextRange_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiTextRange *arg1 = (ImGuiTextRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextRange **)&jarg1; 
  ImGuiTextRange_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextRange_1ImGuiTextRangeStr(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiTextRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ImGuiTextRange *)ImGuiTextRange_ImGuiTextRangeStr((char const *)arg1,(char const *)arg2);
  *(ImGuiTextRange **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextRange_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiTextRange *arg1 = (ImGuiTextRange *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextRange **)&jarg1; 
  result = (bool)ImGuiTextRange_empty(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextRange_1split(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3, jobject jarg3_) {
  ImGuiTextRange *arg1 = (ImGuiTextRange *) 0 ;
  char arg2 ;
  ImVector_ImGuiTextRange *arg3 = (ImVector_ImGuiTextRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ImGuiTextRange **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = *(ImVector_ImGuiTextRange **)&jarg3; 
  ImGuiTextRange_split(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1ImGuiTextBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImGuiTextBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImGuiTextBuffer *)ImGuiTextBuffer_ImGuiTextBuffer();
  *(ImGuiTextBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  ImGuiTextBuffer_destroy(arg1);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  result = (char *)ImGuiTextBuffer_begin(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  result = (char *)ImGuiTextBuffer_end(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  result = (int)ImGuiTextBuffer_size(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  result = (bool)ImGuiTextBuffer_empty(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  ImGuiTextBuffer_clear(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  ImGuiTextBuffer_reserve(arg1,arg2);
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1c_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  result = (char *)ImGuiTextBuffer_c_str(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  ImGuiTextBuffer_append(arg1,(char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1ImGuiStoragePairInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  ImGuiID arg1 ;
  int arg2 ;
  ImGuiStoragePair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiID)jarg1; 
  arg2 = (int)jarg2; 
  result = (ImGuiStoragePair *)ImGuiStoragePair_ImGuiStoragePairInt(arg1,arg2);
  *(ImGuiStoragePair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiStoragePair *arg1 = (ImGuiStoragePair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStoragePair **)&jarg1; 
  ImGuiStoragePair_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1ImGuiStoragePairFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  ImGuiID arg1 ;
  float arg2 ;
  ImGuiStoragePair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiID)jarg1; 
  arg2 = (float)jarg2; 
  result = (ImGuiStoragePair *)ImGuiStoragePair_ImGuiStoragePairFloat(arg1,arg2);
  *(ImGuiStoragePair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStoragePair_1ImGuiStoragePairPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ImGuiID arg1 ;
  void *arg2 = (void *) 0 ;
  ImGuiStoragePair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiID)jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (ImGuiStoragePair *)ImGuiStoragePair_ImGuiStoragePairPtr(arg1,arg2);
  *(ImGuiStoragePair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  ImGuiStorage_Clear(arg1);
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1GetInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)ImGuiStorage_GetInt(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1SetInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (int)jarg3; 
  ImGuiStorage_SetInt(arg1,arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1GetBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)ImGuiStorage_GetBool(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1SetBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = jarg3 ? true : false; 
  ImGuiStorage_SetBool(arg1,arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1GetFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)ImGuiStorage_GetFloat(arg1,arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1SetFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (float)jarg3; 
  ImGuiStorage_SetFloat(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1GetVoidPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  result = (void *)ImGuiStorage_GetVoidPtr(arg1,arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1SetVoidPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = *(void **)&jarg3; 
  ImGuiStorage_SetVoidPtr(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1GetIntRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (int)jarg3; 
  result = (int *)ImGuiStorage_GetIntRef(arg1,arg2,arg3);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1GetBoolRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool *)ImGuiStorage_GetBoolRef(arg1,arg2,arg3);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1GetFloatRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (float)jarg3; 
  result = (float *)ImGuiStorage_GetFloatRef(arg1,arg2,arg3);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1GetVoidPtrRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *arg3 = (void *) 0 ;
  void **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (void **)ImGuiStorage_GetVoidPtrRef(arg1,arg2,arg3);
  *(void ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1SetAllInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  arg2 = (int)jarg2; 
  ImGuiStorage_SetAllInt(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiStorage_1BuildSortByKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiStorage **)&jarg1; 
  ImGuiStorage_BuildSortByKey(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1ImGuiListClipper(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  float arg2 ;
  ImGuiListClipper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  result = (ImGuiListClipper *)ImGuiListClipper_ImGuiListClipper(arg1,arg2);
  *(ImGuiListClipper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  ImGuiListClipper_destroy(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1Step(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  result = (bool)ImGuiListClipper_Step(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1Begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  ImGuiListClipper_Begin(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiListClipper_1End(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiListClipper **)&jarg1; 
  ImGuiListClipper_End(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1ImColor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImColor *)ImColor_ImColor();
  *(ImColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImColor *arg1 = (ImColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImColor **)&jarg1; 
  ImColor_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1ImColorInt(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ImColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ImColor *)ImColor_ImColorInt(arg1,arg2,arg3,arg4);
  *(ImColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1ImColorU32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ImU32 arg1 ;
  ImColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImU32)jarg1; 
  result = (ImColor *)ImColor_ImColorU32(arg1);
  *(ImColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1ImColorFloat(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ImColor *)ImColor_ImColorFloat(arg1,arg2,arg3,arg4);
  *(ImColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1ImColorVec4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImVec4 arg1 ;
  ImVec4 const *argp1 ;
  ImColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ImVec4 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return 0;
  }
  arg1 = *argp1; 
  result = (ImColor *)ImColor_ImColorVec4(arg1);
  *(ImColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1SetHSV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImColor **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  ImColor_SetHSV(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1HSV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ImColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImColor **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = ImColor_HSV(arg1,arg2,arg3,arg4,arg5);
  *(ImColor **)&jresult = new ImColor((const ImColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1ImDrawCmd(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawCmd *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawCmd *)ImDrawCmd_ImDrawCmd();
  *(ImDrawCmd **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmd_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  ImDrawCmd_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1ImDrawListSplitter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawListSplitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawListSplitter *)ImDrawListSplitter_ImDrawListSplitter();
  *(ImDrawListSplitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  ImDrawListSplitter_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  ImDrawListSplitter_Clear(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1ClearFreeMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  ImDrawListSplitter_ClearFreeMemory(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1Split(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  arg2 = *(ImDrawList **)&jarg2; 
  arg3 = (int)jarg3; 
  ImDrawListSplitter_Split(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1Merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  arg2 = *(ImDrawList **)&jarg2; 
  ImDrawListSplitter_Merge(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawListSplitter_1SetCurrentChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawListSplitter **)&jarg1; 
  arg2 = *(ImDrawList **)&jarg2; 
  arg3 = (int)jarg3; 
  ImDrawListSplitter_SetCurrentChannel(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1ImDrawList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImDrawList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImDrawListSharedData **)&jarg1; 
  result = (ImDrawList *)ImDrawList_ImDrawList((ImDrawListSharedData const *)arg1);
  *(ImDrawList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PushClipRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  bool arg4 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2");
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  ImDrawList_PushClipRect(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PushClipRectFullScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_PushClipRectFullScreen(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PopClipRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_PopClipRect(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PushTextureID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImTextureID *)&jarg2; 
  ImDrawList_PushTextureID(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PopTextureID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_PopTextureID(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1GetClipRectMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = ImDrawList_GetClipRectMin(arg1);
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1GetClipRectMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = ImDrawList_GetClipRectMax(arg1);
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jfloat jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (float)jarg5; 
  ImDrawList_AddLine(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jfloat jarg5, jint jarg6, jfloat jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImDrawCornerFlags arg6 ;
  float arg7 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (ImDrawCornerFlags)jarg6; 
  arg7 = (float)jarg7; 
  ImDrawList_AddRect(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddRectFilled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jfloat jarg5, jint jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  float arg5 ;
  ImDrawCornerFlags arg6 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (ImDrawCornerFlags)jarg6; 
  ImDrawList_AddRectFilled(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddRectFilledMultiColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  ImU32 arg5 ;
  ImU32 arg6 ;
  ImU32 arg7 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (ImU32)jarg5; 
  arg6 = (ImU32)jarg6; 
  arg7 = (ImU32)jarg7; 
  ImDrawList_AddRectFilledMultiColor(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddQuad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jfloat jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImU32 arg6 ;
  float arg7 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec2 const *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ImVec2 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg5 = *argp5; 
  arg6 = (ImU32)jarg6; 
  arg7 = (float)jarg7; 
  ImDrawList_AddQuad(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddQuadFilled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImU32 arg6 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec2 const *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ImVec2 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg5 = *argp5; 
  arg6 = (ImU32)jarg6; 
  ImDrawList_AddQuadFilled(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddTriangle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jfloat jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  float arg6 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (ImU32)jarg5; 
  arg6 = (float)jarg6; 
  ImDrawList_AddTriangle(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddTriangleFilled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (ImU32)jarg5; 
  ImDrawList_AddTriangleFilled(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddCircle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jint jarg5, jfloat jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  float arg6 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float)jarg6; 
  ImDrawList_AddCircle(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddCircleFilled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jint jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  ImDrawList_AddCircleFilled(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddNgon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jint jarg5, jfloat jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  float arg6 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float)jarg6; 
  ImDrawList_AddNgon(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddNgonFilled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jint jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  ImDrawList_AddNgonFilled(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4, jstring jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImU32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (ImU32)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  ImDrawList_AddText(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddTextFontPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jstring jarg6, jstring jarg7, jfloat jarg8, jlong jarg9, jobject jarg9_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  ImVec4 *arg9 = (ImVec4 *) 0 ;
  ImVec2 const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg9_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImFont **)&jarg2; 
  arg3 = (float)jarg3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (ImU32)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = (float)jarg8; 
  arg9 = *(ImVec4 **)&jarg9; 
  ImDrawList_AddTextFontPtr(arg1,(ImFont const *)arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,arg8,(ImVec4 const *)arg9);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddPolyline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jboolean jarg5, jfloat jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;
  bool arg5 ;
  float arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  ImDrawList_AddPolyline(arg1,(ImVec2 const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddConvexPolyFilled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImVec2 **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ImU32)jarg4; 
  ImDrawList_AddConvexPolyFilled(arg1,(ImVec2 const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddBezierCurve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jfloat jarg7, jint jarg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImU32 arg6 ;
  float arg7 ;
  int arg8 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec2 const *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ImVec2 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg5 = *argp5; 
  arg6 = (ImU32)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  ImDrawList_AddBezierCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImVec2 arg6 ;
  ImU32 arg7 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec2 const *argp5 ;
  ImVec2 const *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImTextureID *)&jarg2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ImVec2 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ImVec2 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg6 = *argp6; 
  arg7 = (ImU32)jarg7; 
  ImDrawList_AddImage(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddImageQuad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_, jlong jarg11) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImVec2 arg6 ;
  ImVec2 arg7 ;
  ImVec2 arg8 ;
  ImVec2 arg9 ;
  ImVec2 arg10 ;
  ImU32 arg11 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec2 const *argp5 ;
  ImVec2 const *argp6 ;
  ImVec2 const *argp7 ;
  ImVec2 const *argp8 ;
  ImVec2 const *argp9 ;
  ImVec2 const *argp10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImTextureID *)&jarg2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ImVec2 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ImVec2 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg6 = *argp6; 
  argp7 = *(ImVec2 **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg7 = *argp7; 
  argp8 = *(ImVec2 **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg8 = *argp8; 
  argp9 = *(ImVec2 **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg9 = *argp9; 
  argp10 = *(ImVec2 **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg10 = *argp10; 
  arg11 = (ImU32)jarg11; 
  ImDrawList_AddImageQuad(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddImageRounded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jfloat jarg8, jint jarg9) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImVec2 arg6 ;
  ImU32 arg7 ;
  float arg8 ;
  ImDrawCornerFlags arg9 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec2 const *argp5 ;
  ImVec2 const *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImTextureID *)&jarg2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ImVec2 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ImVec2 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg6 = *argp6; 
  arg7 = (ImU32)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (ImDrawCornerFlags)jarg9; 
  ImDrawList_AddImageRounded(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PathClear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_PathClear(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PathLineTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  ImDrawList_PathLineTo(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PathLineToMergeDuplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  ImDrawList_PathLineToMergeDuplicate(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PathFillConvex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (ImU32)jarg2; 
  ImDrawList_PathFillConvex(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PathStroke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jfloat jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  bool arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (ImU32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  ImDrawList_PathStroke(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PathArcTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jint jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  ImDrawList_PathArcTo(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PathArcToFast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jint jarg4, jint jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  ImDrawList_PathArcToFast(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PathBezierCurveTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  int arg5 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  ImDrawList_PathBezierCurveTo(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PathRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jint jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  float arg4 ;
  ImDrawCornerFlags arg5 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (float)jarg4; 
  arg5 = (ImDrawCornerFlags)jarg5; 
  ImDrawList_PathRect(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = *(ImDrawCallback *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  ImDrawList_AddCallback(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1AddDrawCmd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_AddDrawCmd(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1CloneOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = (ImDrawList *)ImDrawList_CloneOutput(arg1);
  *(ImDrawList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1ChannelsSplit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (int)jarg2; 
  ImDrawList_ChannelsSplit(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1ChannelsMerge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_ChannelsMerge(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1ChannelsSetCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (int)jarg2; 
  ImDrawList_ChannelsSetCurrent(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_Clear(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1ClearFreeMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_ClearFreeMemory(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PrimReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  ImDrawList_PrimReserve(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PrimUnreserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  ImDrawList_PrimUnreserve(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PrimRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (ImU32)jarg4; 
  ImDrawList_PrimRect(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PrimRectUV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImU32 arg6 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec2 const *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ImVec2 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg5 = *argp5; 
  arg6 = (ImU32)jarg6; 
  ImDrawList_PrimRectUV(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PrimQuadUV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 arg4 ;
  ImVec2 arg5 ;
  ImVec2 arg6 ;
  ImVec2 arg7 ;
  ImVec2 arg8 ;
  ImVec2 arg9 ;
  ImU32 arg10 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  ImVec2 const *argp4 ;
  ImVec2 const *argp5 ;
  ImVec2 const *argp6 ;
  ImVec2 const *argp7 ;
  ImVec2 const *argp8 ;
  ImVec2 const *argp9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ImVec2 **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ImVec2 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg6 = *argp6; 
  argp7 = *(ImVec2 **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg7 = *argp7; 
  argp8 = *(ImVec2 **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg8 = *argp8; 
  argp9 = *(ImVec2 **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg9 = *argp9; 
  arg10 = (ImU32)jarg10; 
  ImDrawList_PrimQuadUV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PrimWriteVtx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (ImU32)jarg4; 
  ImDrawList_PrimWriteVtx(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PrimWriteIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  arg2 = (ImDrawIdx)jarg2; 
  ImDrawList_PrimWriteIdx(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1PrimVtx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImU32 arg4 ;
  ImVec2 const *argp2 ;
  ImVec2 const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ImDrawList **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ImVec2 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (ImU32)jarg4; 
  ImDrawList_PrimVtx(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1UpdateClipRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_UpdateClipRect(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1UpdateTextureID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  ImDrawList_UpdateTextureID(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1ImDrawData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImDrawData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImDrawData *)ImDrawData_ImDrawData();
  *(ImDrawData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  ImDrawData_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  ImDrawData_Clear(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1DeIndexAllBuffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawData **)&jarg1; 
  ImDrawData_DeIndexAllBuffers(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawData_1ScaleClipRects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 arg2 ;
  ImVec2 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImDrawData **)&jarg1; 
  argp2 = *(ImVec2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return ;
  }
  arg2 = *argp2; 
  ImDrawData_ScaleClipRects(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1ImFontConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFontConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFontConfig *)ImFontConfig_ImFontConfig();
  *(ImFontConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontConfig_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontConfig **)&jarg1; 
  ImFontConfig_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1ImFontGlyphRangesBuilder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFontGlyphRangesBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFontGlyphRangesBuilder *)ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder();
  *(ImFontGlyphRangesBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  ImFontGlyphRangesBuilder_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  ImFontGlyphRangesBuilder_Clear(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1GetBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ImFontGlyphRangesBuilder_GetBit(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1SetBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  arg2 = (int)jarg2; 
  ImFontGlyphRangesBuilder_SetBit(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1AddChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImWchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  ImFontGlyphRangesBuilder_AddChar(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1AddText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  ImFontGlyphRangesBuilder_AddText(arg1,(char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1AddRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  arg2 = *(ImWchar **)&jarg2; 
  ImFontGlyphRangesBuilder_AddRanges(arg1,(unsigned short const *)arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontGlyphRangesBuilder_1BuildRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector_ImWchar *arg2 = (ImVector_ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontGlyphRangesBuilder **)&jarg1; 
  arg2 = *(ImVector_ImWchar **)&jarg2; 
  ImFontGlyphRangesBuilder_BuildRanges(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1ImFontAtlasCustomRect(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFontAtlasCustomRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFontAtlasCustomRect *)ImFontAtlasCustomRect_ImFontAtlasCustomRect();
  *(ImFontAtlasCustomRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  ImFontAtlasCustomRect_destroy(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlasCustomRect_1IsPacked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlasCustomRect **)&jarg1; 
  result = (bool)ImFontAtlasCustomRect_IsPacked(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1ImFontAtlas(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFontAtlas *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFontAtlas *)ImFontAtlas_ImFontAtlas();
  *(ImFontAtlas **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  ImFontAtlas_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1AddFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImFontConfig **)&jarg2; 
  result = (ImFont *)ImFontAtlas_AddFont(arg1,(ImFontConfig const *)arg2);
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1AddFontDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImFontConfig **)&jarg2; 
  result = (ImFont *)ImFontAtlas_AddFontDefault(arg1,(ImFontConfig const *)arg2);
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1AddFontFromFileTTF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  arg4 = *(ImFontConfig **)&jarg4; 
  arg5 = *(ImWchar **)&jarg5; 
  result = (ImFont *)ImFontAtlas_AddFontFromFileTTF(arg1,(char const *)arg2,arg3,(ImFontConfig const *)arg4,(unsigned short const *)arg5);
  *(ImFont **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1AddFontFromMemoryTTF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = *(ImFontConfig **)&jarg5; 
  arg6 = *(ImWchar **)&jarg6; 
  result = (ImFont *)ImFontAtlas_AddFontFromMemoryTTF(arg1,arg2,arg3,arg4,(ImFontConfig const *)arg5,(unsigned short const *)arg6);
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1AddFontFromMemoryCompressedTTF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = *(ImFontConfig **)&jarg5; 
  arg6 = *(ImWchar **)&jarg6; 
  result = (ImFont *)ImFontAtlas_AddFontFromMemoryCompressedTTF(arg1,(void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5,(unsigned short const *)arg6);
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1AddFontFromMemoryCompressedBase85TTF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  arg4 = *(ImFontConfig **)&jarg4; 
  arg5 = *(ImWchar **)&jarg5; 
  result = (ImFont *)ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(arg1,(char const *)arg2,arg3,(ImFontConfig const *)arg4,(unsigned short const *)arg5);
  *(ImFont **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1ClearInputData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  ImFontAtlas_ClearInputData(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1ClearTexData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  ImFontAtlas_ClearTexData(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1ClearFonts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  ImFontAtlas_ClearFonts(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  ImFontAtlas_Clear(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1Build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (bool)ImFontAtlas_Build(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetTexDataAsAlpha8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(unsigned char ***)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  ImFontAtlas_GetTexDataAsAlpha8(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetTexDataAsRGBA32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(unsigned char ***)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  ImFontAtlas_GetTexDataAsRGBA32(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1IsBuilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (bool)ImFontAtlas_IsBuilt(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1SetTexID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImTextureID *)&jarg2; 
  ImFontAtlas_SetTexID(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetGlyphRangesDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImWchar *)ImFontAtlas_GetGlyphRangesDefault(arg1);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetGlyphRangesKorean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImWchar *)ImFontAtlas_GetGlyphRangesKorean(arg1);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetGlyphRangesJapanese(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImWchar *)ImFontAtlas_GetGlyphRangesJapanese(arg1);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetGlyphRangesChineseFull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImWchar *)ImFontAtlas_GetGlyphRangesChineseFull(arg1);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetGlyphRangesChineseSimplifiedCommon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImWchar *)ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(arg1);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetGlyphRangesCyrillic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImWchar *)ImFontAtlas_GetGlyphRangesCyrillic(arg1);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetGlyphRangesThai(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImWchar *)ImFontAtlas_GetGlyphRangesThai(arg1);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetGlyphRangesVietnamese(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  result = (ImWchar *)ImFontAtlas_GetGlyphRangesVietnamese(arg1);
  *(ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1AddCustomRectRegular(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)ImFontAtlas_AddCustomRectRegular(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1AddCustomRectFontGlyph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_) {
  jint jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  ImWchar arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  ImVec2 arg7 ;
  ImVec2 const *argp7 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImFont **)&jarg2; 
  arg3 = (ImWchar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float)jarg6; 
  argp7 = *(ImVec2 **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2 const");
    return 0;
  }
  arg7 = *argp7; 
  result = (int)ImFontAtlas_AddCustomRectFontGlyph(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetCustomRectByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  ImFontAtlasCustomRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ImFontAtlasCustomRect *)ImFontAtlas_GetCustomRectByIndex(arg1,arg2);
  *(ImFontAtlasCustomRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1CalcCustomRectUV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasCustomRect *arg2 = (ImFontAtlasCustomRect *) 0 ;
  ImVec2 *arg3 = (ImVec2 *) 0 ;
  ImVec2 *arg4 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = *(ImFontAtlasCustomRect **)&jarg2; 
  arg3 = *(ImVec2 **)&jarg3; 
  arg4 = *(ImVec2 **)&jarg4; 
  ImFontAtlas_CalcCustomRectUV(arg1,(ImFontAtlasCustomRect const *)arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFontAtlas_1GetMouseCursorTexData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiMouseCursor arg2 ;
  ImVec2 *arg3 = (ImVec2 *) 0 ;
  ImVec2 *arg4 = (ImVec2 *) 0 ;
  ImVec2 *arg5 ;
  ImVec2 *arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(ImFontAtlas **)&jarg1; 
  arg2 = (ImGuiMouseCursor)jarg2; 
  arg3 = *(ImVec2 **)&jarg3; 
  arg4 = *(ImVec2 **)&jarg4; 
  arg5 = *(ImVec2 **)&jarg5; 
  arg6 = *(ImVec2 **)&jarg6; 
  result = (bool)ImFontAtlas_GetMouseCursorTexData(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1ImFont(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImFont *)ImFont_ImFont();
  *(ImFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  ImFont_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FindGlyph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImFontGlyph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  result = (ImFontGlyph *)ImFont_FindGlyph(arg1,arg2);
  *(ImFontGlyph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1FindGlyphNoFallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImFontGlyph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  result = (ImFontGlyph *)ImFont_FindGlyphNoFallback(arg1,arg2);
  *(ImFontGlyph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1GetCharAdvance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  result = (float)ImFont_GetCharAdvance(arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1IsLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (bool)ImFont_IsLoaded(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1GetDebugName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  result = (char *)ImFont_GetDebugName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1CalcTextSizeA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5, jstring jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char **arg7 = (char **) 0 ;
  ImVec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = *(char ***)&jarg7; 
  result = ImFont_CalcTextSizeA(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  *(ImVec2 **)&jresult = new ImVec2((const ImVec2 &)result); 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1CalcWordWrapPositionA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jstring jarg3, jstring jarg4, jfloat jarg5) {
  jstring jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  float arg5 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (float)jarg5; 
  result = (char *)ImFont_CalcWordWrapPositionA(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1RenderChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jint jarg6) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImWchar arg6 ;
  ImVec2 *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = *(ImDrawList **)&jarg2; 
  arg3 = (float)jarg3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (ImU32)jarg5; 
  arg6 = (ImWchar)jarg6; 
  ImFont_RenderChar(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1RenderText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jobject jarg6_, jstring jarg7, jstring jarg8, jfloat jarg9, jboolean jarg10) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool arg10 ;
  ImVec2 *argp4 ;
  ImVec4 const *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = *(ImDrawList **)&jarg2; 
  arg3 = (float)jarg3; 
  argp4 = *(ImVec2 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec2");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (ImU32)jarg5; 
  argp6 = *(ImVec4 **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImVec4 const");
    return ;
  }
  arg6 = *argp6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return ;
  }
  arg9 = (float)jarg9; 
  arg10 = jarg10 ? true : false; 
  ImFont_RenderText(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9,arg10);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1BuildLookupTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  ImFont_BuildLookupTable(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1ClearOutputData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  ImFont_ClearOutputData(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1GrowIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (int)jarg2; 
  ImFont_GrowIndex(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1AddGlyph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  ImFont_AddGlyph(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1AddRemapChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImWchar arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  arg3 = (ImWchar)jarg3; 
  arg4 = jarg4 ? true : false; 
  ImFont_AddRemapChar(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1SetFallbackChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (ImWchar)jarg2; 
  ImFont_SetFallbackChar(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowPos_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetWindowPos_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowPos_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetWindowPos_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowSize_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetWindowSize_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowSize_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetWindowSize_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetContentRegionMax_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetContentRegionMax_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetContentRegionMax_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetContentRegionMax_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetContentRegionAvail_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetContentRegionAvail_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetContentRegionAvail_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetContentRegionAvail_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowContentRegionMin_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetWindowContentRegionMin_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowContentRegionMin_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetWindowContentRegionMin_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowContentRegionMax_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetWindowContentRegionMax_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetWindowContentRegionMax_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetWindowContentRegionMax_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetFontTexUvWhitePixel_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetFontTexUvWhitePixel_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetFontTexUvWhitePixel_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetFontTexUvWhitePixel_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorPos_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetCursorPos_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorPos_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetCursorPos_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorStartPos_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetCursorStartPos_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorStartPos_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetCursorStartPos_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorScreenPos_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetCursorScreenPos_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetCursorScreenPos_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetCursorScreenPos_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetItemRectMin_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetItemRectMin_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetItemRectMin_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetItemRectMin_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetItemRectMax_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetItemRectMax_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetItemRectMax_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetItemRectMax_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetItemRectSize_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetItemRectSize_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetItemRectSize_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetItemRectSize_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igCalcTextSize_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jfloat jarg5) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  igCalcTextSize_nonUDT(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igCalcTextSize_1nonUDT2(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  float arg4 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  result = igCalcTextSize_nonUDT2((char const *)arg1,(char const *)arg2,arg3,arg4);
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igColorConvertU32ToFloat4_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  ImU32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec4 **)&jarg1; 
  arg2 = (ImU32)jarg2; 
  igColorConvertU32ToFloat4_nonUDT(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igColorConvertU32ToFloat4_1nonUDT2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ImU32 arg1 ;
  ImVec4_Simple result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImU32)jarg1; 
  result = igColorConvertU32ToFloat4_nonUDT2(arg1);
  *(ImVec4_Simple **)&jresult = new ImVec4_Simple((const ImVec4_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetMousePos_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetMousePos_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetMousePos_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetMousePos_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetMousePosOnOpeningCurrentPopup_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  igGetMousePosOnOpeningCurrentPopup_nonUDT(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetMousePosOnOpeningCurrentPopup_1nonUDT2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  result = igGetMousePosOnOpeningCurrentPopup_nonUDT2();
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igGetMouseDragDelta_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  ImGuiMouseButton arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVec2 **)&jarg1; 
  arg2 = (ImGuiMouseButton)jarg2; 
  arg3 = (float)jarg3; 
  igGetMouseDragDelta_nonUDT(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_igGetMouseDragDelta_1nonUDT2(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ImGuiMouseButton)jarg1; 
  arg2 = (float)jarg2; 
  result = igGetMouseDragDelta_nonUDT2(arg1,arg2);
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1HSV_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImColor *arg2 = (ImColor *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImColor **)&jarg1; 
  arg2 = *(ImColor **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  ImColor_HSV_nonUDT(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImColor_1HSV_1nonUDT2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  ImColor_Simple result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImColor **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = ImColor_HSV_nonUDT2(arg1,arg2,arg3,arg4,arg5);
  *(ImColor_Simple **)&jresult = new ImColor_Simple((const ImColor_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1GetClipRectMin_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVec2 **)&jarg1; 
  arg2 = *(ImDrawList **)&jarg2; 
  ImDrawList_GetClipRectMin_nonUDT(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1GetClipRectMin_1nonUDT2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = ImDrawList_GetClipRectMin_nonUDT2(arg1);
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1GetClipRectMax_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVec2 **)&jarg1; 
  arg2 = *(ImDrawList **)&jarg2; 
  ImDrawList_GetClipRectMax_nonUDT(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawList_1GetClipRectMax_1nonUDT2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawList **)&jarg1; 
  result = ImDrawList_GetClipRectMax_nonUDT2(arg1);
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1CalcTextSizeA_1nonUDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jstring jarg6, jstring jarg7, jlong jarg8) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char **arg8 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ImVec2 **)&jarg1; 
  arg2 = *(ImFont **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = *(char ***)&jarg8; 
  ImFont_CalcTextSizeA_nonUDT(arg1,arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const **)arg8);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImFont_1CalcTextSizeA_1nonUDT2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5, jstring jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char **arg7 = (char **) 0 ;
  ImVec2_Simple result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImFont **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = *(char ***)&jarg7; 
  result = ImFont_CalcTextSizeA_nonUDT2(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  *(ImVec2_Simple **)&jresult = new ImVec2_Simple((const ImVec2_Simple &)result); 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igLogText(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  igLogText((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImGuiTextBuffer_1appendf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImGuiTextBuffer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ImGuiTextBuffer_appendf(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_igGET_1FLT_1MAX(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)igGET_FLT_MAX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igColorConvertRGBtoHSV(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  arg6 = *(float **)&jarg6; 
  igColorConvertRGBtoHSV(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_igColorConvertHSVtoRGB(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  arg6 = *(float **)&jarg6; 
  igColorConvertHSVtoRGB(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ImVector_ImWchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ImVector_ImWchar *)ImVector_ImWchar_create();
  *(ImVector_ImWchar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  ImVector_ImWchar_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  ImVector_ImWchar_Init(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImVector_1ImWchar_1UnInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImVector_ImWchar *arg1 = (ImVector_ImWchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImVector_ImWchar **)&jarg1; 
  ImVector_ImWchar_UnInit(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1intp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)new_intp();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_copy_1intp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)copy_intp(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1intp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_intp(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_intp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  intp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_intp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int)intp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1uintp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int *)new_uintp();
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_copy_1uintp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int *)copy_uintp(arg1);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1uintp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  delete_uintp(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_uintp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  uintp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_uintp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  result = (unsigned int)uintp_value(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1size_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (size_t *)new_size_tp();
  *(size_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_copy_1size_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (size_t *)copy_size_tp(arg1);
  *(size_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1size_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  size_t *arg1 = (size_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(size_t **)&jarg1; 
  delete_size_tp(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_size_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  size_t *arg1 = (size_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(size_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  size_tp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_size_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t *arg1 = (size_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(size_t **)&jarg1; 
  result = size_tp_value(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1boolp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bool *)new_boolp();
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_copy_1boolp(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (bool *)copy_boolp(arg1);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1boolp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  delete_boolp(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_boolp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  bool *arg1 = (bool *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  boolp_assign(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_boolp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  bool *arg1 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  result = (bool)boolp_value(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1floatp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (float *)new_floatp();
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_copy_1floatp(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (float *)copy_floatp(arg1);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1floatp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  float *arg1 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  delete_floatp(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_floatp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  float *arg1 = (float *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (float)jarg2; 
  floatp_assign(arg1,arg2);
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_floatp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  result = (float)floatp_value(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1doublep(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (double *)new_doublep();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_copy_1doublep(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double *)copy_doublep(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1doublep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  delete_doublep(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_doublep_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  double *arg1 = (double *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (double)jarg2; 
  doublep_assign(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_cimgui_internal_CImGuiJNI_doublep_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  result = (double)doublep_value(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1unsigned_1charpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned char **)new_unsigned_charpp();
  *(unsigned char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_copy_1unsigned_1charpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  result = (unsigned char **)copy_unsigned_charpp(arg1);
  *(unsigned char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1unsigned_1charpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned char **arg1 = (unsigned char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char ***)&jarg1; 
  delete_unsigned_charpp(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_unsigned_1charpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  unsigned char **arg1 = (unsigned char **) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char ***)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  unsigned_charpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_unsigned_1charpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned char **arg1 = (unsigned char **) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char ***)&jarg1; 
  result = (unsigned char *)unsigned_charpp_value(arg1);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1voidp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  void **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (void **)new_voidp();
  *(void ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_copy_1voidp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (void **)copy_voidp(arg1);
  *(void ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1voidp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void **arg1 = (void **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  delete_voidp(arg1);
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_voidp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void **arg1 = (void **) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  arg2 = *(void **)&jarg2; 
  voidp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_voidp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void **arg1 = (void **) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  result = (void *)voidp_value(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1intArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)new_intArray(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1intArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_intArray(arg1);
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_intArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)intArray_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_intArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  intArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1floatArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (float *)new_floatArray(arg1);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1floatArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  float *arg1 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  delete_floatArray(arg1);
}


SWIGEXPORT jfloat JNICALL Java_cimgui_internal_CImGuiJNI_floatArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)floatArray_getitem(arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_floatArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  floatArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1boolArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool *)new_boolArray(arg1);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1boolArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  delete_boolArray(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cimgui_internal_CImGuiJNI_boolArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  bool *arg1 = (bool *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)boolArray_getitem(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_boolArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
  bool *arg1 = (bool *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  boolArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ushortArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (unsigned short *)new_ushortArray(arg1);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ushortArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1; 
  delete_ushortArray(arg1);
}


SWIGEXPORT jint JNICALL Java_cimgui_internal_CImGuiJNI_ushortArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  int arg2 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned short)ushortArray_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ushortArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  int arg2 ;
  unsigned short arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned short)jarg3; 
  ushortArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1ImDrawCmdArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ImDrawCmd *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ImDrawCmd *)new_ImDrawCmdArray(arg1);
  *(ImDrawCmd **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1ImDrawCmdArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  delete_ImDrawCmdArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmdArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  int arg2 ;
  ImDrawCmd result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ImDrawCmdArray_getitem(arg1,arg2);
  *(ImDrawCmd **)&jresult = new ImDrawCmd((const ImDrawCmd &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_ImDrawCmdArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  int arg2 ;
  ImDrawCmd arg3 ;
  ImDrawCmd *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ImDrawCmd **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(ImDrawCmd **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ImDrawCmd");
    return ;
  }
  arg3 = *argp3; 
  ImDrawCmdArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_new_1pImDrawListArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ImDrawList **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ImDrawList **)new_pImDrawListArray(arg1);
  *(ImDrawList ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_delete_1pImDrawListArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ImDrawList **arg1 = (ImDrawList **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImDrawList ***)&jarg1; 
  delete_pImDrawListArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_cimgui_internal_CImGuiJNI_pImDrawListArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  ImDrawList **arg1 = (ImDrawList **) 0 ;
  int arg2 ;
  ImDrawList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ImDrawList ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ImDrawList *)pImDrawListArray_getitem(arg1,arg2);
  *(ImDrawList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cimgui_internal_CImGuiJNI_pImDrawListArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  ImDrawList **arg1 = (ImDrawList **) 0 ;
  int arg2 ;
  ImDrawList *arg3 = (ImDrawList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(ImDrawList ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(ImDrawList **)&jarg3; 
  pImDrawListArray_setitem(arg1,arg2,arg3);
}


#ifdef __cplusplus
}
#endif

