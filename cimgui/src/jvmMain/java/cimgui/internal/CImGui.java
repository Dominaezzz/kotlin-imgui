/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package cimgui.internal;

public class CImGui {
  public static void setGImGui(ImGuiContext value) {
    CImGuiJNI.GImGui_set(ImGuiContext.getCPtr(value), value);
  }

  public static ImGuiContext getGImGui() {
    long cPtr = CImGuiJNI.GImGui_get();
    return (cPtr == 0) ? null : new ImGuiContext(cPtr, false);
  }

  public static ImVec2 ImVec2_ImVec2Nil() {
    long cPtr = CImGuiJNI.ImVec2_ImVec2Nil();
    return (cPtr == 0) ? null : new ImVec2(cPtr, false);
  }

  public static void ImVec2_destroy(ImVec2 self) {
    CImGuiJNI.ImVec2_destroy(ImVec2.getCPtr(self), self);
  }

  public static ImVec2 ImVec2_ImVec2Float(float _x, float _y) {
    long cPtr = CImGuiJNI.ImVec2_ImVec2Float(_x, _y);
    return (cPtr == 0) ? null : new ImVec2(cPtr, false);
  }

  public static ImVec4 ImVec4_ImVec4Nil() {
    long cPtr = CImGuiJNI.ImVec4_ImVec4Nil();
    return (cPtr == 0) ? null : new ImVec4(cPtr, false);
  }

  public static void ImVec4_destroy(ImVec4 self) {
    CImGuiJNI.ImVec4_destroy(ImVec4.getCPtr(self), self);
  }

  public static ImVec4 ImVec4_ImVec4Float(float _x, float _y, float _z, float _w) {
    long cPtr = CImGuiJNI.ImVec4_ImVec4Float(_x, _y, _z, _w);
    return (cPtr == 0) ? null : new ImVec4(cPtr, false);
  }

  public static ImGuiContext igCreateContext(ImFontAtlas shared_font_atlas) {
    long cPtr = CImGuiJNI.igCreateContext(ImFontAtlas.getCPtr(shared_font_atlas), shared_font_atlas);
    return (cPtr == 0) ? null : new ImGuiContext(cPtr, false);
  }

  public static void igDestroyContext(ImGuiContext ctx) {
    CImGuiJNI.igDestroyContext(ImGuiContext.getCPtr(ctx), ctx);
  }

  public static ImGuiContext igGetCurrentContext() {
    long cPtr = CImGuiJNI.igGetCurrentContext();
    return (cPtr == 0) ? null : new ImGuiContext(cPtr, false);
  }

  public static void igSetCurrentContext(ImGuiContext ctx) {
    CImGuiJNI.igSetCurrentContext(ImGuiContext.getCPtr(ctx), ctx);
  }

  public static ImGuiIO igGetIO() {
    long cPtr = CImGuiJNI.igGetIO();
    return (cPtr == 0) ? null : new ImGuiIO(cPtr, false);
  }

  public static ImGuiStyle igGetStyle() {
    long cPtr = CImGuiJNI.igGetStyle();
    return (cPtr == 0) ? null : new ImGuiStyle(cPtr, false);
  }

  public static void igNewFrame() {
    CImGuiJNI.igNewFrame();
  }

  public static void igEndFrame() {
    CImGuiJNI.igEndFrame();
  }

  public static void igRender() {
    CImGuiJNI.igRender();
  }

  public static ImDrawData igGetDrawData() {
    long cPtr = CImGuiJNI.igGetDrawData();
    return (cPtr == 0) ? null : new ImDrawData(cPtr, false);
  }

  public static void igShowDemoWindow(SWIGTYPE_p_bool p_open) {
    CImGuiJNI.igShowDemoWindow(SWIGTYPE_p_bool.getCPtr(p_open));
  }

  public static void igShowAboutWindow(SWIGTYPE_p_bool p_open) {
    CImGuiJNI.igShowAboutWindow(SWIGTYPE_p_bool.getCPtr(p_open));
  }

  public static void igShowMetricsWindow(SWIGTYPE_p_bool p_open) {
    CImGuiJNI.igShowMetricsWindow(SWIGTYPE_p_bool.getCPtr(p_open));
  }

  public static void igShowStyleEditor(ImGuiStyle ref) {
    CImGuiJNI.igShowStyleEditor(ImGuiStyle.getCPtr(ref), ref);
  }

  public static boolean igShowStyleSelector(String label) {
    return CImGuiJNI.igShowStyleSelector(label);
  }

  public static void igShowFontSelector(String label) {
    CImGuiJNI.igShowFontSelector(label);
  }

  public static void igShowUserGuide() {
    CImGuiJNI.igShowUserGuide();
  }

  public static String igGetVersion() {
    return CImGuiJNI.igGetVersion();
  }

  public static void igStyleColorsDark(ImGuiStyle dst) {
    CImGuiJNI.igStyleColorsDark(ImGuiStyle.getCPtr(dst), dst);
  }

  public static void igStyleColorsClassic(ImGuiStyle dst) {
    CImGuiJNI.igStyleColorsClassic(ImGuiStyle.getCPtr(dst), dst);
  }

  public static void igStyleColorsLight(ImGuiStyle dst) {
    CImGuiJNI.igStyleColorsLight(ImGuiStyle.getCPtr(dst), dst);
  }

  public static boolean igBegin(String name, SWIGTYPE_p_bool p_open, int flags) {
    return CImGuiJNI.igBegin(name, SWIGTYPE_p_bool.getCPtr(p_open), flags);
  }

  public static void igEnd() {
    CImGuiJNI.igEnd();
  }

  public static boolean igBeginChildStr(String str_id, ImVec2 size, boolean border, int flags) {
    return CImGuiJNI.igBeginChildStr(str_id, ImVec2.getCPtr(size), size, border, flags);
  }

  public static boolean igBeginChildID(long id, ImVec2 size, boolean border, int flags) {
    return CImGuiJNI.igBeginChildID(id, ImVec2.getCPtr(size), size, border, flags);
  }

  public static void igEndChild() {
    CImGuiJNI.igEndChild();
  }

  public static boolean igIsWindowAppearing() {
    return CImGuiJNI.igIsWindowAppearing();
  }

  public static boolean igIsWindowCollapsed() {
    return CImGuiJNI.igIsWindowCollapsed();
  }

  public static boolean igIsWindowFocused(int flags) {
    return CImGuiJNI.igIsWindowFocused(flags);
  }

  public static boolean igIsWindowHovered(int flags) {
    return CImGuiJNI.igIsWindowHovered(flags);
  }

  public static ImDrawList igGetWindowDrawList() {
    long cPtr = CImGuiJNI.igGetWindowDrawList();
    return (cPtr == 0) ? null : new ImDrawList(cPtr, false);
  }

  public static float igGetWindowDpiScale() {
    return CImGuiJNI.igGetWindowDpiScale();
  }

  public static ImGuiViewport igGetWindowViewport() {
    long cPtr = CImGuiJNI.igGetWindowViewport();
    return (cPtr == 0) ? null : new ImGuiViewport(cPtr, false);
  }

  public static void igGetWindowPos(ImVec2 pOut) {
    CImGuiJNI.igGetWindowPos(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igGetWindowSize(ImVec2 pOut) {
    CImGuiJNI.igGetWindowSize(ImVec2.getCPtr(pOut), pOut);
  }

  public static float igGetWindowWidth() {
    return CImGuiJNI.igGetWindowWidth();
  }

  public static float igGetWindowHeight() {
    return CImGuiJNI.igGetWindowHeight();
  }

  public static void igSetNextWindowPos(ImVec2 pos, int cond, ImVec2 pivot) {
    CImGuiJNI.igSetNextWindowPos(ImVec2.getCPtr(pos), pos, cond, ImVec2.getCPtr(pivot), pivot);
  }

  public static void igSetNextWindowSize(ImVec2 size, int cond) {
    CImGuiJNI.igSetNextWindowSize(ImVec2.getCPtr(size), size, cond);
  }

  public static void igSetNextWindowSizeConstraints(ImVec2 size_min, ImVec2 size_max, CustomCallback custom_callback) {
    CImGuiJNI.igSetNextWindowSizeConstraints(ImVec2.getCPtr(size_min), size_min, ImVec2.getCPtr(size_max), size_max, custom_callback);
  }

  public static void igSetNextWindowContentSize(ImVec2 size) {
    CImGuiJNI.igSetNextWindowContentSize(ImVec2.getCPtr(size), size);
  }

  public static void igSetNextWindowCollapsed(boolean collapsed, int cond) {
    CImGuiJNI.igSetNextWindowCollapsed(collapsed, cond);
  }

  public static void igSetNextWindowFocus() {
    CImGuiJNI.igSetNextWindowFocus();
  }

  public static void igSetNextWindowBgAlpha(float alpha) {
    CImGuiJNI.igSetNextWindowBgAlpha(alpha);
  }

  public static void igSetNextWindowViewport(long viewport_id) {
    CImGuiJNI.igSetNextWindowViewport(viewport_id);
  }

  public static void igSetWindowPosVec2(ImVec2 pos, int cond) {
    CImGuiJNI.igSetWindowPosVec2(ImVec2.getCPtr(pos), pos, cond);
  }

  public static void igSetWindowSizeVec2(ImVec2 size, int cond) {
    CImGuiJNI.igSetWindowSizeVec2(ImVec2.getCPtr(size), size, cond);
  }

  public static void igSetWindowCollapsedBool(boolean collapsed, int cond) {
    CImGuiJNI.igSetWindowCollapsedBool(collapsed, cond);
  }

  public static void igSetWindowFocusNil() {
    CImGuiJNI.igSetWindowFocusNil();
  }

  public static void igSetWindowFontScale(float scale) {
    CImGuiJNI.igSetWindowFontScale(scale);
  }

  public static void igSetWindowPosStr(String name, ImVec2 pos, int cond) {
    CImGuiJNI.igSetWindowPosStr(name, ImVec2.getCPtr(pos), pos, cond);
  }

  public static void igSetWindowSizeStr(String name, ImVec2 size, int cond) {
    CImGuiJNI.igSetWindowSizeStr(name, ImVec2.getCPtr(size), size, cond);
  }

  public static void igSetWindowCollapsedStr(String name, boolean collapsed, int cond) {
    CImGuiJNI.igSetWindowCollapsedStr(name, collapsed, cond);
  }

  public static void igSetWindowFocusStr(String name) {
    CImGuiJNI.igSetWindowFocusStr(name);
  }

  public static void igGetContentRegionMax(ImVec2 pOut) {
    CImGuiJNI.igGetContentRegionMax(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igGetContentRegionAvail(ImVec2 pOut) {
    CImGuiJNI.igGetContentRegionAvail(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igGetWindowContentRegionMin(ImVec2 pOut) {
    CImGuiJNI.igGetWindowContentRegionMin(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igGetWindowContentRegionMax(ImVec2 pOut) {
    CImGuiJNI.igGetWindowContentRegionMax(ImVec2.getCPtr(pOut), pOut);
  }

  public static float igGetWindowContentRegionWidth() {
    return CImGuiJNI.igGetWindowContentRegionWidth();
  }

  public static float igGetScrollX() {
    return CImGuiJNI.igGetScrollX();
  }

  public static float igGetScrollY() {
    return CImGuiJNI.igGetScrollY();
  }

  public static float igGetScrollMaxX() {
    return CImGuiJNI.igGetScrollMaxX();
  }

  public static float igGetScrollMaxY() {
    return CImGuiJNI.igGetScrollMaxY();
  }

  public static void igSetScrollXFloat(float scroll_x) {
    CImGuiJNI.igSetScrollXFloat(scroll_x);
  }

  public static void igSetScrollYFloat(float scroll_y) {
    CImGuiJNI.igSetScrollYFloat(scroll_y);
  }

  public static void igSetScrollHereX(float center_x_ratio) {
    CImGuiJNI.igSetScrollHereX(center_x_ratio);
  }

  public static void igSetScrollHereY(float center_y_ratio) {
    CImGuiJNI.igSetScrollHereY(center_y_ratio);
  }

  public static void igSetScrollFromPosXFloat(float local_x, float center_x_ratio) {
    CImGuiJNI.igSetScrollFromPosXFloat(local_x, center_x_ratio);
  }

  public static void igSetScrollFromPosYFloat(float local_y, float center_y_ratio) {
    CImGuiJNI.igSetScrollFromPosYFloat(local_y, center_y_ratio);
  }

  public static void igPushFont(ImFont font) {
    CImGuiJNI.igPushFont(ImFont.getCPtr(font), font);
  }

  public static void igPopFont() {
    CImGuiJNI.igPopFont();
  }

  public static void igPushStyleColorU32(int idx, long col) {
    CImGuiJNI.igPushStyleColorU32(idx, col);
  }

  public static void igPushStyleColorVec4(int idx, ImVec4 col) {
    CImGuiJNI.igPushStyleColorVec4(idx, ImVec4.getCPtr(col), col);
  }

  public static void igPopStyleColor(int count) {
    CImGuiJNI.igPopStyleColor(count);
  }

  public static void igPushStyleVarFloat(int idx, float val) {
    CImGuiJNI.igPushStyleVarFloat(idx, val);
  }

  public static void igPushStyleVarVec2(int idx, ImVec2 val) {
    CImGuiJNI.igPushStyleVarVec2(idx, ImVec2.getCPtr(val), val);
  }

  public static void igPopStyleVar(int count) {
    CImGuiJNI.igPopStyleVar(count);
  }

  public static ImVec4 igGetStyleColorVec4(int idx) {
    long cPtr = CImGuiJNI.igGetStyleColorVec4(idx);
    return (cPtr == 0) ? null : new ImVec4(cPtr, false);
  }

  public static ImFont igGetFont() {
    long cPtr = CImGuiJNI.igGetFont();
    return (cPtr == 0) ? null : new ImFont(cPtr, false);
  }

  public static float igGetFontSize() {
    return CImGuiJNI.igGetFontSize();
  }

  public static void igGetFontTexUvWhitePixel(ImVec2 pOut) {
    CImGuiJNI.igGetFontTexUvWhitePixel(ImVec2.getCPtr(pOut), pOut);
  }

  public static long igGetColorU32Col(int idx, float alpha_mul) {
    return CImGuiJNI.igGetColorU32Col(idx, alpha_mul);
  }

  public static long igGetColorU32Vec4(ImVec4 col) {
    return CImGuiJNI.igGetColorU32Vec4(ImVec4.getCPtr(col), col);
  }

  public static long igGetColorU32U32(long col) {
    return CImGuiJNI.igGetColorU32U32(col);
  }

  public static void igPushItemWidth(float item_width) {
    CImGuiJNI.igPushItemWidth(item_width);
  }

  public static void igPopItemWidth() {
    CImGuiJNI.igPopItemWidth();
  }

  public static void igSetNextItemWidth(float item_width) {
    CImGuiJNI.igSetNextItemWidth(item_width);
  }

  public static float igCalcItemWidth() {
    return CImGuiJNI.igCalcItemWidth();
  }

  public static void igPushTextWrapPos(float wrap_local_pos_x) {
    CImGuiJNI.igPushTextWrapPos(wrap_local_pos_x);
  }

  public static void igPopTextWrapPos() {
    CImGuiJNI.igPopTextWrapPos();
  }

  public static void igPushAllowKeyboardFocus(boolean allow_keyboard_focus) {
    CImGuiJNI.igPushAllowKeyboardFocus(allow_keyboard_focus);
  }

  public static void igPopAllowKeyboardFocus() {
    CImGuiJNI.igPopAllowKeyboardFocus();
  }

  public static void igPushButtonRepeat(boolean repeat) {
    CImGuiJNI.igPushButtonRepeat(repeat);
  }

  public static void igPopButtonRepeat() {
    CImGuiJNI.igPopButtonRepeat();
  }

  public static void igSeparator() {
    CImGuiJNI.igSeparator();
  }

  public static void igSameLine(float offset_from_start_x, float spacing) {
    CImGuiJNI.igSameLine(offset_from_start_x, spacing);
  }

  public static void igNewLine() {
    CImGuiJNI.igNewLine();
  }

  public static void igSpacing() {
    CImGuiJNI.igSpacing();
  }

  public static void igDummy(ImVec2 size) {
    CImGuiJNI.igDummy(ImVec2.getCPtr(size), size);
  }

  public static void igIndent(float indent_w) {
    CImGuiJNI.igIndent(indent_w);
  }

  public static void igUnindent(float indent_w) {
    CImGuiJNI.igUnindent(indent_w);
  }

  public static void igBeginGroup() {
    CImGuiJNI.igBeginGroup();
  }

  public static void igEndGroup() {
    CImGuiJNI.igEndGroup();
  }

  public static void igGetCursorPos(ImVec2 pOut) {
    CImGuiJNI.igGetCursorPos(ImVec2.getCPtr(pOut), pOut);
  }

  public static float igGetCursorPosX() {
    return CImGuiJNI.igGetCursorPosX();
  }

  public static float igGetCursorPosY() {
    return CImGuiJNI.igGetCursorPosY();
  }

  public static void igSetCursorPos(ImVec2 local_pos) {
    CImGuiJNI.igSetCursorPos(ImVec2.getCPtr(local_pos), local_pos);
  }

  public static void igSetCursorPosX(float local_x) {
    CImGuiJNI.igSetCursorPosX(local_x);
  }

  public static void igSetCursorPosY(float local_y) {
    CImGuiJNI.igSetCursorPosY(local_y);
  }

  public static void igGetCursorStartPos(ImVec2 pOut) {
    CImGuiJNI.igGetCursorStartPos(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igGetCursorScreenPos(ImVec2 pOut) {
    CImGuiJNI.igGetCursorScreenPos(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igSetCursorScreenPos(ImVec2 pos) {
    CImGuiJNI.igSetCursorScreenPos(ImVec2.getCPtr(pos), pos);
  }

  public static void igAlignTextToFramePadding() {
    CImGuiJNI.igAlignTextToFramePadding();
  }

  public static float igGetTextLineHeight() {
    return CImGuiJNI.igGetTextLineHeight();
  }

  public static float igGetTextLineHeightWithSpacing() {
    return CImGuiJNI.igGetTextLineHeightWithSpacing();
  }

  public static float igGetFrameHeight() {
    return CImGuiJNI.igGetFrameHeight();
  }

  public static float igGetFrameHeightWithSpacing() {
    return CImGuiJNI.igGetFrameHeightWithSpacing();
  }

  public static void igPushIDStr(String str_id) {
    CImGuiJNI.igPushIDStr(str_id);
  }

  public static void igPushIDStrStr(String str_id_begin, String str_id_end) {
    CImGuiJNI.igPushIDStrStr(str_id_begin, str_id_end);
  }

  public static void igPushIDPtr(SWIGTYPE_p_void ptr_id) {
    CImGuiJNI.igPushIDPtr(SWIGTYPE_p_void.getCPtr(ptr_id));
  }

  public static void igPushIDInt(int int_id) {
    CImGuiJNI.igPushIDInt(int_id);
  }

  public static void igPopID() {
    CImGuiJNI.igPopID();
  }

  public static long igGetIDStr(String str_id) {
    return CImGuiJNI.igGetIDStr(str_id);
  }

  public static long igGetIDStrStr(String str_id_begin, String str_id_end) {
    return CImGuiJNI.igGetIDStrStr(str_id_begin, str_id_end);
  }

  public static long igGetIDPtr(SWIGTYPE_p_void ptr_id) {
    return CImGuiJNI.igGetIDPtr(SWIGTYPE_p_void.getCPtr(ptr_id));
  }

  public static void igTextUnformatted(String text, String text_end) {
    CImGuiJNI.igTextUnformatted(text, text_end);
  }

  public static void igText(String fmt) {
    CImGuiJNI.igText(fmt);
  }

  public static void igTextColored(ImVec4 col, String fmt) {
    CImGuiJNI.igTextColored(ImVec4.getCPtr(col), col, fmt);
  }

  public static void igTextDisabled(String fmt) {
    CImGuiJNI.igTextDisabled(fmt);
  }

  public static void igTextWrapped(String fmt) {
    CImGuiJNI.igTextWrapped(fmt);
  }

  public static void igLabelText(String label, String fmt) {
    CImGuiJNI.igLabelText(label, fmt);
  }

  public static void igBulletText(String fmt) {
    CImGuiJNI.igBulletText(fmt);
  }

  public static boolean igButton(String label, ImVec2 size) {
    return CImGuiJNI.igButton(label, ImVec2.getCPtr(size), size);
  }

  public static boolean igSmallButton(String label) {
    return CImGuiJNI.igSmallButton(label);
  }

  public static boolean igInvisibleButton(String str_id, ImVec2 size) {
    return CImGuiJNI.igInvisibleButton(str_id, ImVec2.getCPtr(size), size);
  }

  public static boolean igArrowButton(String str_id, int dir) {
    return CImGuiJNI.igArrowButton(str_id, dir);
  }

  public static void igImage(SWIGTYPE_p_void user_texture_id, ImVec2 size, ImVec2 uv0, ImVec2 uv1, ImVec4 tint_col, ImVec4 border_col) {
    CImGuiJNI.igImage(SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(size), size, ImVec2.getCPtr(uv0), uv0, ImVec2.getCPtr(uv1), uv1, ImVec4.getCPtr(tint_col), tint_col, ImVec4.getCPtr(border_col), border_col);
  }

  public static boolean igImageButton(SWIGTYPE_p_void user_texture_id, ImVec2 size, ImVec2 uv0, ImVec2 uv1, int frame_padding, ImVec4 bg_col, ImVec4 tint_col) {
    return CImGuiJNI.igImageButton(SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(size), size, ImVec2.getCPtr(uv0), uv0, ImVec2.getCPtr(uv1), uv1, frame_padding, ImVec4.getCPtr(bg_col), bg_col, ImVec4.getCPtr(tint_col), tint_col);
  }

  public static boolean igCheckbox(String label, SWIGTYPE_p_bool v) {
    return CImGuiJNI.igCheckbox(label, SWIGTYPE_p_bool.getCPtr(v));
  }

  public static boolean igCheckboxFlags(String label, SWIGTYPE_p_unsigned_int flags, long flags_value) {
    return CImGuiJNI.igCheckboxFlags(label, SWIGTYPE_p_unsigned_int.getCPtr(flags), flags_value);
  }

  public static boolean igRadioButtonBool(String label, boolean active) {
    return CImGuiJNI.igRadioButtonBool(label, active);
  }

  public static boolean igRadioButtonIntPtr(String label, SWIGTYPE_p_int v, int v_button) {
    return CImGuiJNI.igRadioButtonIntPtr(label, SWIGTYPE_p_int.getCPtr(v), v_button);
  }

  public static void igProgressBar(float fraction, ImVec2 size_arg, String overlay) {
    CImGuiJNI.igProgressBar(fraction, ImVec2.getCPtr(size_arg), size_arg, overlay);
  }

  public static void igBullet() {
    CImGuiJNI.igBullet();
  }

  public static boolean igBeginCombo(String label, String preview_value, int flags) {
    return CImGuiJNI.igBeginCombo(label, preview_value, flags);
  }

  public static void igEndCombo() {
    CImGuiJNI.igEndCombo();
  }

  public static boolean igComboStr_arr(String label, SWIGTYPE_p_int current_item, String[] items, int popup_max_height_in_items) {
    return CImGuiJNI.igComboStr_arr(label, SWIGTYPE_p_int.getCPtr(current_item), items, popup_max_height_in_items);
  }

  public static boolean igComboStr(String label, SWIGTYPE_p_int current_item, String items_separated_by_zeros, int popup_max_height_in_items) {
    return CImGuiJNI.igComboStr(label, SWIGTYPE_p_int.getCPtr(current_item), items_separated_by_zeros, popup_max_height_in_items);
  }

  public static boolean igComboFnBoolPtr(String label, SWIGTYPE_p_int current_item, ItemsGetter items_getter, int items_count, int popup_max_height_in_items) {
    return CImGuiJNI.igComboFnBoolPtr(label, SWIGTYPE_p_int.getCPtr(current_item), items_getter, items_count, popup_max_height_in_items);
  }

  public static boolean igDragFloat(String label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, String format, float power) {
    return CImGuiJNI.igDragFloat(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format, power);
  }

  public static boolean igDragFloat2(String label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, String format, float power) {
    return CImGuiJNI.igDragFloat2(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format, power);
  }

  public static boolean igDragFloat3(String label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, String format, float power) {
    return CImGuiJNI.igDragFloat3(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format, power);
  }

  public static boolean igDragFloat4(String label, SWIGTYPE_p_float v, float v_speed, float v_min, float v_max, String format, float power) {
    return CImGuiJNI.igDragFloat4(label, SWIGTYPE_p_float.getCPtr(v), v_speed, v_min, v_max, format, power);
  }

  public static boolean igDragFloatRange2(String label, SWIGTYPE_p_float v_current_min, SWIGTYPE_p_float v_current_max, float v_speed, float v_min, float v_max, String format, String format_max, float power) {
    return CImGuiJNI.igDragFloatRange2(label, SWIGTYPE_p_float.getCPtr(v_current_min), SWIGTYPE_p_float.getCPtr(v_current_max), v_speed, v_min, v_max, format, format_max, power);
  }

  public static boolean igDragInt(String label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, String format) {
    return CImGuiJNI.igDragInt(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format);
  }

  public static boolean igDragInt2(String label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, String format) {
    return CImGuiJNI.igDragInt2(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format);
  }

  public static boolean igDragInt3(String label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, String format) {
    return CImGuiJNI.igDragInt3(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format);
  }

  public static boolean igDragInt4(String label, SWIGTYPE_p_int v, float v_speed, int v_min, int v_max, String format) {
    return CImGuiJNI.igDragInt4(label, SWIGTYPE_p_int.getCPtr(v), v_speed, v_min, v_max, format);
  }

  public static boolean igDragIntRange2(String label, SWIGTYPE_p_int v_current_min, SWIGTYPE_p_int v_current_max, float v_speed, int v_min, int v_max, String format, String format_max) {
    return CImGuiJNI.igDragIntRange2(label, SWIGTYPE_p_int.getCPtr(v_current_min), SWIGTYPE_p_int.getCPtr(v_current_max), v_speed, v_min, v_max, format, format_max);
  }

  public static boolean igDragScalar(String label, int data_type, SWIGTYPE_p_void p_data, float v_speed, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, String format, float power) {
    return CImGuiJNI.igDragScalar(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), v_speed, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, power);
  }

  public static boolean igDragScalarN(String label, int data_type, SWIGTYPE_p_void p_data, int components, float v_speed, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, String format, float power) {
    return CImGuiJNI.igDragScalarN(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, v_speed, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, power);
  }

  public static boolean igSliderFloat(String label, SWIGTYPE_p_float v, float v_min, float v_max, String format, float power) {
    return CImGuiJNI.igSliderFloat(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format, power);
  }

  public static boolean igSliderFloat2(String label, SWIGTYPE_p_float v, float v_min, float v_max, String format, float power) {
    return CImGuiJNI.igSliderFloat2(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format, power);
  }

  public static boolean igSliderFloat3(String label, SWIGTYPE_p_float v, float v_min, float v_max, String format, float power) {
    return CImGuiJNI.igSliderFloat3(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format, power);
  }

  public static boolean igSliderFloat4(String label, SWIGTYPE_p_float v, float v_min, float v_max, String format, float power) {
    return CImGuiJNI.igSliderFloat4(label, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format, power);
  }

  public static boolean igSliderAngle(String label, SWIGTYPE_p_float v_rad, float v_degrees_min, float v_degrees_max, String format) {
    return CImGuiJNI.igSliderAngle(label, SWIGTYPE_p_float.getCPtr(v_rad), v_degrees_min, v_degrees_max, format);
  }

  public static boolean igSliderInt(String label, SWIGTYPE_p_int v, int v_min, int v_max, String format) {
    return CImGuiJNI.igSliderInt(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format);
  }

  public static boolean igSliderInt2(String label, SWIGTYPE_p_int v, int v_min, int v_max, String format) {
    return CImGuiJNI.igSliderInt2(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format);
  }

  public static boolean igSliderInt3(String label, SWIGTYPE_p_int v, int v_min, int v_max, String format) {
    return CImGuiJNI.igSliderInt3(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format);
  }

  public static boolean igSliderInt4(String label, SWIGTYPE_p_int v, int v_min, int v_max, String format) {
    return CImGuiJNI.igSliderInt4(label, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format);
  }

  public static boolean igSliderScalar(String label, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, String format, float power) {
    return CImGuiJNI.igSliderScalar(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, power);
  }

  public static boolean igSliderScalarN(String label, int data_type, SWIGTYPE_p_void p_data, int components, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, String format, float power) {
    return CImGuiJNI.igSliderScalarN(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, power);
  }

  public static boolean igVSliderFloat(String label, ImVec2 size, SWIGTYPE_p_float v, float v_min, float v_max, String format, float power) {
    return CImGuiJNI.igVSliderFloat(label, ImVec2.getCPtr(size), size, SWIGTYPE_p_float.getCPtr(v), v_min, v_max, format, power);
  }

  public static boolean igVSliderInt(String label, ImVec2 size, SWIGTYPE_p_int v, int v_min, int v_max, String format) {
    return CImGuiJNI.igVSliderInt(label, ImVec2.getCPtr(size), size, SWIGTYPE_p_int.getCPtr(v), v_min, v_max, format);
  }

  public static boolean igVSliderScalar(String label, ImVec2 size, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, String format, float power) {
    return CImGuiJNI.igVSliderScalar(label, ImVec2.getCPtr(size), size, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, power);
  }

  public static boolean igInputText(String label, byte[] buf, long buf_size, int flags, InputTextCallback callback) {
    return CImGuiJNI.igInputText(label, buf, buf_size, flags, callback);
  }

  public static boolean igInputTextMultiline(String label, byte[] buf, long buf_size, ImVec2 size, int flags, InputTextCallback callback) {
    return CImGuiJNI.igInputTextMultiline(label, buf, buf_size, ImVec2.getCPtr(size), size, flags, callback);
  }

  public static boolean igInputTextWithHint(String label, String hint, byte[] buf, long buf_size, int flags, InputTextCallback callback) {
    return CImGuiJNI.igInputTextWithHint(label, hint, buf, buf_size, flags, callback);
  }

  public static boolean igInputFloat(String label, SWIGTYPE_p_float v, float step, float step_fast, String format, int flags) {
    return CImGuiJNI.igInputFloat(label, SWIGTYPE_p_float.getCPtr(v), step, step_fast, format, flags);
  }

  public static boolean igInputFloat2(String label, SWIGTYPE_p_float v, String format, int flags) {
    return CImGuiJNI.igInputFloat2(label, SWIGTYPE_p_float.getCPtr(v), format, flags);
  }

  public static boolean igInputFloat3(String label, SWIGTYPE_p_float v, String format, int flags) {
    return CImGuiJNI.igInputFloat3(label, SWIGTYPE_p_float.getCPtr(v), format, flags);
  }

  public static boolean igInputFloat4(String label, SWIGTYPE_p_float v, String format, int flags) {
    return CImGuiJNI.igInputFloat4(label, SWIGTYPE_p_float.getCPtr(v), format, flags);
  }

  public static boolean igInputInt(String label, SWIGTYPE_p_int v, int step, int step_fast, int flags) {
    return CImGuiJNI.igInputInt(label, SWIGTYPE_p_int.getCPtr(v), step, step_fast, flags);
  }

  public static boolean igInputInt2(String label, SWIGTYPE_p_int v, int flags) {
    return CImGuiJNI.igInputInt2(label, SWIGTYPE_p_int.getCPtr(v), flags);
  }

  public static boolean igInputInt3(String label, SWIGTYPE_p_int v, int flags) {
    return CImGuiJNI.igInputInt3(label, SWIGTYPE_p_int.getCPtr(v), flags);
  }

  public static boolean igInputInt4(String label, SWIGTYPE_p_int v, int flags) {
    return CImGuiJNI.igInputInt4(label, SWIGTYPE_p_int.getCPtr(v), flags);
  }

  public static boolean igInputDouble(String label, SWIGTYPE_p_double v, double step, double step_fast, String format, int flags) {
    return CImGuiJNI.igInputDouble(label, SWIGTYPE_p_double.getCPtr(v), step, step_fast, format, flags);
  }

  public static boolean igInputScalar(String label, int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_step, SWIGTYPE_p_void p_step_fast, String format, int flags) {
    return CImGuiJNI.igInputScalar(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_step), SWIGTYPE_p_void.getCPtr(p_step_fast), format, flags);
  }

  public static boolean igInputScalarN(String label, int data_type, SWIGTYPE_p_void p_data, int components, SWIGTYPE_p_void p_step, SWIGTYPE_p_void p_step_fast, String format, int flags) {
    return CImGuiJNI.igInputScalarN(label, data_type, SWIGTYPE_p_void.getCPtr(p_data), components, SWIGTYPE_p_void.getCPtr(p_step), SWIGTYPE_p_void.getCPtr(p_step_fast), format, flags);
  }

  public static boolean igColorEdit3(String label, SWIGTYPE_p_float col, int flags) {
    return CImGuiJNI.igColorEdit3(label, SWIGTYPE_p_float.getCPtr(col), flags);
  }

  public static boolean igColorEdit4(String label, SWIGTYPE_p_float col, int flags) {
    return CImGuiJNI.igColorEdit4(label, SWIGTYPE_p_float.getCPtr(col), flags);
  }

  public static boolean igColorPicker3(String label, SWIGTYPE_p_float col, int flags) {
    return CImGuiJNI.igColorPicker3(label, SWIGTYPE_p_float.getCPtr(col), flags);
  }

  public static boolean igColorPicker4(String label, SWIGTYPE_p_float col, int flags, SWIGTYPE_p_float ref_col) {
    return CImGuiJNI.igColorPicker4(label, SWIGTYPE_p_float.getCPtr(col), flags, SWIGTYPE_p_float.getCPtr(ref_col));
  }

  public static boolean igColorButton(String desc_id, ImVec4 col, int flags, ImVec2 size) {
    return CImGuiJNI.igColorButton(desc_id, ImVec4.getCPtr(col), col, flags, ImVec2.getCPtr(size), size);
  }

  public static void igSetColorEditOptions(int flags) {
    CImGuiJNI.igSetColorEditOptions(flags);
  }

  public static boolean igTreeNodeStr(String label) {
    return CImGuiJNI.igTreeNodeStr(label);
  }

  public static boolean igTreeNodeStrStr(String str_id, String fmt) {
    return CImGuiJNI.igTreeNodeStrStr(str_id, fmt);
  }

  public static boolean igTreeNodePtr(SWIGTYPE_p_void ptr_id, String fmt) {
    return CImGuiJNI.igTreeNodePtr(SWIGTYPE_p_void.getCPtr(ptr_id), fmt);
  }

  public static boolean igTreeNodeExStr(String label, int flags) {
    return CImGuiJNI.igTreeNodeExStr(label, flags);
  }

  public static boolean igTreeNodeExStrStr(String str_id, int flags, String fmt) {
    return CImGuiJNI.igTreeNodeExStrStr(str_id, flags, fmt);
  }

  public static boolean igTreeNodeExPtr(SWIGTYPE_p_void ptr_id, int flags, String fmt) {
    return CImGuiJNI.igTreeNodeExPtr(SWIGTYPE_p_void.getCPtr(ptr_id), flags, fmt);
  }

  public static void igTreePushStr(String str_id) {
    CImGuiJNI.igTreePushStr(str_id);
  }

  public static void igTreePushPtr(SWIGTYPE_p_void ptr_id) {
    CImGuiJNI.igTreePushPtr(SWIGTYPE_p_void.getCPtr(ptr_id));
  }

  public static void igTreePop() {
    CImGuiJNI.igTreePop();
  }

  public static float igGetTreeNodeToLabelSpacing() {
    return CImGuiJNI.igGetTreeNodeToLabelSpacing();
  }

  public static boolean igCollapsingHeaderTreeNodeFlags(String label, int flags) {
    return CImGuiJNI.igCollapsingHeaderTreeNodeFlags(label, flags);
  }

  public static boolean igCollapsingHeaderBoolPtr(String label, SWIGTYPE_p_bool p_open, int flags) {
    return CImGuiJNI.igCollapsingHeaderBoolPtr(label, SWIGTYPE_p_bool.getCPtr(p_open), flags);
  }

  public static void igSetNextItemOpen(boolean is_open, int cond) {
    CImGuiJNI.igSetNextItemOpen(is_open, cond);
  }

  public static boolean igSelectableBool(String label, boolean selected, int flags, ImVec2 size) {
    return CImGuiJNI.igSelectableBool(label, selected, flags, ImVec2.getCPtr(size), size);
  }

  public static boolean igSelectableBoolPtr(String label, SWIGTYPE_p_bool p_selected, int flags, ImVec2 size) {
    return CImGuiJNI.igSelectableBoolPtr(label, SWIGTYPE_p_bool.getCPtr(p_selected), flags, ImVec2.getCPtr(size), size);
  }

  public static boolean igListBoxStr_arr(String label, SWIGTYPE_p_int current_item, String[] items, int height_in_items) {
    return CImGuiJNI.igListBoxStr_arr(label, SWIGTYPE_p_int.getCPtr(current_item), items, height_in_items);
  }

  public static boolean igListBoxFnBoolPtr(String label, SWIGTYPE_p_int current_item, ItemsGetter items_getter, int items_count, int height_in_items) {
    return CImGuiJNI.igListBoxFnBoolPtr(label, SWIGTYPE_p_int.getCPtr(current_item), items_getter, items_count, height_in_items);
  }

  public static boolean igListBoxHeaderVec2(String label, ImVec2 size) {
    return CImGuiJNI.igListBoxHeaderVec2(label, ImVec2.getCPtr(size), size);
  }

  public static boolean igListBoxHeaderInt(String label, int items_count, int height_in_items) {
    return CImGuiJNI.igListBoxHeaderInt(label, items_count, height_in_items);
  }

  public static void igListBoxFooter() {
    CImGuiJNI.igListBoxFooter();
  }

  public static void igPlotLinesFloatPtr(String label, SWIGTYPE_p_float values, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) {
    CImGuiJNI.igPlotLinesFloatPtr(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size), graph_size, stride);
  }

  public static void igPlotLinesFnFloatPtr(String label, ValuesGetter values_getter, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, ImVec2 graph_size) {
    CImGuiJNI.igPlotLinesFnFloatPtr(label, values_getter, values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size), graph_size);
  }

  public static void igPlotHistogramFloatPtr(String label, SWIGTYPE_p_float values, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) {
    CImGuiJNI.igPlotHistogramFloatPtr(label, SWIGTYPE_p_float.getCPtr(values), values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size), graph_size, stride);
  }

  public static void igPlotHistogramFnFloatPtr(String label, ValuesGetter values_getter, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, ImVec2 graph_size) {
    CImGuiJNI.igPlotHistogramFnFloatPtr(label, values_getter, values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(graph_size), graph_size);
  }

  public static void igValueBool(String prefix, boolean b) {
    CImGuiJNI.igValueBool(prefix, b);
  }

  public static void igValueInt(String prefix, int v) {
    CImGuiJNI.igValueInt(prefix, v);
  }

  public static void igValueUint(String prefix, long v) {
    CImGuiJNI.igValueUint(prefix, v);
  }

  public static void igValueFloat(String prefix, float v, String float_format) {
    CImGuiJNI.igValueFloat(prefix, v, float_format);
  }

  public static boolean igBeginMenuBar() {
    return CImGuiJNI.igBeginMenuBar();
  }

  public static void igEndMenuBar() {
    CImGuiJNI.igEndMenuBar();
  }

  public static boolean igBeginMainMenuBar() {
    return CImGuiJNI.igBeginMainMenuBar();
  }

  public static void igEndMainMenuBar() {
    CImGuiJNI.igEndMainMenuBar();
  }

  public static boolean igBeginMenu(String label, boolean enabled) {
    return CImGuiJNI.igBeginMenu(label, enabled);
  }

  public static void igEndMenu() {
    CImGuiJNI.igEndMenu();
  }

  public static boolean igMenuItemBool(String label, String shortcut, boolean selected, boolean enabled) {
    return CImGuiJNI.igMenuItemBool(label, shortcut, selected, enabled);
  }

  public static boolean igMenuItemBoolPtr(String label, String shortcut, SWIGTYPE_p_bool p_selected, boolean enabled) {
    return CImGuiJNI.igMenuItemBoolPtr(label, shortcut, SWIGTYPE_p_bool.getCPtr(p_selected), enabled);
  }

  public static void igBeginTooltip() {
    CImGuiJNI.igBeginTooltip();
  }

  public static void igEndTooltip() {
    CImGuiJNI.igEndTooltip();
  }

  public static void igSetTooltip(String fmt) {
    CImGuiJNI.igSetTooltip(fmt);
  }

  public static void igOpenPopup(String str_id) {
    CImGuiJNI.igOpenPopup(str_id);
  }

  public static boolean igBeginPopup(String str_id, int flags) {
    return CImGuiJNI.igBeginPopup(str_id, flags);
  }

  public static boolean igBeginPopupContextItem(String str_id, int mouse_button) {
    return CImGuiJNI.igBeginPopupContextItem(str_id, mouse_button);
  }

  public static boolean igBeginPopupContextWindow(String str_id, int mouse_button, boolean also_over_items) {
    return CImGuiJNI.igBeginPopupContextWindow(str_id, mouse_button, also_over_items);
  }

  public static boolean igBeginPopupContextVoid(String str_id, int mouse_button) {
    return CImGuiJNI.igBeginPopupContextVoid(str_id, mouse_button);
  }

  public static boolean igBeginPopupModal(String name, SWIGTYPE_p_bool p_open, int flags) {
    return CImGuiJNI.igBeginPopupModal(name, SWIGTYPE_p_bool.getCPtr(p_open), flags);
  }

  public static void igEndPopup() {
    CImGuiJNI.igEndPopup();
  }

  public static boolean igOpenPopupOnItemClick(String str_id, int mouse_button) {
    return CImGuiJNI.igOpenPopupOnItemClick(str_id, mouse_button);
  }

  public static boolean igIsPopupOpenStr(String str_id) {
    return CImGuiJNI.igIsPopupOpenStr(str_id);
  }

  public static void igCloseCurrentPopup() {
    CImGuiJNI.igCloseCurrentPopup();
  }

  public static void igColumns(int count, String id, boolean border) {
    CImGuiJNI.igColumns(count, id, border);
  }

  public static void igNextColumn() {
    CImGuiJNI.igNextColumn();
  }

  public static int igGetColumnIndex() {
    return CImGuiJNI.igGetColumnIndex();
  }

  public static float igGetColumnWidth(int column_index) {
    return CImGuiJNI.igGetColumnWidth(column_index);
  }

  public static void igSetColumnWidth(int column_index, float width) {
    CImGuiJNI.igSetColumnWidth(column_index, width);
  }

  public static float igGetColumnOffset(int column_index) {
    return CImGuiJNI.igGetColumnOffset(column_index);
  }

  public static void igSetColumnOffset(int column_index, float offset_x) {
    CImGuiJNI.igSetColumnOffset(column_index, offset_x);
  }

  public static int igGetColumnsCount() {
    return CImGuiJNI.igGetColumnsCount();
  }

  public static boolean igBeginTabBar(String str_id, int flags) {
    return CImGuiJNI.igBeginTabBar(str_id, flags);
  }

  public static void igEndTabBar() {
    CImGuiJNI.igEndTabBar();
  }

  public static boolean igBeginTabItem(String label, SWIGTYPE_p_bool p_open, int flags) {
    return CImGuiJNI.igBeginTabItem(label, SWIGTYPE_p_bool.getCPtr(p_open), flags);
  }

  public static void igEndTabItem() {
    CImGuiJNI.igEndTabItem();
  }

  public static void igSetTabItemClosed(String tab_or_docked_window_label) {
    CImGuiJNI.igSetTabItemClosed(tab_or_docked_window_label);
  }

  public static void igDockSpace(long id, ImVec2 size, int flags, ImGuiWindowClass window_class) {
    CImGuiJNI.igDockSpace(id, ImVec2.getCPtr(size), size, flags, ImGuiWindowClass.getCPtr(window_class), window_class);
  }

  public static long igDockSpaceOverViewport(ImGuiViewport viewport, int flags, ImGuiWindowClass window_class) {
    return CImGuiJNI.igDockSpaceOverViewport(ImGuiViewport.getCPtr(viewport), viewport, flags, ImGuiWindowClass.getCPtr(window_class), window_class);
  }

  public static void igSetNextWindowDockID(long dock_id, int cond) {
    CImGuiJNI.igSetNextWindowDockID(dock_id, cond);
  }

  public static void igSetNextWindowClass(ImGuiWindowClass window_class) {
    CImGuiJNI.igSetNextWindowClass(ImGuiWindowClass.getCPtr(window_class), window_class);
  }

  public static long igGetWindowDockID() {
    return CImGuiJNI.igGetWindowDockID();
  }

  public static boolean igIsWindowDocked() {
    return CImGuiJNI.igIsWindowDocked();
  }

  public static void igLogToTTY(int auto_open_depth) {
    CImGuiJNI.igLogToTTY(auto_open_depth);
  }

  public static void igLogToFile(int auto_open_depth, String filename) {
    CImGuiJNI.igLogToFile(auto_open_depth, filename);
  }

  public static void igLogToClipboard(int auto_open_depth) {
    CImGuiJNI.igLogToClipboard(auto_open_depth);
  }

  public static void igLogFinish() {
    CImGuiJNI.igLogFinish();
  }

  public static void igLogButtons() {
    CImGuiJNI.igLogButtons();
  }

  public static boolean igBeginDragDropSource(int flags) {
    return CImGuiJNI.igBeginDragDropSource(flags);
  }

  public static boolean igSetDragDropPayload(String type, SWIGTYPE_p_void data, long sz, int cond) {
    return CImGuiJNI.igSetDragDropPayload(type, SWIGTYPE_p_void.getCPtr(data), sz, cond);
  }

  public static void igEndDragDropSource() {
    CImGuiJNI.igEndDragDropSource();
  }

  public static boolean igBeginDragDropTarget() {
    return CImGuiJNI.igBeginDragDropTarget();
  }

  public static ImGuiPayload igAcceptDragDropPayload(String type, int flags) {
    long cPtr = CImGuiJNI.igAcceptDragDropPayload(type, flags);
    return (cPtr == 0) ? null : new ImGuiPayload(cPtr, false);
  }

  public static void igEndDragDropTarget() {
    CImGuiJNI.igEndDragDropTarget();
  }

  public static ImGuiPayload igGetDragDropPayload() {
    long cPtr = CImGuiJNI.igGetDragDropPayload();
    return (cPtr == 0) ? null : new ImGuiPayload(cPtr, false);
  }

  public static void igPushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, boolean intersect_with_current_clip_rect) {
    CImGuiJNI.igPushClipRect(ImVec2.getCPtr(clip_rect_min), clip_rect_min, ImVec2.getCPtr(clip_rect_max), clip_rect_max, intersect_with_current_clip_rect);
  }

  public static void igPopClipRect() {
    CImGuiJNI.igPopClipRect();
  }

  public static void igSetItemDefaultFocus() {
    CImGuiJNI.igSetItemDefaultFocus();
  }

  public static void igSetKeyboardFocusHere(int offset) {
    CImGuiJNI.igSetKeyboardFocusHere(offset);
  }

  public static boolean igIsItemHovered(int flags) {
    return CImGuiJNI.igIsItemHovered(flags);
  }

  public static boolean igIsItemActive() {
    return CImGuiJNI.igIsItemActive();
  }

  public static boolean igIsItemFocused() {
    return CImGuiJNI.igIsItemFocused();
  }

  public static boolean igIsItemClicked(int mouse_button) {
    return CImGuiJNI.igIsItemClicked(mouse_button);
  }

  public static boolean igIsItemVisible() {
    return CImGuiJNI.igIsItemVisible();
  }

  public static boolean igIsItemEdited() {
    return CImGuiJNI.igIsItemEdited();
  }

  public static boolean igIsItemActivated() {
    return CImGuiJNI.igIsItemActivated();
  }

  public static boolean igIsItemDeactivated() {
    return CImGuiJNI.igIsItemDeactivated();
  }

  public static boolean igIsItemDeactivatedAfterEdit() {
    return CImGuiJNI.igIsItemDeactivatedAfterEdit();
  }

  public static boolean igIsItemToggledOpen() {
    return CImGuiJNI.igIsItemToggledOpen();
  }

  public static boolean igIsAnyItemHovered() {
    return CImGuiJNI.igIsAnyItemHovered();
  }

  public static boolean igIsAnyItemActive() {
    return CImGuiJNI.igIsAnyItemActive();
  }

  public static boolean igIsAnyItemFocused() {
    return CImGuiJNI.igIsAnyItemFocused();
  }

  public static void igGetItemRectMin(ImVec2 pOut) {
    CImGuiJNI.igGetItemRectMin(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igGetItemRectMax(ImVec2 pOut) {
    CImGuiJNI.igGetItemRectMax(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igGetItemRectSize(ImVec2 pOut) {
    CImGuiJNI.igGetItemRectSize(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igSetItemAllowOverlap() {
    CImGuiJNI.igSetItemAllowOverlap();
  }

  public static boolean igIsRectVisibleNil(ImVec2 size) {
    return CImGuiJNI.igIsRectVisibleNil(ImVec2.getCPtr(size), size);
  }

  public static boolean igIsRectVisibleVec2(ImVec2 rect_min, ImVec2 rect_max) {
    return CImGuiJNI.igIsRectVisibleVec2(ImVec2.getCPtr(rect_min), rect_min, ImVec2.getCPtr(rect_max), rect_max);
  }

  public static double igGetTime() {
    return CImGuiJNI.igGetTime();
  }

  public static int igGetFrameCount() {
    return CImGuiJNI.igGetFrameCount();
  }

  public static ImDrawList igGetBackgroundDrawListNil() {
    long cPtr = CImGuiJNI.igGetBackgroundDrawListNil();
    return (cPtr == 0) ? null : new ImDrawList(cPtr, false);
  }

  public static ImDrawList igGetForegroundDrawListNil() {
    long cPtr = CImGuiJNI.igGetForegroundDrawListNil();
    return (cPtr == 0) ? null : new ImDrawList(cPtr, false);
  }

  public static ImDrawList igGetBackgroundDrawListViewportPtr(ImGuiViewport viewport) {
    long cPtr = CImGuiJNI.igGetBackgroundDrawListViewportPtr(ImGuiViewport.getCPtr(viewport), viewport);
    return (cPtr == 0) ? null : new ImDrawList(cPtr, false);
  }

  public static ImDrawList igGetForegroundDrawListViewportPtr(ImGuiViewport viewport) {
    long cPtr = CImGuiJNI.igGetForegroundDrawListViewportPtr(ImGuiViewport.getCPtr(viewport), viewport);
    return (cPtr == 0) ? null : new ImDrawList(cPtr, false);
  }

  public static ImDrawListSharedData igGetDrawListSharedData() {
    long cPtr = CImGuiJNI.igGetDrawListSharedData();
    return (cPtr == 0) ? null : new ImDrawListSharedData(cPtr, false);
  }

  public static String igGetStyleColorName(int idx) {
    return CImGuiJNI.igGetStyleColorName(idx);
  }

  public static void igSetStateStorage(ImGuiStorage storage) {
    CImGuiJNI.igSetStateStorage(ImGuiStorage.getCPtr(storage), storage);
  }

  public static ImGuiStorage igGetStateStorage() {
    long cPtr = CImGuiJNI.igGetStateStorage();
    return (cPtr == 0) ? null : new ImGuiStorage(cPtr, false);
  }

  public static void igCalcListClipping(int items_count, float items_height, SWIGTYPE_p_int out_items_display_start, SWIGTYPE_p_int out_items_display_end) {
    CImGuiJNI.igCalcListClipping(items_count, items_height, SWIGTYPE_p_int.getCPtr(out_items_display_start), SWIGTYPE_p_int.getCPtr(out_items_display_end));
  }

  public static boolean igBeginChildFrame(long id, ImVec2 size, int flags) {
    return CImGuiJNI.igBeginChildFrame(id, ImVec2.getCPtr(size), size, flags);
  }

  public static void igEndChildFrame() {
    CImGuiJNI.igEndChildFrame();
  }

  public static void igCalcTextSize(ImVec2 pOut, String text, String text_end, boolean hide_text_after_double_hash, float wrap_width) {
    CImGuiJNI.igCalcTextSize(ImVec2.getCPtr(pOut), pOut, text, text_end, hide_text_after_double_hash, wrap_width);
  }

  public static void igColorConvertU32ToFloat4(ImVec4 pOut, long in) {
    CImGuiJNI.igColorConvertU32ToFloat4(ImVec4.getCPtr(pOut), pOut, in);
  }

  public static long igColorConvertFloat4ToU32(ImVec4 in) {
    return CImGuiJNI.igColorConvertFloat4ToU32(ImVec4.getCPtr(in), in);
  }

  public static int igGetKeyIndex(int imgui_key) {
    return CImGuiJNI.igGetKeyIndex(imgui_key);
  }

  public static boolean igIsKeyDown(int user_key_index) {
    return CImGuiJNI.igIsKeyDown(user_key_index);
  }

  public static boolean igIsKeyPressed(int user_key_index, boolean repeat) {
    return CImGuiJNI.igIsKeyPressed(user_key_index, repeat);
  }

  public static boolean igIsKeyReleased(int user_key_index) {
    return CImGuiJNI.igIsKeyReleased(user_key_index);
  }

  public static int igGetKeyPressedAmount(int key_index, float repeat_delay, float rate) {
    return CImGuiJNI.igGetKeyPressedAmount(key_index, repeat_delay, rate);
  }

  public static void igCaptureKeyboardFromApp(boolean want_capture_keyboard_value) {
    CImGuiJNI.igCaptureKeyboardFromApp(want_capture_keyboard_value);
  }

  public static boolean igIsMouseDown(int button) {
    return CImGuiJNI.igIsMouseDown(button);
  }

  public static boolean igIsMouseClicked(int button, boolean repeat) {
    return CImGuiJNI.igIsMouseClicked(button, repeat);
  }

  public static boolean igIsMouseReleased(int button) {
    return CImGuiJNI.igIsMouseReleased(button);
  }

  public static boolean igIsMouseDoubleClicked(int button) {
    return CImGuiJNI.igIsMouseDoubleClicked(button);
  }

  public static boolean igIsMouseHoveringRect(ImVec2 r_min, ImVec2 r_max, boolean clip) {
    return CImGuiJNI.igIsMouseHoveringRect(ImVec2.getCPtr(r_min), r_min, ImVec2.getCPtr(r_max), r_max, clip);
  }

  public static boolean igIsMousePosValid(ImVec2 mouse_pos) {
    return CImGuiJNI.igIsMousePosValid(ImVec2.getCPtr(mouse_pos), mouse_pos);
  }

  public static boolean igIsAnyMouseDown() {
    return CImGuiJNI.igIsAnyMouseDown();
  }

  public static void igGetMousePos(ImVec2 pOut) {
    CImGuiJNI.igGetMousePos(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igGetMousePosOnOpeningCurrentPopup(ImVec2 pOut) {
    CImGuiJNI.igGetMousePosOnOpeningCurrentPopup(ImVec2.getCPtr(pOut), pOut);
  }

  public static boolean igIsMouseDragging(int button, float lock_threshold) {
    return CImGuiJNI.igIsMouseDragging(button, lock_threshold);
  }

  public static void igGetMouseDragDelta(ImVec2 pOut, int button, float lock_threshold) {
    CImGuiJNI.igGetMouseDragDelta(ImVec2.getCPtr(pOut), pOut, button, lock_threshold);
  }

  public static void igResetMouseDragDelta(int button) {
    CImGuiJNI.igResetMouseDragDelta(button);
  }

  public static int igGetMouseCursor() {
    return CImGuiJNI.igGetMouseCursor();
  }

  public static void igSetMouseCursor(int cursor_type) {
    CImGuiJNI.igSetMouseCursor(cursor_type);
  }

  public static void igCaptureMouseFromApp(boolean want_capture_mouse_value) {
    CImGuiJNI.igCaptureMouseFromApp(want_capture_mouse_value);
  }

  public static String igGetClipboardText() {
    return CImGuiJNI.igGetClipboardText();
  }

  public static void igSetClipboardText(String text) {
    CImGuiJNI.igSetClipboardText(text);
  }

  public static void igLoadIniSettingsFromDisk(String ini_filename) {
    CImGuiJNI.igLoadIniSettingsFromDisk(ini_filename);
  }

  public static void igLoadIniSettingsFromMemory(String ini_data, long ini_size) {
    CImGuiJNI.igLoadIniSettingsFromMemory(ini_data, ini_size);
  }

  public static void igSaveIniSettingsToDisk(String ini_filename) {
    CImGuiJNI.igSaveIniSettingsToDisk(ini_filename);
  }

  public static String igSaveIniSettingsToMemory(SWIGTYPE_p_size_t out_ini_size) {
    return CImGuiJNI.igSaveIniSettingsToMemory(SWIGTYPE_p_size_t.getCPtr(out_ini_size));
  }

  public static boolean igDebugCheckVersionAndDataLayout(String version_str, long sz_io, long sz_style, long sz_vec2, long sz_vec4, long sz_drawvert, long sz_drawidx) {
    return CImGuiJNI.igDebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
  }

  public static void igSetAllocatorFunctions(SWIGTYPE_p_f_size_t_p_void__p_void alloc_func, SWIGTYPE_p_f_p_void_p_void__void free_func, SWIGTYPE_p_void user_data) {
    CImGuiJNI.igSetAllocatorFunctions(SWIGTYPE_p_f_size_t_p_void__p_void.getCPtr(alloc_func), SWIGTYPE_p_f_p_void_p_void__void.getCPtr(free_func), SWIGTYPE_p_void.getCPtr(user_data));
  }

  public static SWIGTYPE_p_void igMemAlloc(long size) {
    long cPtr = CImGuiJNI.igMemAlloc(size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void igMemFree(SWIGTYPE_p_void ptr) {
    CImGuiJNI.igMemFree(SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static ImGuiPlatformIO igGetPlatformIO() {
    long cPtr = CImGuiJNI.igGetPlatformIO();
    return (cPtr == 0) ? null : new ImGuiPlatformIO(cPtr, false);
  }

  public static ImGuiViewport igGetMainViewport() {
    long cPtr = CImGuiJNI.igGetMainViewport();
    return (cPtr == 0) ? null : new ImGuiViewport(cPtr, false);
  }

  public static void igUpdatePlatformWindows() {
    CImGuiJNI.igUpdatePlatformWindows();
  }

  public static void igRenderPlatformWindowsDefault(SWIGTYPE_p_void platform_render_arg, SWIGTYPE_p_void renderer_render_arg) {
    CImGuiJNI.igRenderPlatformWindowsDefault(SWIGTYPE_p_void.getCPtr(platform_render_arg), SWIGTYPE_p_void.getCPtr(renderer_render_arg));
  }

  public static void igDestroyPlatformWindows() {
    CImGuiJNI.igDestroyPlatformWindows();
  }

  public static ImGuiViewport igFindViewportByID(long id) {
    long cPtr = CImGuiJNI.igFindViewportByID(id);
    return (cPtr == 0) ? null : new ImGuiViewport(cPtr, false);
  }

  public static ImGuiViewport igFindViewportByPlatformHandle(SWIGTYPE_p_void platform_handle) {
    long cPtr = CImGuiJNI.igFindViewportByPlatformHandle(SWIGTYPE_p_void.getCPtr(platform_handle));
    return (cPtr == 0) ? null : new ImGuiViewport(cPtr, false);
  }

  public static ImGuiStyle ImGuiStyle_ImGuiStyle() {
    long cPtr = CImGuiJNI.ImGuiStyle_ImGuiStyle();
    return (cPtr == 0) ? null : new ImGuiStyle(cPtr, false);
  }

  public static void ImGuiStyle_destroy(ImGuiStyle self) {
    CImGuiJNI.ImGuiStyle_destroy(ImGuiStyle.getCPtr(self), self);
  }

  public static void ImGuiStyle_ScaleAllSizes(ImGuiStyle self, float scale_factor) {
    CImGuiJNI.ImGuiStyle_ScaleAllSizes(ImGuiStyle.getCPtr(self), self, scale_factor);
  }

  public static void ImGuiIO_AddInputCharacter(ImGuiIO self, long c) {
    CImGuiJNI.ImGuiIO_AddInputCharacter(ImGuiIO.getCPtr(self), self, c);
  }

  public static void ImGuiIO_AddInputCharacterUTF16(ImGuiIO self, int c) {
    CImGuiJNI.ImGuiIO_AddInputCharacterUTF16(ImGuiIO.getCPtr(self), self, c);
  }

  public static void ImGuiIO_AddInputCharactersUTF8(ImGuiIO self, String str) {
    CImGuiJNI.ImGuiIO_AddInputCharactersUTF8(ImGuiIO.getCPtr(self), self, str);
  }

  public static void ImGuiIO_ClearInputCharacters(ImGuiIO self) {
    CImGuiJNI.ImGuiIO_ClearInputCharacters(ImGuiIO.getCPtr(self), self);
  }

  public static ImGuiIO ImGuiIO_ImGuiIO() {
    long cPtr = CImGuiJNI.ImGuiIO_ImGuiIO();
    return (cPtr == 0) ? null : new ImGuiIO(cPtr, false);
  }

  public static void ImGuiIO_destroy(ImGuiIO self) {
    CImGuiJNI.ImGuiIO_destroy(ImGuiIO.getCPtr(self), self);
  }

  public static ImGuiInputTextCallbackData ImGuiInputTextCallbackData_ImGuiInputTextCallbackData() {
    long cPtr = CImGuiJNI.ImGuiInputTextCallbackData_ImGuiInputTextCallbackData();
    return (cPtr == 0) ? null : new ImGuiInputTextCallbackData(cPtr, false);
  }

  public static void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData self) {
    CImGuiJNI.ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData.getCPtr(self), self);
  }

  public static void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData self, int pos, int bytes_count) {
    CImGuiJNI.ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData.getCPtr(self), self, pos, bytes_count);
  }

  public static void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData self, int pos, String text, String text_end) {
    CImGuiJNI.ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData.getCPtr(self), self, pos, text, text_end);
  }

  public static boolean ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData self) {
    return CImGuiJNI.ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData.getCPtr(self), self);
  }

  public static ImGuiWindowClass ImGuiWindowClass_ImGuiWindowClass() {
    long cPtr = CImGuiJNI.ImGuiWindowClass_ImGuiWindowClass();
    return (cPtr == 0) ? null : new ImGuiWindowClass(cPtr, false);
  }

  public static void ImGuiWindowClass_destroy(ImGuiWindowClass self) {
    CImGuiJNI.ImGuiWindowClass_destroy(ImGuiWindowClass.getCPtr(self), self);
  }

  public static ImGuiPayload ImGuiPayload_ImGuiPayload() {
    long cPtr = CImGuiJNI.ImGuiPayload_ImGuiPayload();
    return (cPtr == 0) ? null : new ImGuiPayload(cPtr, false);
  }

  public static void ImGuiPayload_destroy(ImGuiPayload self) {
    CImGuiJNI.ImGuiPayload_destroy(ImGuiPayload.getCPtr(self), self);
  }

  public static void ImGuiPayload_Clear(ImGuiPayload self) {
    CImGuiJNI.ImGuiPayload_Clear(ImGuiPayload.getCPtr(self), self);
  }

  public static boolean ImGuiPayload_IsDataType(ImGuiPayload self, String type) {
    return CImGuiJNI.ImGuiPayload_IsDataType(ImGuiPayload.getCPtr(self), self, type);
  }

  public static boolean ImGuiPayload_IsPreview(ImGuiPayload self) {
    return CImGuiJNI.ImGuiPayload_IsPreview(ImGuiPayload.getCPtr(self), self);
  }

  public static boolean ImGuiPayload_IsDelivery(ImGuiPayload self) {
    return CImGuiJNI.ImGuiPayload_IsDelivery(ImGuiPayload.getCPtr(self), self);
  }

  public static ImGuiOnceUponAFrame ImGuiOnceUponAFrame_ImGuiOnceUponAFrame() {
    long cPtr = CImGuiJNI.ImGuiOnceUponAFrame_ImGuiOnceUponAFrame();
    return (cPtr == 0) ? null : new ImGuiOnceUponAFrame(cPtr, false);
  }

  public static void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame self) {
    CImGuiJNI.ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame.getCPtr(self), self);
  }

  public static ImGuiTextFilter ImGuiTextFilter_ImGuiTextFilter(String default_filter) {
    long cPtr = CImGuiJNI.ImGuiTextFilter_ImGuiTextFilter(default_filter);
    return (cPtr == 0) ? null : new ImGuiTextFilter(cPtr, false);
  }

  public static void ImGuiTextFilter_destroy(ImGuiTextFilter self) {
    CImGuiJNI.ImGuiTextFilter_destroy(ImGuiTextFilter.getCPtr(self), self);
  }

  public static boolean ImGuiTextFilter_Draw(ImGuiTextFilter self, String label, float width) {
    return CImGuiJNI.ImGuiTextFilter_Draw(ImGuiTextFilter.getCPtr(self), self, label, width);
  }

  public static boolean ImGuiTextFilter_PassFilter(ImGuiTextFilter self, String text, String text_end) {
    return CImGuiJNI.ImGuiTextFilter_PassFilter(ImGuiTextFilter.getCPtr(self), self, text, text_end);
  }

  public static void ImGuiTextFilter_Build(ImGuiTextFilter self) {
    CImGuiJNI.ImGuiTextFilter_Build(ImGuiTextFilter.getCPtr(self), self);
  }

  public static void ImGuiTextFilter_Clear(ImGuiTextFilter self) {
    CImGuiJNI.ImGuiTextFilter_Clear(ImGuiTextFilter.getCPtr(self), self);
  }

  public static boolean ImGuiTextFilter_IsActive(ImGuiTextFilter self) {
    return CImGuiJNI.ImGuiTextFilter_IsActive(ImGuiTextFilter.getCPtr(self), self);
  }

  public static ImGuiTextRange ImGuiTextRange_ImGuiTextRangeNil() {
    long cPtr = CImGuiJNI.ImGuiTextRange_ImGuiTextRangeNil();
    return (cPtr == 0) ? null : new ImGuiTextRange(cPtr, false);
  }

  public static void ImGuiTextRange_destroy(ImGuiTextRange self) {
    CImGuiJNI.ImGuiTextRange_destroy(ImGuiTextRange.getCPtr(self), self);
  }

  public static ImGuiTextRange ImGuiTextRange_ImGuiTextRangeStr(String _b, String _e) {
    long cPtr = CImGuiJNI.ImGuiTextRange_ImGuiTextRangeStr(_b, _e);
    return (cPtr == 0) ? null : new ImGuiTextRange(cPtr, false);
  }

  public static boolean ImGuiTextRange_empty(ImGuiTextRange self) {
    return CImGuiJNI.ImGuiTextRange_empty(ImGuiTextRange.getCPtr(self), self);
  }

  public static void ImGuiTextRange_split(ImGuiTextRange self, char separator, ImVector_ImGuiTextRange out) {
    CImGuiJNI.ImGuiTextRange_split(ImGuiTextRange.getCPtr(self), self, separator, ImVector_ImGuiTextRange.getCPtr(out), out);
  }

  public static ImGuiTextBuffer ImGuiTextBuffer_ImGuiTextBuffer() {
    long cPtr = CImGuiJNI.ImGuiTextBuffer_ImGuiTextBuffer();
    return (cPtr == 0) ? null : new ImGuiTextBuffer(cPtr, false);
  }

  public static void ImGuiTextBuffer_destroy(ImGuiTextBuffer self) {
    CImGuiJNI.ImGuiTextBuffer_destroy(ImGuiTextBuffer.getCPtr(self), self);
  }

  public static String ImGuiTextBuffer_begin(ImGuiTextBuffer self) {
    return CImGuiJNI.ImGuiTextBuffer_begin(ImGuiTextBuffer.getCPtr(self), self);
  }

  public static String ImGuiTextBuffer_end(ImGuiTextBuffer self) {
    return CImGuiJNI.ImGuiTextBuffer_end(ImGuiTextBuffer.getCPtr(self), self);
  }

  public static int ImGuiTextBuffer_size(ImGuiTextBuffer self) {
    return CImGuiJNI.ImGuiTextBuffer_size(ImGuiTextBuffer.getCPtr(self), self);
  }

  public static boolean ImGuiTextBuffer_empty(ImGuiTextBuffer self) {
    return CImGuiJNI.ImGuiTextBuffer_empty(ImGuiTextBuffer.getCPtr(self), self);
  }

  public static void ImGuiTextBuffer_clear(ImGuiTextBuffer self) {
    CImGuiJNI.ImGuiTextBuffer_clear(ImGuiTextBuffer.getCPtr(self), self);
  }

  public static void ImGuiTextBuffer_reserve(ImGuiTextBuffer self, int capacity) {
    CImGuiJNI.ImGuiTextBuffer_reserve(ImGuiTextBuffer.getCPtr(self), self, capacity);
  }

  public static String ImGuiTextBuffer_c_str(ImGuiTextBuffer self) {
    return CImGuiJNI.ImGuiTextBuffer_c_str(ImGuiTextBuffer.getCPtr(self), self);
  }

  public static void ImGuiTextBuffer_append(ImGuiTextBuffer self, String str, String str_end) {
    CImGuiJNI.ImGuiTextBuffer_append(ImGuiTextBuffer.getCPtr(self), self, str, str_end);
  }

  public static ImGuiStoragePair ImGuiStoragePair_ImGuiStoragePairInt(long _key, int _val_i) {
    long cPtr = CImGuiJNI.ImGuiStoragePair_ImGuiStoragePairInt(_key, _val_i);
    return (cPtr == 0) ? null : new ImGuiStoragePair(cPtr, false);
  }

  public static void ImGuiStoragePair_destroy(ImGuiStoragePair self) {
    CImGuiJNI.ImGuiStoragePair_destroy(ImGuiStoragePair.getCPtr(self), self);
  }

  public static ImGuiStoragePair ImGuiStoragePair_ImGuiStoragePairFloat(long _key, float _val_f) {
    long cPtr = CImGuiJNI.ImGuiStoragePair_ImGuiStoragePairFloat(_key, _val_f);
    return (cPtr == 0) ? null : new ImGuiStoragePair(cPtr, false);
  }

  public static ImGuiStoragePair ImGuiStoragePair_ImGuiStoragePairPtr(long _key, SWIGTYPE_p_void _val_p) {
    long cPtr = CImGuiJNI.ImGuiStoragePair_ImGuiStoragePairPtr(_key, SWIGTYPE_p_void.getCPtr(_val_p));
    return (cPtr == 0) ? null : new ImGuiStoragePair(cPtr, false);
  }

  public static void ImGuiStorage_Clear(ImGuiStorage self) {
    CImGuiJNI.ImGuiStorage_Clear(ImGuiStorage.getCPtr(self), self);
  }

  public static int ImGuiStorage_GetInt(ImGuiStorage self, long key, int default_val) {
    return CImGuiJNI.ImGuiStorage_GetInt(ImGuiStorage.getCPtr(self), self, key, default_val);
  }

  public static void ImGuiStorage_SetInt(ImGuiStorage self, long key, int val) {
    CImGuiJNI.ImGuiStorage_SetInt(ImGuiStorage.getCPtr(self), self, key, val);
  }

  public static boolean ImGuiStorage_GetBool(ImGuiStorage self, long key, boolean default_val) {
    return CImGuiJNI.ImGuiStorage_GetBool(ImGuiStorage.getCPtr(self), self, key, default_val);
  }

  public static void ImGuiStorage_SetBool(ImGuiStorage self, long key, boolean val) {
    CImGuiJNI.ImGuiStorage_SetBool(ImGuiStorage.getCPtr(self), self, key, val);
  }

  public static float ImGuiStorage_GetFloat(ImGuiStorage self, long key, float default_val) {
    return CImGuiJNI.ImGuiStorage_GetFloat(ImGuiStorage.getCPtr(self), self, key, default_val);
  }

  public static void ImGuiStorage_SetFloat(ImGuiStorage self, long key, float val) {
    CImGuiJNI.ImGuiStorage_SetFloat(ImGuiStorage.getCPtr(self), self, key, val);
  }

  public static SWIGTYPE_p_void ImGuiStorage_GetVoidPtr(ImGuiStorage self, long key) {
    long cPtr = CImGuiJNI.ImGuiStorage_GetVoidPtr(ImGuiStorage.getCPtr(self), self, key);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void ImGuiStorage_SetVoidPtr(ImGuiStorage self, long key, SWIGTYPE_p_void val) {
    CImGuiJNI.ImGuiStorage_SetVoidPtr(ImGuiStorage.getCPtr(self), self, key, SWIGTYPE_p_void.getCPtr(val));
  }

  public static SWIGTYPE_p_int ImGuiStorage_GetIntRef(ImGuiStorage self, long key, int default_val) {
    long cPtr = CImGuiJNI.ImGuiStorage_GetIntRef(ImGuiStorage.getCPtr(self), self, key, default_val);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static SWIGTYPE_p_bool ImGuiStorage_GetBoolRef(ImGuiStorage self, long key, boolean default_val) {
    long cPtr = CImGuiJNI.ImGuiStorage_GetBoolRef(ImGuiStorage.getCPtr(self), self, key, default_val);
    return (cPtr == 0) ? null : new SWIGTYPE_p_bool(cPtr, false);
  }

  public static SWIGTYPE_p_float ImGuiStorage_GetFloatRef(ImGuiStorage self, long key, float default_val) {
    long cPtr = CImGuiJNI.ImGuiStorage_GetFloatRef(ImGuiStorage.getCPtr(self), self, key, default_val);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static SWIGTYPE_p_p_void ImGuiStorage_GetVoidPtrRef(ImGuiStorage self, long key, SWIGTYPE_p_void default_val) {
    long cPtr = CImGuiJNI.ImGuiStorage_GetVoidPtrRef(ImGuiStorage.getCPtr(self), self, key, SWIGTYPE_p_void.getCPtr(default_val));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_void(cPtr, false);
  }

  public static void ImGuiStorage_SetAllInt(ImGuiStorage self, int val) {
    CImGuiJNI.ImGuiStorage_SetAllInt(ImGuiStorage.getCPtr(self), self, val);
  }

  public static void ImGuiStorage_BuildSortByKey(ImGuiStorage self) {
    CImGuiJNI.ImGuiStorage_BuildSortByKey(ImGuiStorage.getCPtr(self), self);
  }

  public static ImGuiListClipper ImGuiListClipper_ImGuiListClipper(int items_count, float items_height) {
    long cPtr = CImGuiJNI.ImGuiListClipper_ImGuiListClipper(items_count, items_height);
    return (cPtr == 0) ? null : new ImGuiListClipper(cPtr, false);
  }

  public static void ImGuiListClipper_destroy(ImGuiListClipper self) {
    CImGuiJNI.ImGuiListClipper_destroy(ImGuiListClipper.getCPtr(self), self);
  }

  public static boolean ImGuiListClipper_Step(ImGuiListClipper self) {
    return CImGuiJNI.ImGuiListClipper_Step(ImGuiListClipper.getCPtr(self), self);
  }

  public static void ImGuiListClipper_Begin(ImGuiListClipper self, int items_count, float items_height) {
    CImGuiJNI.ImGuiListClipper_Begin(ImGuiListClipper.getCPtr(self), self, items_count, items_height);
  }

  public static void ImGuiListClipper_End(ImGuiListClipper self) {
    CImGuiJNI.ImGuiListClipper_End(ImGuiListClipper.getCPtr(self), self);
  }

  public static ImColor ImColor_ImColorNil() {
    long cPtr = CImGuiJNI.ImColor_ImColorNil();
    return (cPtr == 0) ? null : new ImColor(cPtr, false);
  }

  public static void ImColor_destroy(ImColor self) {
    CImGuiJNI.ImColor_destroy(ImColor.getCPtr(self), self);
  }

  public static ImColor ImColor_ImColorInt(int r, int g, int b, int a) {
    long cPtr = CImGuiJNI.ImColor_ImColorInt(r, g, b, a);
    return (cPtr == 0) ? null : new ImColor(cPtr, false);
  }

  public static ImColor ImColor_ImColorU32(long rgba) {
    long cPtr = CImGuiJNI.ImColor_ImColorU32(rgba);
    return (cPtr == 0) ? null : new ImColor(cPtr, false);
  }

  public static ImColor ImColor_ImColorFloat(float r, float g, float b, float a) {
    long cPtr = CImGuiJNI.ImColor_ImColorFloat(r, g, b, a);
    return (cPtr == 0) ? null : new ImColor(cPtr, false);
  }

  public static ImColor ImColor_ImColorVec4(ImVec4 col) {
    long cPtr = CImGuiJNI.ImColor_ImColorVec4(ImVec4.getCPtr(col), col);
    return (cPtr == 0) ? null : new ImColor(cPtr, false);
  }

  public static void ImColor_SetHSV(ImColor self, float h, float s, float v, float a) {
    CImGuiJNI.ImColor_SetHSV(ImColor.getCPtr(self), self, h, s, v, a);
  }

  public static void ImColor_HSV(ImColor pOut, ImColor self, float h, float s, float v, float a) {
    CImGuiJNI.ImColor_HSV(ImColor.getCPtr(pOut), pOut, ImColor.getCPtr(self), self, h, s, v, a);
  }

  public static ImDrawCmd ImDrawCmd_ImDrawCmd() {
    long cPtr = CImGuiJNI.ImDrawCmd_ImDrawCmd();
    return (cPtr == 0) ? null : new ImDrawCmd(cPtr, false);
  }

  public static void ImDrawCmd_destroy(ImDrawCmd self) {
    CImGuiJNI.ImDrawCmd_destroy(ImDrawCmd.getCPtr(self), self);
  }

  public static ImDrawListSplitter ImDrawListSplitter_ImDrawListSplitter() {
    long cPtr = CImGuiJNI.ImDrawListSplitter_ImDrawListSplitter();
    return (cPtr == 0) ? null : new ImDrawListSplitter(cPtr, false);
  }

  public static void ImDrawListSplitter_destroy(ImDrawListSplitter self) {
    CImGuiJNI.ImDrawListSplitter_destroy(ImDrawListSplitter.getCPtr(self), self);
  }

  public static void ImDrawListSplitter_Clear(ImDrawListSplitter self) {
    CImGuiJNI.ImDrawListSplitter_Clear(ImDrawListSplitter.getCPtr(self), self);
  }

  public static void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter self) {
    CImGuiJNI.ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter.getCPtr(self), self);
  }

  public static void ImDrawListSplitter_Split(ImDrawListSplitter self, ImDrawList draw_list, int count) {
    CImGuiJNI.ImDrawListSplitter_Split(ImDrawListSplitter.getCPtr(self), self, ImDrawList.getCPtr(draw_list), draw_list, count);
  }

  public static void ImDrawListSplitter_Merge(ImDrawListSplitter self, ImDrawList draw_list) {
    CImGuiJNI.ImDrawListSplitter_Merge(ImDrawListSplitter.getCPtr(self), self, ImDrawList.getCPtr(draw_list), draw_list);
  }

  public static void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter self, ImDrawList draw_list, int channel_idx) {
    CImGuiJNI.ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter.getCPtr(self), self, ImDrawList.getCPtr(draw_list), draw_list, channel_idx);
  }

  public static ImDrawList ImDrawList_ImDrawList(ImDrawListSharedData shared_data) {
    long cPtr = CImGuiJNI.ImDrawList_ImDrawList(ImDrawListSharedData.getCPtr(shared_data), shared_data);
    return (cPtr == 0) ? null : new ImDrawList(cPtr, false);
  }

  public static void ImDrawList_destroy(ImDrawList self) {
    CImGuiJNI.ImDrawList_destroy(ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_PushClipRect(ImDrawList self, ImVec2 clip_rect_min, ImVec2 clip_rect_max, boolean intersect_with_current_clip_rect) {
    CImGuiJNI.ImDrawList_PushClipRect(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(clip_rect_min), clip_rect_min, ImVec2.getCPtr(clip_rect_max), clip_rect_max, intersect_with_current_clip_rect);
  }

  public static void ImDrawList_PushClipRectFullScreen(ImDrawList self) {
    CImGuiJNI.ImDrawList_PushClipRectFullScreen(ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_PopClipRect(ImDrawList self) {
    CImGuiJNI.ImDrawList_PopClipRect(ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_PushTextureID(ImDrawList self, SWIGTYPE_p_void texture_id) {
    CImGuiJNI.ImDrawList_PushTextureID(ImDrawList.getCPtr(self), self, SWIGTYPE_p_void.getCPtr(texture_id));
  }

  public static void ImDrawList_PopTextureID(ImDrawList self) {
    CImGuiJNI.ImDrawList_PopTextureID(ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_GetClipRectMin(ImVec2 pOut, ImDrawList self) {
    CImGuiJNI.ImDrawList_GetClipRectMin(ImVec2.getCPtr(pOut), pOut, ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_GetClipRectMax(ImVec2 pOut, ImDrawList self) {
    CImGuiJNI.ImDrawList_GetClipRectMax(ImVec2.getCPtr(pOut), pOut, ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_AddLine(ImDrawList self, ImVec2 p1, ImVec2 p2, long col, float thickness) {
    CImGuiJNI.ImDrawList_AddLine(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, col, thickness);
  }

  public static void ImDrawList_AddRect(ImDrawList self, ImVec2 p_min, ImVec2 p_max, long col, float rounding, int rounding_corners, float thickness) {
    CImGuiJNI.ImDrawList_AddRect(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p_min), p_min, ImVec2.getCPtr(p_max), p_max, col, rounding, rounding_corners, thickness);
  }

  public static void ImDrawList_AddRectFilled(ImDrawList self, ImVec2 p_min, ImVec2 p_max, long col, float rounding, int rounding_corners) {
    CImGuiJNI.ImDrawList_AddRectFilled(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p_min), p_min, ImVec2.getCPtr(p_max), p_max, col, rounding, rounding_corners);
  }

  public static void ImDrawList_AddRectFilledMultiColor(ImDrawList self, ImVec2 p_min, ImVec2 p_max, long col_upr_left, long col_upr_right, long col_bot_right, long col_bot_left) {
    CImGuiJNI.ImDrawList_AddRectFilledMultiColor(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p_min), p_min, ImVec2.getCPtr(p_max), p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
  }

  public static void ImDrawList_AddQuad(ImDrawList self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, long col, float thickness) {
    CImGuiJNI.ImDrawList_AddQuad(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, ImVec2.getCPtr(p4), p4, col, thickness);
  }

  public static void ImDrawList_AddQuadFilled(ImDrawList self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, long col) {
    CImGuiJNI.ImDrawList_AddQuadFilled(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, ImVec2.getCPtr(p4), p4, col);
  }

  public static void ImDrawList_AddTriangle(ImDrawList self, ImVec2 p1, ImVec2 p2, ImVec2 p3, long col, float thickness) {
    CImGuiJNI.ImDrawList_AddTriangle(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, col, thickness);
  }

  public static void ImDrawList_AddTriangleFilled(ImDrawList self, ImVec2 p1, ImVec2 p2, ImVec2 p3, long col) {
    CImGuiJNI.ImDrawList_AddTriangleFilled(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, col);
  }

  public static void ImDrawList_AddCircle(ImDrawList self, ImVec2 center, float radius, long col, int num_segments, float thickness) {
    CImGuiJNI.ImDrawList_AddCircle(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(center), center, radius, col, num_segments, thickness);
  }

  public static void ImDrawList_AddCircleFilled(ImDrawList self, ImVec2 center, float radius, long col, int num_segments) {
    CImGuiJNI.ImDrawList_AddCircleFilled(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(center), center, radius, col, num_segments);
  }

  public static void ImDrawList_AddNgon(ImDrawList self, ImVec2 center, float radius, long col, int num_segments, float thickness) {
    CImGuiJNI.ImDrawList_AddNgon(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(center), center, radius, col, num_segments, thickness);
  }

  public static void ImDrawList_AddNgonFilled(ImDrawList self, ImVec2 center, float radius, long col, int num_segments) {
    CImGuiJNI.ImDrawList_AddNgonFilled(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(center), center, radius, col, num_segments);
  }

  public static void ImDrawList_AddTextVec2(ImDrawList self, ImVec2 pos, long col, String text_begin, String text_end) {
    CImGuiJNI.ImDrawList_AddTextVec2(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(pos), pos, col, text_begin, text_end);
  }

  public static void ImDrawList_AddTextFontPtr(ImDrawList self, ImFont font, float font_size, ImVec2 pos, long col, String text_begin, String text_end, float wrap_width, ImVec4 cpu_fine_clip_rect) {
    CImGuiJNI.ImDrawList_AddTextFontPtr(ImDrawList.getCPtr(self), self, ImFont.getCPtr(font), font, font_size, ImVec2.getCPtr(pos), pos, col, text_begin, text_end, wrap_width, ImVec4.getCPtr(cpu_fine_clip_rect), cpu_fine_clip_rect);
  }

  public static void ImDrawList_AddPolyline(ImDrawList self, ImVec2 points, int num_points, long col, boolean closed, float thickness) {
    CImGuiJNI.ImDrawList_AddPolyline(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(points), points, num_points, col, closed, thickness);
  }

  public static void ImDrawList_AddConvexPolyFilled(ImDrawList self, ImVec2 points, int num_points, long col) {
    CImGuiJNI.ImDrawList_AddConvexPolyFilled(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(points), points, num_points, col);
  }

  public static void ImDrawList_AddBezierCurve(ImDrawList self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, long col, float thickness, int num_segments) {
    CImGuiJNI.ImDrawList_AddBezierCurve(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, ImVec2.getCPtr(p4), p4, col, thickness, num_segments);
  }

  public static void ImDrawList_AddImage(ImDrawList self, SWIGTYPE_p_void user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, long col) {
    CImGuiJNI.ImDrawList_AddImage(ImDrawList.getCPtr(self), self, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p_min), p_min, ImVec2.getCPtr(p_max), p_max, ImVec2.getCPtr(uv_min), uv_min, ImVec2.getCPtr(uv_max), uv_max, col);
  }

  public static void ImDrawList_AddImageQuad(ImDrawList self, SWIGTYPE_p_void user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2, ImVec2 uv3, ImVec2 uv4, long col) {
    CImGuiJNI.ImDrawList_AddImageQuad(ImDrawList.getCPtr(self), self, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, ImVec2.getCPtr(p4), p4, ImVec2.getCPtr(uv1), uv1, ImVec2.getCPtr(uv2), uv2, ImVec2.getCPtr(uv3), uv3, ImVec2.getCPtr(uv4), uv4, col);
  }

  public static void ImDrawList_AddImageRounded(ImDrawList self, SWIGTYPE_p_void user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, long col, float rounding, int rounding_corners) {
    CImGuiJNI.ImDrawList_AddImageRounded(ImDrawList.getCPtr(self), self, SWIGTYPE_p_void.getCPtr(user_texture_id), ImVec2.getCPtr(p_min), p_min, ImVec2.getCPtr(p_max), p_max, ImVec2.getCPtr(uv_min), uv_min, ImVec2.getCPtr(uv_max), uv_max, col, rounding, rounding_corners);
  }

  public static void ImDrawList_PathClear(ImDrawList self) {
    CImGuiJNI.ImDrawList_PathClear(ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_PathLineTo(ImDrawList self, ImVec2 pos) {
    CImGuiJNI.ImDrawList_PathLineTo(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(pos), pos);
  }

  public static void ImDrawList_PathLineToMergeDuplicate(ImDrawList self, ImVec2 pos) {
    CImGuiJNI.ImDrawList_PathLineToMergeDuplicate(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(pos), pos);
  }

  public static void ImDrawList_PathFillConvex(ImDrawList self, long col) {
    CImGuiJNI.ImDrawList_PathFillConvex(ImDrawList.getCPtr(self), self, col);
  }

  public static void ImDrawList_PathStroke(ImDrawList self, long col, boolean closed, float thickness) {
    CImGuiJNI.ImDrawList_PathStroke(ImDrawList.getCPtr(self), self, col, closed, thickness);
  }

  public static void ImDrawList_PathArcTo(ImDrawList self, ImVec2 center, float radius, float a_min, float a_max, int num_segments) {
    CImGuiJNI.ImDrawList_PathArcTo(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(center), center, radius, a_min, a_max, num_segments);
  }

  public static void ImDrawList_PathArcToFast(ImDrawList self, ImVec2 center, float radius, int a_min_of_12, int a_max_of_12) {
    CImGuiJNI.ImDrawList_PathArcToFast(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(center), center, radius, a_min_of_12, a_max_of_12);
  }

  public static void ImDrawList_PathBezierCurveTo(ImDrawList self, ImVec2 p2, ImVec2 p3, ImVec2 p4, int num_segments) {
    CImGuiJNI.ImDrawList_PathBezierCurveTo(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, ImVec2.getCPtr(p4), p4, num_segments);
  }

  public static void ImDrawList_PathRect(ImDrawList self, ImVec2 rect_min, ImVec2 rect_max, float rounding, int rounding_corners) {
    CImGuiJNI.ImDrawList_PathRect(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(rect_min), rect_min, ImVec2.getCPtr(rect_max), rect_max, rounding, rounding_corners);
  }

  public static void ImDrawList_AddCallback(ImDrawList self, SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void callback, SWIGTYPE_p_void callback_data) {
    CImGuiJNI.ImDrawList_AddCallback(ImDrawList.getCPtr(self), self, SWIGTYPE_p_f_p_q_const__ImDrawList_p_q_const__ImDrawCmd__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(callback_data));
  }

  public static void ImDrawList_AddDrawCmd(ImDrawList self) {
    CImGuiJNI.ImDrawList_AddDrawCmd(ImDrawList.getCPtr(self), self);
  }

  public static ImDrawList ImDrawList_CloneOutput(ImDrawList self) {
    long cPtr = CImGuiJNI.ImDrawList_CloneOutput(ImDrawList.getCPtr(self), self);
    return (cPtr == 0) ? null : new ImDrawList(cPtr, false);
  }

  public static void ImDrawList_ChannelsSplit(ImDrawList self, int count) {
    CImGuiJNI.ImDrawList_ChannelsSplit(ImDrawList.getCPtr(self), self, count);
  }

  public static void ImDrawList_ChannelsMerge(ImDrawList self) {
    CImGuiJNI.ImDrawList_ChannelsMerge(ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_ChannelsSetCurrent(ImDrawList self, int n) {
    CImGuiJNI.ImDrawList_ChannelsSetCurrent(ImDrawList.getCPtr(self), self, n);
  }

  public static void ImDrawList_Clear(ImDrawList self) {
    CImGuiJNI.ImDrawList_Clear(ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_ClearFreeMemory(ImDrawList self) {
    CImGuiJNI.ImDrawList_ClearFreeMemory(ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_PrimReserve(ImDrawList self, int idx_count, int vtx_count) {
    CImGuiJNI.ImDrawList_PrimReserve(ImDrawList.getCPtr(self), self, idx_count, vtx_count);
  }

  public static void ImDrawList_PrimUnreserve(ImDrawList self, int idx_count, int vtx_count) {
    CImGuiJNI.ImDrawList_PrimUnreserve(ImDrawList.getCPtr(self), self, idx_count, vtx_count);
  }

  public static void ImDrawList_PrimRect(ImDrawList self, ImVec2 a, ImVec2 b, long col) {
    CImGuiJNI.ImDrawList_PrimRect(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, col);
  }

  public static void ImDrawList_PrimRectUV(ImDrawList self, ImVec2 a, ImVec2 b, ImVec2 uv_a, ImVec2 uv_b, long col) {
    CImGuiJNI.ImDrawList_PrimRectUV(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, ImVec2.getCPtr(uv_a), uv_a, ImVec2.getCPtr(uv_b), uv_b, col);
  }

  public static void ImDrawList_PrimQuadUV(ImDrawList self, ImVec2 a, ImVec2 b, ImVec2 c, ImVec2 d, ImVec2 uv_a, ImVec2 uv_b, ImVec2 uv_c, ImVec2 uv_d, long col) {
    CImGuiJNI.ImDrawList_PrimQuadUV(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, ImVec2.getCPtr(c), c, ImVec2.getCPtr(d), d, ImVec2.getCPtr(uv_a), uv_a, ImVec2.getCPtr(uv_b), uv_b, ImVec2.getCPtr(uv_c), uv_c, ImVec2.getCPtr(uv_d), uv_d, col);
  }

  public static void ImDrawList_PrimWriteVtx(ImDrawList self, ImVec2 pos, ImVec2 uv, long col) {
    CImGuiJNI.ImDrawList_PrimWriteVtx(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(pos), pos, ImVec2.getCPtr(uv), uv, col);
  }

  public static void ImDrawList_PrimWriteIdx(ImDrawList self, int idx) {
    CImGuiJNI.ImDrawList_PrimWriteIdx(ImDrawList.getCPtr(self), self, idx);
  }

  public static void ImDrawList_PrimVtx(ImDrawList self, ImVec2 pos, ImVec2 uv, long col) {
    CImGuiJNI.ImDrawList_PrimVtx(ImDrawList.getCPtr(self), self, ImVec2.getCPtr(pos), pos, ImVec2.getCPtr(uv), uv, col);
  }

  public static void ImDrawList_UpdateClipRect(ImDrawList self) {
    CImGuiJNI.ImDrawList_UpdateClipRect(ImDrawList.getCPtr(self), self);
  }

  public static void ImDrawList_UpdateTextureID(ImDrawList self) {
    CImGuiJNI.ImDrawList_UpdateTextureID(ImDrawList.getCPtr(self), self);
  }

  public static ImDrawData ImDrawData_ImDrawData() {
    long cPtr = CImGuiJNI.ImDrawData_ImDrawData();
    return (cPtr == 0) ? null : new ImDrawData(cPtr, false);
  }

  public static void ImDrawData_destroy(ImDrawData self) {
    CImGuiJNI.ImDrawData_destroy(ImDrawData.getCPtr(self), self);
  }

  public static void ImDrawData_Clear(ImDrawData self) {
    CImGuiJNI.ImDrawData_Clear(ImDrawData.getCPtr(self), self);
  }

  public static void ImDrawData_DeIndexAllBuffers(ImDrawData self) {
    CImGuiJNI.ImDrawData_DeIndexAllBuffers(ImDrawData.getCPtr(self), self);
  }

  public static void ImDrawData_ScaleClipRects(ImDrawData self, ImVec2 fb_scale) {
    CImGuiJNI.ImDrawData_ScaleClipRects(ImDrawData.getCPtr(self), self, ImVec2.getCPtr(fb_scale), fb_scale);
  }

  public static ImFontConfig ImFontConfig_ImFontConfig() {
    long cPtr = CImGuiJNI.ImFontConfig_ImFontConfig();
    return (cPtr == 0) ? null : new ImFontConfig(cPtr, false);
  }

  public static void ImFontConfig_destroy(ImFontConfig self) {
    CImGuiJNI.ImFontConfig_destroy(ImFontConfig.getCPtr(self), self);
  }

  public static ImFontGlyphRangesBuilder ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder() {
    long cPtr = CImGuiJNI.ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder();
    return (cPtr == 0) ? null : new ImFontGlyphRangesBuilder(cPtr, false);
  }

  public static void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder self) {
    CImGuiJNI.ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder.getCPtr(self), self);
  }

  public static void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder self) {
    CImGuiJNI.ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder.getCPtr(self), self);
  }

  public static boolean ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder self, long n) {
    return CImGuiJNI.ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder.getCPtr(self), self, n);
  }

  public static void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder self, long n) {
    CImGuiJNI.ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder.getCPtr(self), self, n);
  }

  public static void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder self, int c) {
    CImGuiJNI.ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder.getCPtr(self), self, c);
  }

  public static void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder self, String text, String text_end) {
    CImGuiJNI.ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder.getCPtr(self), self, text, text_end);
  }

  public static void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder self, SWIGTYPE_p_unsigned_short ranges) {
    CImGuiJNI.ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder.getCPtr(self), self, SWIGTYPE_p_unsigned_short.getCPtr(ranges));
  }

  public static void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder self, ImVector_ImWchar out_ranges) {
    CImGuiJNI.ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder.getCPtr(self), self, ImVector_ImWchar.getCPtr(out_ranges), out_ranges);
  }

  public static ImFontAtlasCustomRect ImFontAtlasCustomRect_ImFontAtlasCustomRect() {
    long cPtr = CImGuiJNI.ImFontAtlasCustomRect_ImFontAtlasCustomRect();
    return (cPtr == 0) ? null : new ImFontAtlasCustomRect(cPtr, false);
  }

  public static void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect self) {
    CImGuiJNI.ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect.getCPtr(self), self);
  }

  public static boolean ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect self) {
    return CImGuiJNI.ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect.getCPtr(self), self);
  }

  public static ImFontAtlas ImFontAtlas_ImFontAtlas() {
    long cPtr = CImGuiJNI.ImFontAtlas_ImFontAtlas();
    return (cPtr == 0) ? null : new ImFontAtlas(cPtr, false);
  }

  public static void ImFontAtlas_destroy(ImFontAtlas self) {
    CImGuiJNI.ImFontAtlas_destroy(ImFontAtlas.getCPtr(self), self);
  }

  public static ImFont ImFontAtlas_AddFont(ImFontAtlas self, ImFontConfig font_cfg) {
    long cPtr = CImGuiJNI.ImFontAtlas_AddFont(ImFontAtlas.getCPtr(self), self, ImFontConfig.getCPtr(font_cfg), font_cfg);
    return (cPtr == 0) ? null : new ImFont(cPtr, false);
  }

  public static ImFont ImFontAtlas_AddFontDefault(ImFontAtlas self, ImFontConfig font_cfg) {
    long cPtr = CImGuiJNI.ImFontAtlas_AddFontDefault(ImFontAtlas.getCPtr(self), self, ImFontConfig.getCPtr(font_cfg), font_cfg);
    return (cPtr == 0) ? null : new ImFont(cPtr, false);
  }

  public static ImFont ImFontAtlas_AddFontFromFileTTF(ImFontAtlas self, String filename, float size_pixels, ImFontConfig font_cfg, SWIGTYPE_p_unsigned_short glyph_ranges) {
    long cPtr = CImGuiJNI.ImFontAtlas_AddFontFromFileTTF(ImFontAtlas.getCPtr(self), self, filename, size_pixels, ImFontConfig.getCPtr(font_cfg), font_cfg, SWIGTYPE_p_unsigned_short.getCPtr(glyph_ranges));
    return (cPtr == 0) ? null : new ImFont(cPtr, false);
  }

  public static ImFont ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas self, SWIGTYPE_p_void font_data, int font_size, float size_pixels, ImFontConfig font_cfg, SWIGTYPE_p_unsigned_short glyph_ranges) {
    long cPtr = CImGuiJNI.ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas.getCPtr(self), self, SWIGTYPE_p_void.getCPtr(font_data), font_size, size_pixels, ImFontConfig.getCPtr(font_cfg), font_cfg, SWIGTYPE_p_unsigned_short.getCPtr(glyph_ranges));
    return (cPtr == 0) ? null : new ImFont(cPtr, false);
  }

  public static ImFont ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas self, SWIGTYPE_p_void compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfig font_cfg, SWIGTYPE_p_unsigned_short glyph_ranges) {
    long cPtr = CImGuiJNI.ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas.getCPtr(self), self, SWIGTYPE_p_void.getCPtr(compressed_font_data), compressed_font_size, size_pixels, ImFontConfig.getCPtr(font_cfg), font_cfg, SWIGTYPE_p_unsigned_short.getCPtr(glyph_ranges));
    return (cPtr == 0) ? null : new ImFont(cPtr, false);
  }

  public static ImFont ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas self, String compressed_font_data_base85, float size_pixels, ImFontConfig font_cfg, SWIGTYPE_p_unsigned_short glyph_ranges) {
    long cPtr = CImGuiJNI.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas.getCPtr(self), self, compressed_font_data_base85, size_pixels, ImFontConfig.getCPtr(font_cfg), font_cfg, SWIGTYPE_p_unsigned_short.getCPtr(glyph_ranges));
    return (cPtr == 0) ? null : new ImFont(cPtr, false);
  }

  public static void ImFontAtlas_ClearInputData(ImFontAtlas self) {
    CImGuiJNI.ImFontAtlas_ClearInputData(ImFontAtlas.getCPtr(self), self);
  }

  public static void ImFontAtlas_ClearTexData(ImFontAtlas self) {
    CImGuiJNI.ImFontAtlas_ClearTexData(ImFontAtlas.getCPtr(self), self);
  }

  public static void ImFontAtlas_ClearFonts(ImFontAtlas self) {
    CImGuiJNI.ImFontAtlas_ClearFonts(ImFontAtlas.getCPtr(self), self);
  }

  public static void ImFontAtlas_Clear(ImFontAtlas self) {
    CImGuiJNI.ImFontAtlas_Clear(ImFontAtlas.getCPtr(self), self);
  }

  public static boolean ImFontAtlas_Build(ImFontAtlas self) {
    return CImGuiJNI.ImFontAtlas_Build(ImFontAtlas.getCPtr(self), self);
  }

  public static void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas self, SWIGTYPE_p_p_unsigned_char out_pixels, SWIGTYPE_p_int out_width, SWIGTYPE_p_int out_height, SWIGTYPE_p_int out_bytes_per_pixel) {
    CImGuiJNI.ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas.getCPtr(self), self, SWIGTYPE_p_p_unsigned_char.getCPtr(out_pixels), SWIGTYPE_p_int.getCPtr(out_width), SWIGTYPE_p_int.getCPtr(out_height), SWIGTYPE_p_int.getCPtr(out_bytes_per_pixel));
  }

  public static void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas self, SWIGTYPE_p_p_unsigned_char out_pixels, SWIGTYPE_p_int out_width, SWIGTYPE_p_int out_height, SWIGTYPE_p_int out_bytes_per_pixel) {
    CImGuiJNI.ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas.getCPtr(self), self, SWIGTYPE_p_p_unsigned_char.getCPtr(out_pixels), SWIGTYPE_p_int.getCPtr(out_width), SWIGTYPE_p_int.getCPtr(out_height), SWIGTYPE_p_int.getCPtr(out_bytes_per_pixel));
  }

  public static boolean ImFontAtlas_IsBuilt(ImFontAtlas self) {
    return CImGuiJNI.ImFontAtlas_IsBuilt(ImFontAtlas.getCPtr(self), self);
  }

  public static void ImFontAtlas_SetTexID(ImFontAtlas self, SWIGTYPE_p_void id) {
    CImGuiJNI.ImFontAtlas_SetTexID(ImFontAtlas.getCPtr(self), self, SWIGTYPE_p_void.getCPtr(id));
  }

  public static SWIGTYPE_p_unsigned_short ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas self) {
    long cPtr = CImGuiJNI.ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas.getCPtr(self), self);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_short ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas self) {
    long cPtr = CImGuiJNI.ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas.getCPtr(self), self);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_short ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas self) {
    long cPtr = CImGuiJNI.ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas.getCPtr(self), self);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_short ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas self) {
    long cPtr = CImGuiJNI.ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas.getCPtr(self), self);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_short ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas self) {
    long cPtr = CImGuiJNI.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas.getCPtr(self), self);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_short ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas self) {
    long cPtr = CImGuiJNI.ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas.getCPtr(self), self);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_short ImFontAtlas_GetGlyphRangesThai(ImFontAtlas self) {
    long cPtr = CImGuiJNI.ImFontAtlas_GetGlyphRangesThai(ImFontAtlas.getCPtr(self), self);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_short ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas self) {
    long cPtr = CImGuiJNI.ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas.getCPtr(self), self);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static int ImFontAtlas_AddCustomRectRegular(ImFontAtlas self, int width, int height) {
    return CImGuiJNI.ImFontAtlas_AddCustomRectRegular(ImFontAtlas.getCPtr(self), self, width, height);
  }

  public static int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas self, ImFont font, int id, int width, int height, float advance_x, ImVec2 offset) {
    return CImGuiJNI.ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas.getCPtr(self), self, ImFont.getCPtr(font), font, id, width, height, advance_x, ImVec2.getCPtr(offset), offset);
  }

  public static ImFontAtlasCustomRect ImFontAtlas_GetCustomRectByIndex(ImFontAtlas self, int index) {
    long cPtr = CImGuiJNI.ImFontAtlas_GetCustomRectByIndex(ImFontAtlas.getCPtr(self), self, index);
    return (cPtr == 0) ? null : new ImFontAtlasCustomRect(cPtr, false);
  }

  public static void ImFontAtlas_CalcCustomRectUV(ImFontAtlas self, ImFontAtlasCustomRect rect, ImVec2 out_uv_min, ImVec2 out_uv_max) {
    CImGuiJNI.ImFontAtlas_CalcCustomRectUV(ImFontAtlas.getCPtr(self), self, ImFontAtlasCustomRect.getCPtr(rect), rect, ImVec2.getCPtr(out_uv_min), out_uv_min, ImVec2.getCPtr(out_uv_max), out_uv_max);
  }

  public static boolean ImFontAtlas_GetMouseCursorTexData(ImFontAtlas self, int cursor, ImVec2 out_offset, ImVec2 out_size, ImVec2 out_uv_border, ImVec2 out_uv_fill) {
    return CImGuiJNI.ImFontAtlas_GetMouseCursorTexData(ImFontAtlas.getCPtr(self), self, cursor, ImVec2.getCPtr(out_offset), out_offset, ImVec2.getCPtr(out_size), out_size, ImVec2.getCPtr(out_uv_border), out_uv_border, ImVec2.getCPtr(out_uv_fill), out_uv_fill);
  }

  public static ImFont ImFont_ImFont() {
    long cPtr = CImGuiJNI.ImFont_ImFont();
    return (cPtr == 0) ? null : new ImFont(cPtr, false);
  }

  public static void ImFont_destroy(ImFont self) {
    CImGuiJNI.ImFont_destroy(ImFont.getCPtr(self), self);
  }

  public static ImFontGlyph ImFont_FindGlyph(ImFont self, int c) {
    long cPtr = CImGuiJNI.ImFont_FindGlyph(ImFont.getCPtr(self), self, c);
    return (cPtr == 0) ? null : new ImFontGlyph(cPtr, false);
  }

  public static ImFontGlyph ImFont_FindGlyphNoFallback(ImFont self, int c) {
    long cPtr = CImGuiJNI.ImFont_FindGlyphNoFallback(ImFont.getCPtr(self), self, c);
    return (cPtr == 0) ? null : new ImFontGlyph(cPtr, false);
  }

  public static float ImFont_GetCharAdvance(ImFont self, int c) {
    return CImGuiJNI.ImFont_GetCharAdvance(ImFont.getCPtr(self), self, c);
  }

  public static boolean ImFont_IsLoaded(ImFont self) {
    return CImGuiJNI.ImFont_IsLoaded(ImFont.getCPtr(self), self);
  }

  public static String ImFont_GetDebugName(ImFont self) {
    return CImGuiJNI.ImFont_GetDebugName(ImFont.getCPtr(self), self);
  }

  public static void ImFont_CalcTextSizeA(ImVec2 pOut, ImFont self, float size, float max_width, float wrap_width, String text_begin, String text_end, SWIGTYPE_p_p_char remaining) {
    CImGuiJNI.ImFont_CalcTextSizeA(ImVec2.getCPtr(pOut), pOut, ImFont.getCPtr(self), self, size, max_width, wrap_width, text_begin, text_end, SWIGTYPE_p_p_char.getCPtr(remaining));
  }

  public static String ImFont_CalcWordWrapPositionA(ImFont self, float scale, String text, String text_end, float wrap_width) {
    return CImGuiJNI.ImFont_CalcWordWrapPositionA(ImFont.getCPtr(self), self, scale, text, text_end, wrap_width);
  }

  public static void ImFont_RenderChar(ImFont self, ImDrawList draw_list, float size, ImVec2 pos, long col, int c) {
    CImGuiJNI.ImFont_RenderChar(ImFont.getCPtr(self), self, ImDrawList.getCPtr(draw_list), draw_list, size, ImVec2.getCPtr(pos), pos, col, c);
  }

  public static void ImFont_RenderText(ImFont self, ImDrawList draw_list, float size, ImVec2 pos, long col, ImVec4 clip_rect, String text_begin, String text_end, float wrap_width, boolean cpu_fine_clip) {
    CImGuiJNI.ImFont_RenderText(ImFont.getCPtr(self), self, ImDrawList.getCPtr(draw_list), draw_list, size, ImVec2.getCPtr(pos), pos, col, ImVec4.getCPtr(clip_rect), clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip);
  }

  public static void ImFont_BuildLookupTable(ImFont self) {
    CImGuiJNI.ImFont_BuildLookupTable(ImFont.getCPtr(self), self);
  }

  public static void ImFont_ClearOutputData(ImFont self) {
    CImGuiJNI.ImFont_ClearOutputData(ImFont.getCPtr(self), self);
  }

  public static void ImFont_GrowIndex(ImFont self, int new_size) {
    CImGuiJNI.ImFont_GrowIndex(ImFont.getCPtr(self), self, new_size);
  }

  public static void ImFont_AddGlyph(ImFont self, int c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x) {
    CImGuiJNI.ImFont_AddGlyph(ImFont.getCPtr(self), self, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
  }

  public static void ImFont_AddRemapChar(ImFont self, int dst, int src, boolean overwrite_dst) {
    CImGuiJNI.ImFont_AddRemapChar(ImFont.getCPtr(self), self, dst, src, overwrite_dst);
  }

  public static void ImFont_SetGlyphVisible(ImFont self, int c, boolean visible) {
    CImGuiJNI.ImFont_SetGlyphVisible(ImFont.getCPtr(self), self, c, visible);
  }

  public static void ImFont_SetFallbackChar(ImFont self, int c) {
    CImGuiJNI.ImFont_SetFallbackChar(ImFont.getCPtr(self), self, c);
  }

  public static boolean ImFont_IsGlyphRangeUnused(ImFont self, long c_begin, long c_last) {
    return CImGuiJNI.ImFont_IsGlyphRangeUnused(ImFont.getCPtr(self), self, c_begin, c_last);
  }

  public static ImGuiPlatformIO ImGuiPlatformIO_ImGuiPlatformIO() {
    long cPtr = CImGuiJNI.ImGuiPlatformIO_ImGuiPlatformIO();
    return (cPtr == 0) ? null : new ImGuiPlatformIO(cPtr, false);
  }

  public static void ImGuiPlatformIO_destroy(ImGuiPlatformIO self) {
    CImGuiJNI.ImGuiPlatformIO_destroy(ImGuiPlatformIO.getCPtr(self), self);
  }

  public static ImGuiPlatformMonitor ImGuiPlatformMonitor_ImGuiPlatformMonitor() {
    long cPtr = CImGuiJNI.ImGuiPlatformMonitor_ImGuiPlatformMonitor();
    return (cPtr == 0) ? null : new ImGuiPlatformMonitor(cPtr, false);
  }

  public static void ImGuiPlatformMonitor_destroy(ImGuiPlatformMonitor self) {
    CImGuiJNI.ImGuiPlatformMonitor_destroy(ImGuiPlatformMonitor.getCPtr(self), self);
  }

  public static ImGuiViewport ImGuiViewport_ImGuiViewport() {
    long cPtr = CImGuiJNI.ImGuiViewport_ImGuiViewport();
    return (cPtr == 0) ? null : new ImGuiViewport(cPtr, false);
  }

  public static void ImGuiViewport_destroy(ImGuiViewport self) {
    CImGuiJNI.ImGuiViewport_destroy(ImGuiViewport.getCPtr(self), self);
  }

  public static void ImGuiViewport_GetWorkPos(ImVec2 pOut, ImGuiViewport self) {
    CImGuiJNI.ImGuiViewport_GetWorkPos(ImVec2.getCPtr(pOut), pOut, ImGuiViewport.getCPtr(self), self);
  }

  public static void ImGuiViewport_GetWorkSize(ImVec2 pOut, ImGuiViewport self) {
    CImGuiJNI.ImGuiViewport_GetWorkSize(ImVec2.getCPtr(pOut), pOut, ImGuiViewport.getCPtr(self), self);
  }

  public static long igImHashData(SWIGTYPE_p_void data, long data_size, long seed) {
    return CImGuiJNI.igImHashData(SWIGTYPE_p_void.getCPtr(data), data_size, seed);
  }

  public static long igImHashStr(String data, long data_size, long seed) {
    return CImGuiJNI.igImHashStr(data, data_size, seed);
  }

  public static long igImAlphaBlendColors(long col_a, long col_b) {
    return CImGuiJNI.igImAlphaBlendColors(col_a, col_b);
  }

  public static boolean igImIsPowerOfTwo(int v) {
    return CImGuiJNI.igImIsPowerOfTwo(v);
  }

  public static int igImUpperPowerOfTwo(int v) {
    return CImGuiJNI.igImUpperPowerOfTwo(v);
  }

  public static int igImStricmp(String str1, String str2) {
    return CImGuiJNI.igImStricmp(str1, str2);
  }

  public static int igImStrnicmp(String str1, String str2, long count) {
    return CImGuiJNI.igImStrnicmp(str1, str2, count);
  }

  public static void igImStrncpy(String dst, String src, long count) {
    CImGuiJNI.igImStrncpy(dst, src, count);
  }

  public static String igImStrdup(String str) {
    return CImGuiJNI.igImStrdup(str);
  }

  public static String igImStrdupcpy(String dst, SWIGTYPE_p_size_t p_dst_size, String str) {
    return CImGuiJNI.igImStrdupcpy(dst, SWIGTYPE_p_size_t.getCPtr(p_dst_size), str);
  }

  public static String igImStrchrRange(String str_begin, String str_end, char c) {
    return CImGuiJNI.igImStrchrRange(str_begin, str_end, c);
  }

  public static int igImStrlenW(SWIGTYPE_p_unsigned_short str) {
    return CImGuiJNI.igImStrlenW(SWIGTYPE_p_unsigned_short.getCPtr(str));
  }

  public static String igImStreolRange(String str, String str_end) {
    return CImGuiJNI.igImStreolRange(str, str_end);
  }

  public static SWIGTYPE_p_unsigned_short igImStrbolW(SWIGTYPE_p_unsigned_short buf_mid_line, SWIGTYPE_p_unsigned_short buf_begin) {
    long cPtr = CImGuiJNI.igImStrbolW(SWIGTYPE_p_unsigned_short.getCPtr(buf_mid_line), SWIGTYPE_p_unsigned_short.getCPtr(buf_begin));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static String igImStristr(String haystack, String haystack_end, String needle, String needle_end) {
    return CImGuiJNI.igImStristr(haystack, haystack_end, needle, needle_end);
  }

  public static void igImStrTrimBlanks(String str) {
    CImGuiJNI.igImStrTrimBlanks(str);
  }

  public static String igImStrSkipBlank(String str) {
    return CImGuiJNI.igImStrSkipBlank(str);
  }

  public static int igImFormatString(byte[] buf, long buf_size, String fmt) {
    return CImGuiJNI.igImFormatString(buf, buf_size, fmt);
  }

  public static String igImParseFormatFindStart(String format) {
    return CImGuiJNI.igImParseFormatFindStart(format);
  }

  public static String igImParseFormatFindEnd(String format) {
    return CImGuiJNI.igImParseFormatFindEnd(format);
  }

  public static String igImParseFormatTrimDecorations(String format, byte[] buf, long buf_size) {
    return CImGuiJNI.igImParseFormatTrimDecorations(format, buf, buf_size);
  }

  public static int igImParseFormatPrecision(String format, int default_value) {
    return CImGuiJNI.igImParseFormatPrecision(format, default_value);
  }

  public static boolean igImCharIsBlankA(char c) {
    return CImGuiJNI.igImCharIsBlankA(c);
  }

  public static boolean igImCharIsBlankW(long c) {
    return CImGuiJNI.igImCharIsBlankW(c);
  }

  public static int igImTextStrToUtf8(byte[] buf, int buf_size, SWIGTYPE_p_unsigned_short in_text, SWIGTYPE_p_unsigned_short in_text_end) {
    return CImGuiJNI.igImTextStrToUtf8(buf, buf_size, SWIGTYPE_p_unsigned_short.getCPtr(in_text), SWIGTYPE_p_unsigned_short.getCPtr(in_text_end));
  }

  public static int igImTextCharFromUtf8(SWIGTYPE_p_unsigned_int out_char, String in_text, String in_text_end) {
    return CImGuiJNI.igImTextCharFromUtf8(SWIGTYPE_p_unsigned_int.getCPtr(out_char), in_text, in_text_end);
  }

  public static int igImTextStrFromUtf8(SWIGTYPE_p_unsigned_short buf, int buf_size, String in_text, String in_text_end, SWIGTYPE_p_p_char in_remaining) {
    return CImGuiJNI.igImTextStrFromUtf8(SWIGTYPE_p_unsigned_short.getCPtr(buf), buf_size, in_text, in_text_end, SWIGTYPE_p_p_char.getCPtr(in_remaining));
  }

  public static int igImTextCountCharsFromUtf8(String in_text, String in_text_end) {
    return CImGuiJNI.igImTextCountCharsFromUtf8(in_text, in_text_end);
  }

  public static int igImTextCountUtf8BytesFromChar(String in_text, String in_text_end) {
    return CImGuiJNI.igImTextCountUtf8BytesFromChar(in_text, in_text_end);
  }

  public static int igImTextCountUtf8BytesFromStr(SWIGTYPE_p_unsigned_short in_text, SWIGTYPE_p_unsigned_short in_text_end) {
    return CImGuiJNI.igImTextCountUtf8BytesFromStr(SWIGTYPE_p_unsigned_short.getCPtr(in_text), SWIGTYPE_p_unsigned_short.getCPtr(in_text_end));
  }

  public static SWIGTYPE_p_FILE igImFileOpen(String filename, String mode) {
    long cPtr = CImGuiJNI.igImFileOpen(filename, mode);
    return (cPtr == 0) ? null : new SWIGTYPE_p_FILE(cPtr, false);
  }

  public static boolean igImFileClose(SWIGTYPE_p_FILE file) {
    return CImGuiJNI.igImFileClose(SWIGTYPE_p_FILE.getCPtr(file));
  }

  public static SWIGTYPE_p_uint64_t igImFileGetSize(SWIGTYPE_p_FILE file) {
    return new SWIGTYPE_p_uint64_t(CImGuiJNI.igImFileGetSize(SWIGTYPE_p_FILE.getCPtr(file)), true);
  }

  public static SWIGTYPE_p_uint64_t igImFileRead(SWIGTYPE_p_void data, SWIGTYPE_p_uint64_t size, SWIGTYPE_p_uint64_t count, SWIGTYPE_p_FILE file) {
    return new SWIGTYPE_p_uint64_t(CImGuiJNI.igImFileRead(SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_uint64_t.getCPtr(size), SWIGTYPE_p_uint64_t.getCPtr(count), SWIGTYPE_p_FILE.getCPtr(file)), true);
  }

  public static SWIGTYPE_p_uint64_t igImFileWrite(SWIGTYPE_p_void data, SWIGTYPE_p_uint64_t size, SWIGTYPE_p_uint64_t count, SWIGTYPE_p_FILE file) {
    return new SWIGTYPE_p_uint64_t(CImGuiJNI.igImFileWrite(SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_uint64_t.getCPtr(size), SWIGTYPE_p_uint64_t.getCPtr(count), SWIGTYPE_p_FILE.getCPtr(file)), true);
  }

  public static SWIGTYPE_p_void igImFileLoadToMemory(String filename, String mode, SWIGTYPE_p_size_t out_file_size, int padding_bytes) {
    long cPtr = CImGuiJNI.igImFileLoadToMemory(filename, mode, SWIGTYPE_p_size_t.getCPtr(out_file_size), padding_bytes);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static float igImPowFloat(float x, float y) {
    return CImGuiJNI.igImPowFloat(x, y);
  }

  public static double igImPowdouble(double x, double y) {
    return CImGuiJNI.igImPowdouble(x, y);
  }

  public static void igImMin(ImVec2 pOut, ImVec2 lhs, ImVec2 rhs) {
    CImGuiJNI.igImMin(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(lhs), lhs, ImVec2.getCPtr(rhs), rhs);
  }

  public static void igImMax(ImVec2 pOut, ImVec2 lhs, ImVec2 rhs) {
    CImGuiJNI.igImMax(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(lhs), lhs, ImVec2.getCPtr(rhs), rhs);
  }

  public static void igImClamp(ImVec2 pOut, ImVec2 v, ImVec2 mn, ImVec2 mx) {
    CImGuiJNI.igImClamp(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(v), v, ImVec2.getCPtr(mn), mn, ImVec2.getCPtr(mx), mx);
  }

  public static void igImLerpVec2Float(ImVec2 pOut, ImVec2 a, ImVec2 b, float t) {
    CImGuiJNI.igImLerpVec2Float(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, t);
  }

  public static void igImLerpVec2Vec2(ImVec2 pOut, ImVec2 a, ImVec2 b, ImVec2 t) {
    CImGuiJNI.igImLerpVec2Vec2(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, ImVec2.getCPtr(t), t);
  }

  public static void igImLerpVec4(ImVec4 pOut, ImVec4 a, ImVec4 b, float t) {
    CImGuiJNI.igImLerpVec4(ImVec4.getCPtr(pOut), pOut, ImVec4.getCPtr(a), a, ImVec4.getCPtr(b), b, t);
  }

  public static float igImSaturate(float f) {
    return CImGuiJNI.igImSaturate(f);
  }

  public static float igImLengthSqrVec2(ImVec2 lhs) {
    return CImGuiJNI.igImLengthSqrVec2(ImVec2.getCPtr(lhs), lhs);
  }

  public static float igImLengthSqrVec4(ImVec4 lhs) {
    return CImGuiJNI.igImLengthSqrVec4(ImVec4.getCPtr(lhs), lhs);
  }

  public static float igImInvLength(ImVec2 lhs, float fail_value) {
    return CImGuiJNI.igImInvLength(ImVec2.getCPtr(lhs), lhs, fail_value);
  }

  public static float igImFloorFloat(float f) {
    return CImGuiJNI.igImFloorFloat(f);
  }

  public static void igImFloorVec2(ImVec2 pOut, ImVec2 v) {
    CImGuiJNI.igImFloorVec2(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(v), v);
  }

  public static int igImModPositive(int a, int b) {
    return CImGuiJNI.igImModPositive(a, b);
  }

  public static float igImDot(ImVec2 a, ImVec2 b) {
    return CImGuiJNI.igImDot(ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b);
  }

  public static void igImRotate(ImVec2 pOut, ImVec2 v, float cos_a, float sin_a) {
    CImGuiJNI.igImRotate(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(v), v, cos_a, sin_a);
  }

  public static float igImLinearSweep(float current, float target, float speed) {
    return CImGuiJNI.igImLinearSweep(current, target, speed);
  }

  public static void igImMul(ImVec2 pOut, ImVec2 lhs, ImVec2 rhs) {
    CImGuiJNI.igImMul(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(lhs), lhs, ImVec2.getCPtr(rhs), rhs);
  }

  public static void igImBezierCalc(ImVec2 pOut, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, float t) {
    CImGuiJNI.igImBezierCalc(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, ImVec2.getCPtr(p4), p4, t);
  }

  public static void igImBezierClosestPoint(ImVec2 pOut, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 p, int num_segments) {
    CImGuiJNI.igImBezierClosestPoint(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, ImVec2.getCPtr(p4), p4, ImVec2.getCPtr(p), p, num_segments);
  }

  public static void igImBezierClosestPointCasteljau(ImVec2 pOut, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 p, float tess_tol) {
    CImGuiJNI.igImBezierClosestPointCasteljau(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(p1), p1, ImVec2.getCPtr(p2), p2, ImVec2.getCPtr(p3), p3, ImVec2.getCPtr(p4), p4, ImVec2.getCPtr(p), p, tess_tol);
  }

  public static void igImLineClosestPoint(ImVec2 pOut, ImVec2 a, ImVec2 b, ImVec2 p) {
    CImGuiJNI.igImLineClosestPoint(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, ImVec2.getCPtr(p), p);
  }

  public static boolean igImTriangleContainsPoint(ImVec2 a, ImVec2 b, ImVec2 c, ImVec2 p) {
    return CImGuiJNI.igImTriangleContainsPoint(ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, ImVec2.getCPtr(c), c, ImVec2.getCPtr(p), p);
  }

  public static void igImTriangleClosestPoint(ImVec2 pOut, ImVec2 a, ImVec2 b, ImVec2 c, ImVec2 p) {
    CImGuiJNI.igImTriangleClosestPoint(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, ImVec2.getCPtr(c), c, ImVec2.getCPtr(p), p);
  }

  public static void igImTriangleBarycentricCoords(ImVec2 a, ImVec2 b, ImVec2 c, ImVec2 p, float out_u, float out_v, float out_w) {
    CImGuiJNI.igImTriangleBarycentricCoords(ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, ImVec2.getCPtr(c), c, ImVec2.getCPtr(p), p, out_u, out_v, out_w);
  }

  public static float igImTriangleArea(ImVec2 a, ImVec2 b, ImVec2 c) {
    return CImGuiJNI.igImTriangleArea(ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, ImVec2.getCPtr(c), c);
  }

  public static int igImGetDirQuadrantFromDelta(float dx, float dy) {
    return CImGuiJNI.igImGetDirQuadrantFromDelta(dx, dy);
  }

  public static ImVec1 ImVec1_ImVec1Nil() {
    long cPtr = CImGuiJNI.ImVec1_ImVec1Nil();
    return (cPtr == 0) ? null : new ImVec1(cPtr, false);
  }

  public static void ImVec1_destroy(ImVec1 self) {
    CImGuiJNI.ImVec1_destroy(ImVec1.getCPtr(self), self);
  }

  public static ImVec1 ImVec1_ImVec1Float(float _x) {
    long cPtr = CImGuiJNI.ImVec1_ImVec1Float(_x);
    return (cPtr == 0) ? null : new ImVec1(cPtr, false);
  }

  public static ImVec2ih ImVec2ih_ImVec2ihNil() {
    long cPtr = CImGuiJNI.ImVec2ih_ImVec2ihNil();
    return (cPtr == 0) ? null : new ImVec2ih(cPtr, false);
  }

  public static void ImVec2ih_destroy(ImVec2ih self) {
    CImGuiJNI.ImVec2ih_destroy(ImVec2ih.getCPtr(self), self);
  }

  public static ImVec2ih ImVec2ih_ImVec2ihshort(short _x, short _y) {
    long cPtr = CImGuiJNI.ImVec2ih_ImVec2ihshort(_x, _y);
    return (cPtr == 0) ? null : new ImVec2ih(cPtr, false);
  }

  public static ImVec2ih ImVec2ih_ImVec2ihVec2(ImVec2 rhs) {
    long cPtr = CImGuiJNI.ImVec2ih_ImVec2ihVec2(ImVec2.getCPtr(rhs), rhs);
    return (cPtr == 0) ? null : new ImVec2ih(cPtr, false);
  }

  public static ImRect ImRect_ImRectNil() {
    long cPtr = CImGuiJNI.ImRect_ImRectNil();
    return (cPtr == 0) ? null : new ImRect(cPtr, false);
  }

  public static void ImRect_destroy(ImRect self) {
    CImGuiJNI.ImRect_destroy(ImRect.getCPtr(self), self);
  }

  public static ImRect ImRect_ImRectVec2(ImVec2 min, ImVec2 max) {
    long cPtr = CImGuiJNI.ImRect_ImRectVec2(ImVec2.getCPtr(min), min, ImVec2.getCPtr(max), max);
    return (cPtr == 0) ? null : new ImRect(cPtr, false);
  }

  public static ImRect ImRect_ImRectVec4(ImVec4 v) {
    long cPtr = CImGuiJNI.ImRect_ImRectVec4(ImVec4.getCPtr(v), v);
    return (cPtr == 0) ? null : new ImRect(cPtr, false);
  }

  public static ImRect ImRect_ImRectFloat(float x1, float y1, float x2, float y2) {
    long cPtr = CImGuiJNI.ImRect_ImRectFloat(x1, y1, x2, y2);
    return (cPtr == 0) ? null : new ImRect(cPtr, false);
  }

  public static void ImRect_GetCenter(ImVec2 pOut, ImRect self) {
    CImGuiJNI.ImRect_GetCenter(ImVec2.getCPtr(pOut), pOut, ImRect.getCPtr(self), self);
  }

  public static void ImRect_GetSize(ImVec2 pOut, ImRect self) {
    CImGuiJNI.ImRect_GetSize(ImVec2.getCPtr(pOut), pOut, ImRect.getCPtr(self), self);
  }

  public static float ImRect_GetWidth(ImRect self) {
    return CImGuiJNI.ImRect_GetWidth(ImRect.getCPtr(self), self);
  }

  public static float ImRect_GetHeight(ImRect self) {
    return CImGuiJNI.ImRect_GetHeight(ImRect.getCPtr(self), self);
  }

  public static void ImRect_GetTL(ImVec2 pOut, ImRect self) {
    CImGuiJNI.ImRect_GetTL(ImVec2.getCPtr(pOut), pOut, ImRect.getCPtr(self), self);
  }

  public static void ImRect_GetTR(ImVec2 pOut, ImRect self) {
    CImGuiJNI.ImRect_GetTR(ImVec2.getCPtr(pOut), pOut, ImRect.getCPtr(self), self);
  }

  public static void ImRect_GetBL(ImVec2 pOut, ImRect self) {
    CImGuiJNI.ImRect_GetBL(ImVec2.getCPtr(pOut), pOut, ImRect.getCPtr(self), self);
  }

  public static void ImRect_GetBR(ImVec2 pOut, ImRect self) {
    CImGuiJNI.ImRect_GetBR(ImVec2.getCPtr(pOut), pOut, ImRect.getCPtr(self), self);
  }

  public static boolean ImRect_ContainsVec2(ImRect self, ImVec2 p) {
    return CImGuiJNI.ImRect_ContainsVec2(ImRect.getCPtr(self), self, ImVec2.getCPtr(p), p);
  }

  public static boolean ImRect_ContainsRect(ImRect self, ImRect r) {
    return CImGuiJNI.ImRect_ContainsRect(ImRect.getCPtr(self), self, ImRect.getCPtr(r), r);
  }

  public static boolean ImRect_Overlaps(ImRect self, ImRect r) {
    return CImGuiJNI.ImRect_Overlaps(ImRect.getCPtr(self), self, ImRect.getCPtr(r), r);
  }

  public static void ImRect_AddVec2(ImRect self, ImVec2 p) {
    CImGuiJNI.ImRect_AddVec2(ImRect.getCPtr(self), self, ImVec2.getCPtr(p), p);
  }

  public static void ImRect_AddRect(ImRect self, ImRect r) {
    CImGuiJNI.ImRect_AddRect(ImRect.getCPtr(self), self, ImRect.getCPtr(r), r);
  }

  public static void ImRect_ExpandFloat(ImRect self, float amount) {
    CImGuiJNI.ImRect_ExpandFloat(ImRect.getCPtr(self), self, amount);
  }

  public static void ImRect_ExpandVec2(ImRect self, ImVec2 amount) {
    CImGuiJNI.ImRect_ExpandVec2(ImRect.getCPtr(self), self, ImVec2.getCPtr(amount), amount);
  }

  public static void ImRect_Translate(ImRect self, ImVec2 d) {
    CImGuiJNI.ImRect_Translate(ImRect.getCPtr(self), self, ImVec2.getCPtr(d), d);
  }

  public static void ImRect_TranslateX(ImRect self, float dx) {
    CImGuiJNI.ImRect_TranslateX(ImRect.getCPtr(self), self, dx);
  }

  public static void ImRect_TranslateY(ImRect self, float dy) {
    CImGuiJNI.ImRect_TranslateY(ImRect.getCPtr(self), self, dy);
  }

  public static void ImRect_ClipWith(ImRect self, ImRect r) {
    CImGuiJNI.ImRect_ClipWith(ImRect.getCPtr(self), self, ImRect.getCPtr(r), r);
  }

  public static void ImRect_ClipWithFull(ImRect self, ImRect r) {
    CImGuiJNI.ImRect_ClipWithFull(ImRect.getCPtr(self), self, ImRect.getCPtr(r), r);
  }

  public static void ImRect_Floor(ImRect self) {
    CImGuiJNI.ImRect_Floor(ImRect.getCPtr(self), self);
  }

  public static boolean ImRect_IsInverted(ImRect self) {
    return CImGuiJNI.ImRect_IsInverted(ImRect.getCPtr(self), self);
  }

  public static boolean igImBitArrayTestBit(SWIGTYPE_p_unsigned_int arr, int n) {
    return CImGuiJNI.igImBitArrayTestBit(SWIGTYPE_p_unsigned_int.getCPtr(arr), n);
  }

  public static void igImBitArrayClearBit(SWIGTYPE_p_unsigned_int arr, int n) {
    CImGuiJNI.igImBitArrayClearBit(SWIGTYPE_p_unsigned_int.getCPtr(arr), n);
  }

  public static void igImBitArraySetBit(SWIGTYPE_p_unsigned_int arr, int n) {
    CImGuiJNI.igImBitArraySetBit(SWIGTYPE_p_unsigned_int.getCPtr(arr), n);
  }

  public static void igImBitArraySetBitRange(SWIGTYPE_p_unsigned_int arr, int n, int n2) {
    CImGuiJNI.igImBitArraySetBitRange(SWIGTYPE_p_unsigned_int.getCPtr(arr), n, n2);
  }

  public static void ImBitVector_Create(ImBitVector self, int sz) {
    CImGuiJNI.ImBitVector_Create(ImBitVector.getCPtr(self), self, sz);
  }

  public static void ImBitVector_Clear(ImBitVector self) {
    CImGuiJNI.ImBitVector_Clear(ImBitVector.getCPtr(self), self);
  }

  public static boolean ImBitVector_TestBit(ImBitVector self, int n) {
    return CImGuiJNI.ImBitVector_TestBit(ImBitVector.getCPtr(self), self, n);
  }

  public static void ImBitVector_SetBit(ImBitVector self, int n) {
    CImGuiJNI.ImBitVector_SetBit(ImBitVector.getCPtr(self), self, n);
  }

  public static void ImBitVector_ClearBit(ImBitVector self, int n) {
    CImGuiJNI.ImBitVector_ClearBit(ImBitVector.getCPtr(self), self, n);
  }

  public static ImDrawListSharedData ImDrawListSharedData_ImDrawListSharedData() {
    long cPtr = CImGuiJNI.ImDrawListSharedData_ImDrawListSharedData();
    return (cPtr == 0) ? null : new ImDrawListSharedData(cPtr, false);
  }

  public static void ImDrawListSharedData_destroy(ImDrawListSharedData self) {
    CImGuiJNI.ImDrawListSharedData_destroy(ImDrawListSharedData.getCPtr(self), self);
  }

  public static void ImDrawListSharedData_SetCircleSegmentMaxError(ImDrawListSharedData self, float max_error) {
    CImGuiJNI.ImDrawListSharedData_SetCircleSegmentMaxError(ImDrawListSharedData.getCPtr(self), self, max_error);
  }

  public static void ImDrawDataBuilder_Clear(ImDrawDataBuilder self) {
    CImGuiJNI.ImDrawDataBuilder_Clear(ImDrawDataBuilder.getCPtr(self), self);
  }

  public static void ImDrawDataBuilder_ClearFreeMemory(ImDrawDataBuilder self) {
    CImGuiJNI.ImDrawDataBuilder_ClearFreeMemory(ImDrawDataBuilder.getCPtr(self), self);
  }

  public static void ImDrawDataBuilder_FlattenIntoSingleLayer(ImDrawDataBuilder self) {
    CImGuiJNI.ImDrawDataBuilder_FlattenIntoSingleLayer(ImDrawDataBuilder.getCPtr(self), self);
  }

  public static ImGuiStyleMod ImGuiStyleMod_ImGuiStyleModInt(int idx, int v) {
    long cPtr = CImGuiJNI.ImGuiStyleMod_ImGuiStyleModInt(idx, v);
    return (cPtr == 0) ? null : new ImGuiStyleMod(cPtr, false);
  }

  public static void ImGuiStyleMod_destroy(ImGuiStyleMod self) {
    CImGuiJNI.ImGuiStyleMod_destroy(ImGuiStyleMod.getCPtr(self), self);
  }

  public static ImGuiStyleMod ImGuiStyleMod_ImGuiStyleModFloat(int idx, float v) {
    long cPtr = CImGuiJNI.ImGuiStyleMod_ImGuiStyleModFloat(idx, v);
    return (cPtr == 0) ? null : new ImGuiStyleMod(cPtr, false);
  }

  public static ImGuiStyleMod ImGuiStyleMod_ImGuiStyleModVec2(int idx, ImVec2 v) {
    long cPtr = CImGuiJNI.ImGuiStyleMod_ImGuiStyleModVec2(idx, ImVec2.getCPtr(v), v);
    return (cPtr == 0) ? null : new ImGuiStyleMod(cPtr, false);
  }

  public static ImGuiMenuColumns ImGuiMenuColumns_ImGuiMenuColumns() {
    long cPtr = CImGuiJNI.ImGuiMenuColumns_ImGuiMenuColumns();
    return (cPtr == 0) ? null : new ImGuiMenuColumns(cPtr, false);
  }

  public static void ImGuiMenuColumns_destroy(ImGuiMenuColumns self) {
    CImGuiJNI.ImGuiMenuColumns_destroy(ImGuiMenuColumns.getCPtr(self), self);
  }

  public static void ImGuiMenuColumns_Update(ImGuiMenuColumns self, int count, float spacing, boolean clear) {
    CImGuiJNI.ImGuiMenuColumns_Update(ImGuiMenuColumns.getCPtr(self), self, count, spacing, clear);
  }

  public static float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns self, float w0, float w1, float w2) {
    return CImGuiJNI.ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns.getCPtr(self), self, w0, w1, w2);
  }

  public static float ImGuiMenuColumns_CalcExtraSpace(ImGuiMenuColumns self, float avail_w) {
    return CImGuiJNI.ImGuiMenuColumns_CalcExtraSpace(ImGuiMenuColumns.getCPtr(self), self, avail_w);
  }

  public static ImGuiInputTextState ImGuiInputTextState_ImGuiInputTextState() {
    long cPtr = CImGuiJNI.ImGuiInputTextState_ImGuiInputTextState();
    return (cPtr == 0) ? null : new ImGuiInputTextState(cPtr, false);
  }

  public static void ImGuiInputTextState_destroy(ImGuiInputTextState self) {
    CImGuiJNI.ImGuiInputTextState_destroy(ImGuiInputTextState.getCPtr(self), self);
  }

  public static void ImGuiInputTextState_ClearText(ImGuiInputTextState self) {
    CImGuiJNI.ImGuiInputTextState_ClearText(ImGuiInputTextState.getCPtr(self), self);
  }

  public static void ImGuiInputTextState_ClearFreeMemory(ImGuiInputTextState self) {
    CImGuiJNI.ImGuiInputTextState_ClearFreeMemory(ImGuiInputTextState.getCPtr(self), self);
  }

  public static int ImGuiInputTextState_GetUndoAvailCount(ImGuiInputTextState self) {
    return CImGuiJNI.ImGuiInputTextState_GetUndoAvailCount(ImGuiInputTextState.getCPtr(self), self);
  }

  public static int ImGuiInputTextState_GetRedoAvailCount(ImGuiInputTextState self) {
    return CImGuiJNI.ImGuiInputTextState_GetRedoAvailCount(ImGuiInputTextState.getCPtr(self), self);
  }

  public static void ImGuiInputTextState_OnKeyPressed(ImGuiInputTextState self, int key) {
    CImGuiJNI.ImGuiInputTextState_OnKeyPressed(ImGuiInputTextState.getCPtr(self), self, key);
  }

  public static void ImGuiInputTextState_CursorAnimReset(ImGuiInputTextState self) {
    CImGuiJNI.ImGuiInputTextState_CursorAnimReset(ImGuiInputTextState.getCPtr(self), self);
  }

  public static void ImGuiInputTextState_CursorClamp(ImGuiInputTextState self) {
    CImGuiJNI.ImGuiInputTextState_CursorClamp(ImGuiInputTextState.getCPtr(self), self);
  }

  public static boolean ImGuiInputTextState_HasSelection(ImGuiInputTextState self) {
    return CImGuiJNI.ImGuiInputTextState_HasSelection(ImGuiInputTextState.getCPtr(self), self);
  }

  public static void ImGuiInputTextState_ClearSelection(ImGuiInputTextState self) {
    CImGuiJNI.ImGuiInputTextState_ClearSelection(ImGuiInputTextState.getCPtr(self), self);
  }

  public static void ImGuiInputTextState_SelectAll(ImGuiInputTextState self) {
    CImGuiJNI.ImGuiInputTextState_SelectAll(ImGuiInputTextState.getCPtr(self), self);
  }

  public static ImGuiPopupData ImGuiPopupData_ImGuiPopupData() {
    long cPtr = CImGuiJNI.ImGuiPopupData_ImGuiPopupData();
    return (cPtr == 0) ? null : new ImGuiPopupData(cPtr, false);
  }

  public static void ImGuiPopupData_destroy(ImGuiPopupData self) {
    CImGuiJNI.ImGuiPopupData_destroy(ImGuiPopupData.getCPtr(self), self);
  }

  public static ImGuiNavMoveResult ImGuiNavMoveResult_ImGuiNavMoveResult() {
    long cPtr = CImGuiJNI.ImGuiNavMoveResult_ImGuiNavMoveResult();
    return (cPtr == 0) ? null : new ImGuiNavMoveResult(cPtr, false);
  }

  public static void ImGuiNavMoveResult_destroy(ImGuiNavMoveResult self) {
    CImGuiJNI.ImGuiNavMoveResult_destroy(ImGuiNavMoveResult.getCPtr(self), self);
  }

  public static void ImGuiNavMoveResult_Clear(ImGuiNavMoveResult self) {
    CImGuiJNI.ImGuiNavMoveResult_Clear(ImGuiNavMoveResult.getCPtr(self), self);
  }

  public static ImGuiNextWindowData ImGuiNextWindowData_ImGuiNextWindowData() {
    long cPtr = CImGuiJNI.ImGuiNextWindowData_ImGuiNextWindowData();
    return (cPtr == 0) ? null : new ImGuiNextWindowData(cPtr, false);
  }

  public static void ImGuiNextWindowData_destroy(ImGuiNextWindowData self) {
    CImGuiJNI.ImGuiNextWindowData_destroy(ImGuiNextWindowData.getCPtr(self), self);
  }

  public static void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData self) {
    CImGuiJNI.ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData.getCPtr(self), self);
  }

  public static ImGuiNextItemData ImGuiNextItemData_ImGuiNextItemData() {
    long cPtr = CImGuiJNI.ImGuiNextItemData_ImGuiNextItemData();
    return (cPtr == 0) ? null : new ImGuiNextItemData(cPtr, false);
  }

  public static void ImGuiNextItemData_destroy(ImGuiNextItemData self) {
    CImGuiJNI.ImGuiNextItemData_destroy(ImGuiNextItemData.getCPtr(self), self);
  }

  public static void ImGuiNextItemData_ClearFlags(ImGuiNextItemData self) {
    CImGuiJNI.ImGuiNextItemData_ClearFlags(ImGuiNextItemData.getCPtr(self), self);
  }

  public static ImGuiPtrOrIndex ImGuiPtrOrIndex_ImGuiPtrOrIndexPtr(SWIGTYPE_p_void ptr) {
    long cPtr = CImGuiJNI.ImGuiPtrOrIndex_ImGuiPtrOrIndexPtr(SWIGTYPE_p_void.getCPtr(ptr));
    return (cPtr == 0) ? null : new ImGuiPtrOrIndex(cPtr, false);
  }

  public static void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex self) {
    CImGuiJNI.ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex.getCPtr(self), self);
  }

  public static ImGuiPtrOrIndex ImGuiPtrOrIndex_ImGuiPtrOrIndexInt(int index) {
    long cPtr = CImGuiJNI.ImGuiPtrOrIndex_ImGuiPtrOrIndexInt(index);
    return (cPtr == 0) ? null : new ImGuiPtrOrIndex(cPtr, false);
  }

  public static ImGuiColumnData ImGuiColumnData_ImGuiColumnData() {
    long cPtr = CImGuiJNI.ImGuiColumnData_ImGuiColumnData();
    return (cPtr == 0) ? null : new ImGuiColumnData(cPtr, false);
  }

  public static void ImGuiColumnData_destroy(ImGuiColumnData self) {
    CImGuiJNI.ImGuiColumnData_destroy(ImGuiColumnData.getCPtr(self), self);
  }

  public static ImGuiColumns ImGuiColumns_ImGuiColumns() {
    long cPtr = CImGuiJNI.ImGuiColumns_ImGuiColumns();
    return (cPtr == 0) ? null : new ImGuiColumns(cPtr, false);
  }

  public static void ImGuiColumns_destroy(ImGuiColumns self) {
    CImGuiJNI.ImGuiColumns_destroy(ImGuiColumns.getCPtr(self), self);
  }

  public static void ImGuiColumns_Clear(ImGuiColumns self) {
    CImGuiJNI.ImGuiColumns_Clear(ImGuiColumns.getCPtr(self), self);
  }

  public static ImGuiDockNode ImGuiDockNode_ImGuiDockNode(long id) {
    long cPtr = CImGuiJNI.ImGuiDockNode_ImGuiDockNode(id);
    return (cPtr == 0) ? null : new ImGuiDockNode(cPtr, false);
  }

  public static void ImGuiDockNode_destroy(ImGuiDockNode self) {
    CImGuiJNI.ImGuiDockNode_destroy(ImGuiDockNode.getCPtr(self), self);
  }

  public static boolean ImGuiDockNode_IsRootNode(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_IsRootNode(ImGuiDockNode.getCPtr(self), self);
  }

  public static boolean ImGuiDockNode_IsDockSpace(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_IsDockSpace(ImGuiDockNode.getCPtr(self), self);
  }

  public static boolean ImGuiDockNode_IsFloatingNode(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_IsFloatingNode(ImGuiDockNode.getCPtr(self), self);
  }

  public static boolean ImGuiDockNode_IsCentralNode(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_IsCentralNode(ImGuiDockNode.getCPtr(self), self);
  }

  public static boolean ImGuiDockNode_IsHiddenTabBar(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_IsHiddenTabBar(ImGuiDockNode.getCPtr(self), self);
  }

  public static boolean ImGuiDockNode_IsNoTabBar(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_IsNoTabBar(ImGuiDockNode.getCPtr(self), self);
  }

  public static boolean ImGuiDockNode_IsSplitNode(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_IsSplitNode(ImGuiDockNode.getCPtr(self), self);
  }

  public static boolean ImGuiDockNode_IsLeafNode(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_IsLeafNode(ImGuiDockNode.getCPtr(self), self);
  }

  public static boolean ImGuiDockNode_IsEmpty(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_IsEmpty(ImGuiDockNode.getCPtr(self), self);
  }

  public static int ImGuiDockNode_GetMergedFlags(ImGuiDockNode self) {
    return CImGuiJNI.ImGuiDockNode_GetMergedFlags(ImGuiDockNode.getCPtr(self), self);
  }

  public static void ImGuiDockNode_Rect(ImRect pOut, ImGuiDockNode self) {
    CImGuiJNI.ImGuiDockNode_Rect(ImRect.getCPtr(pOut), pOut, ImGuiDockNode.getCPtr(self), self);
  }

  public static ImGuiDockContext ImGuiDockContext_ImGuiDockContext() {
    long cPtr = CImGuiJNI.ImGuiDockContext_ImGuiDockContext();
    return (cPtr == 0) ? null : new ImGuiDockContext(cPtr, false);
  }

  public static void ImGuiDockContext_destroy(ImGuiDockContext self) {
    CImGuiJNI.ImGuiDockContext_destroy(ImGuiDockContext.getCPtr(self), self);
  }

  public static ImGuiViewportP ImGuiViewportP_ImGuiViewportP() {
    long cPtr = CImGuiJNI.ImGuiViewportP_ImGuiViewportP();
    return (cPtr == 0) ? null : new ImGuiViewportP(cPtr, false);
  }

  public static void ImGuiViewportP_destroy(ImGuiViewportP self) {
    CImGuiJNI.ImGuiViewportP_destroy(ImGuiViewportP.getCPtr(self), self);
  }

  public static void ImGuiViewportP_GetMainRect(ImRect pOut, ImGuiViewportP self) {
    CImGuiJNI.ImGuiViewportP_GetMainRect(ImRect.getCPtr(pOut), pOut, ImGuiViewportP.getCPtr(self), self);
  }

  public static void ImGuiViewportP_GetWorkRect(ImRect pOut, ImGuiViewportP self) {
    CImGuiJNI.ImGuiViewportP_GetWorkRect(ImRect.getCPtr(pOut), pOut, ImGuiViewportP.getCPtr(self), self);
  }

  public static void ImGuiViewportP_ClearRequestFlags(ImGuiViewportP self) {
    CImGuiJNI.ImGuiViewportP_ClearRequestFlags(ImGuiViewportP.getCPtr(self), self);
  }

  public static ImGuiWindowSettings ImGuiWindowSettings_ImGuiWindowSettings() {
    long cPtr = CImGuiJNI.ImGuiWindowSettings_ImGuiWindowSettings();
    return (cPtr == 0) ? null : new ImGuiWindowSettings(cPtr, false);
  }

  public static void ImGuiWindowSettings_destroy(ImGuiWindowSettings self) {
    CImGuiJNI.ImGuiWindowSettings_destroy(ImGuiWindowSettings.getCPtr(self), self);
  }

  public static String ImGuiWindowSettings_GetName(ImGuiWindowSettings self) {
    return CImGuiJNI.ImGuiWindowSettings_GetName(ImGuiWindowSettings.getCPtr(self), self);
  }

  public static ImGuiSettingsHandler ImGuiSettingsHandler_ImGuiSettingsHandler() {
    long cPtr = CImGuiJNI.ImGuiSettingsHandler_ImGuiSettingsHandler();
    return (cPtr == 0) ? null : new ImGuiSettingsHandler(cPtr, false);
  }

  public static void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler self) {
    CImGuiJNI.ImGuiSettingsHandler_destroy(ImGuiSettingsHandler.getCPtr(self), self);
  }

  public static ImGuiContext ImGuiContext_ImGuiContext(ImFontAtlas shared_font_atlas) {
    long cPtr = CImGuiJNI.ImGuiContext_ImGuiContext(ImFontAtlas.getCPtr(shared_font_atlas), shared_font_atlas);
    return (cPtr == 0) ? null : new ImGuiContext(cPtr, false);
  }

  public static void ImGuiContext_destroy(ImGuiContext self) {
    CImGuiJNI.ImGuiContext_destroy(ImGuiContext.getCPtr(self), self);
  }

  public static ImGuiWindowTempData ImGuiWindowTempData_ImGuiWindowTempData() {
    long cPtr = CImGuiJNI.ImGuiWindowTempData_ImGuiWindowTempData();
    return (cPtr == 0) ? null : new ImGuiWindowTempData(cPtr, false);
  }

  public static void ImGuiWindowTempData_destroy(ImGuiWindowTempData self) {
    CImGuiJNI.ImGuiWindowTempData_destroy(ImGuiWindowTempData.getCPtr(self), self);
  }

  public static ImGuiWindow ImGuiWindow_ImGuiWindow(ImGuiContext context, String name) {
    long cPtr = CImGuiJNI.ImGuiWindow_ImGuiWindow(ImGuiContext.getCPtr(context), context, name);
    return (cPtr == 0) ? null : new ImGuiWindow(cPtr, false);
  }

  public static void ImGuiWindow_destroy(ImGuiWindow self) {
    CImGuiJNI.ImGuiWindow_destroy(ImGuiWindow.getCPtr(self), self);
  }

  public static long ImGuiWindow_GetIDStr(ImGuiWindow self, String str, String str_end) {
    return CImGuiJNI.ImGuiWindow_GetIDStr(ImGuiWindow.getCPtr(self), self, str, str_end);
  }

  public static long ImGuiWindow_GetIDPtr(ImGuiWindow self, SWIGTYPE_p_void ptr) {
    return CImGuiJNI.ImGuiWindow_GetIDPtr(ImGuiWindow.getCPtr(self), self, SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static long ImGuiWindow_GetIDInt(ImGuiWindow self, int n) {
    return CImGuiJNI.ImGuiWindow_GetIDInt(ImGuiWindow.getCPtr(self), self, n);
  }

  public static long ImGuiWindow_GetIDNoKeepAliveStr(ImGuiWindow self, String str, String str_end) {
    return CImGuiJNI.ImGuiWindow_GetIDNoKeepAliveStr(ImGuiWindow.getCPtr(self), self, str, str_end);
  }

  public static long ImGuiWindow_GetIDNoKeepAlivePtr(ImGuiWindow self, SWIGTYPE_p_void ptr) {
    return CImGuiJNI.ImGuiWindow_GetIDNoKeepAlivePtr(ImGuiWindow.getCPtr(self), self, SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static long ImGuiWindow_GetIDNoKeepAliveInt(ImGuiWindow self, int n) {
    return CImGuiJNI.ImGuiWindow_GetIDNoKeepAliveInt(ImGuiWindow.getCPtr(self), self, n);
  }

  public static long ImGuiWindow_GetIDFromRectangle(ImGuiWindow self, ImRect r_abs) {
    return CImGuiJNI.ImGuiWindow_GetIDFromRectangle(ImGuiWindow.getCPtr(self), self, ImRect.getCPtr(r_abs), r_abs);
  }

  public static void ImGuiWindow_Rect(ImRect pOut, ImGuiWindow self) {
    CImGuiJNI.ImGuiWindow_Rect(ImRect.getCPtr(pOut), pOut, ImGuiWindow.getCPtr(self), self);
  }

  public static float ImGuiWindow_CalcFontSize(ImGuiWindow self) {
    return CImGuiJNI.ImGuiWindow_CalcFontSize(ImGuiWindow.getCPtr(self), self);
  }

  public static float ImGuiWindow_TitleBarHeight(ImGuiWindow self) {
    return CImGuiJNI.ImGuiWindow_TitleBarHeight(ImGuiWindow.getCPtr(self), self);
  }

  public static void ImGuiWindow_TitleBarRect(ImRect pOut, ImGuiWindow self) {
    CImGuiJNI.ImGuiWindow_TitleBarRect(ImRect.getCPtr(pOut), pOut, ImGuiWindow.getCPtr(self), self);
  }

  public static float ImGuiWindow_MenuBarHeight(ImGuiWindow self) {
    return CImGuiJNI.ImGuiWindow_MenuBarHeight(ImGuiWindow.getCPtr(self), self);
  }

  public static void ImGuiWindow_MenuBarRect(ImRect pOut, ImGuiWindow self) {
    CImGuiJNI.ImGuiWindow_MenuBarRect(ImRect.getCPtr(pOut), pOut, ImGuiWindow.getCPtr(self), self);
  }

  public static ImGuiItemHoveredDataBackup ImGuiItemHoveredDataBackup_ImGuiItemHoveredDataBackup() {
    long cPtr = CImGuiJNI.ImGuiItemHoveredDataBackup_ImGuiItemHoveredDataBackup();
    return (cPtr == 0) ? null : new ImGuiItemHoveredDataBackup(cPtr, false);
  }

  public static void ImGuiItemHoveredDataBackup_destroy(ImGuiItemHoveredDataBackup self) {
    CImGuiJNI.ImGuiItemHoveredDataBackup_destroy(ImGuiItemHoveredDataBackup.getCPtr(self), self);
  }

  public static void ImGuiItemHoveredDataBackup_Backup(ImGuiItemHoveredDataBackup self) {
    CImGuiJNI.ImGuiItemHoveredDataBackup_Backup(ImGuiItemHoveredDataBackup.getCPtr(self), self);
  }

  public static void ImGuiItemHoveredDataBackup_Restore(ImGuiItemHoveredDataBackup self) {
    CImGuiJNI.ImGuiItemHoveredDataBackup_Restore(ImGuiItemHoveredDataBackup.getCPtr(self), self);
  }

  public static ImGuiTabItem ImGuiTabItem_ImGuiTabItem() {
    long cPtr = CImGuiJNI.ImGuiTabItem_ImGuiTabItem();
    return (cPtr == 0) ? null : new ImGuiTabItem(cPtr, false);
  }

  public static void ImGuiTabItem_destroy(ImGuiTabItem self) {
    CImGuiJNI.ImGuiTabItem_destroy(ImGuiTabItem.getCPtr(self), self);
  }

  public static ImGuiTabBar ImGuiTabBar_ImGuiTabBar() {
    long cPtr = CImGuiJNI.ImGuiTabBar_ImGuiTabBar();
    return (cPtr == 0) ? null : new ImGuiTabBar(cPtr, false);
  }

  public static void ImGuiTabBar_destroy(ImGuiTabBar self) {
    CImGuiJNI.ImGuiTabBar_destroy(ImGuiTabBar.getCPtr(self), self);
  }

  public static int ImGuiTabBar_GetTabOrder(ImGuiTabBar self, ImGuiTabItem tab) {
    return CImGuiJNI.ImGuiTabBar_GetTabOrder(ImGuiTabBar.getCPtr(self), self, ImGuiTabItem.getCPtr(tab), tab);
  }

  public static String ImGuiTabBar_GetTabName(ImGuiTabBar self, ImGuiTabItem tab) {
    return CImGuiJNI.ImGuiTabBar_GetTabName(ImGuiTabBar.getCPtr(self), self, ImGuiTabItem.getCPtr(tab), tab);
  }

  public static ImGuiWindow igGetCurrentWindowRead() {
    long cPtr = CImGuiJNI.igGetCurrentWindowRead();
    return (cPtr == 0) ? null : new ImGuiWindow(cPtr, false);
  }

  public static ImGuiWindow igGetCurrentWindow() {
    long cPtr = CImGuiJNI.igGetCurrentWindow();
    return (cPtr == 0) ? null : new ImGuiWindow(cPtr, false);
  }

  public static ImGuiWindow igFindWindowByID(long id) {
    long cPtr = CImGuiJNI.igFindWindowByID(id);
    return (cPtr == 0) ? null : new ImGuiWindow(cPtr, false);
  }

  public static ImGuiWindow igFindWindowByName(String name) {
    long cPtr = CImGuiJNI.igFindWindowByName(name);
    return (cPtr == 0) ? null : new ImGuiWindow(cPtr, false);
  }

  public static void igUpdateWindowParentAndRootLinks(ImGuiWindow window, int flags, ImGuiWindow parent_window) {
    CImGuiJNI.igUpdateWindowParentAndRootLinks(ImGuiWindow.getCPtr(window), window, flags, ImGuiWindow.getCPtr(parent_window), parent_window);
  }

  public static void igCalcWindowExpectedSize(ImVec2 pOut, ImGuiWindow window) {
    CImGuiJNI.igCalcWindowExpectedSize(ImVec2.getCPtr(pOut), pOut, ImGuiWindow.getCPtr(window), window);
  }

  public static boolean igIsWindowChildOf(ImGuiWindow window, ImGuiWindow potential_parent) {
    return CImGuiJNI.igIsWindowChildOf(ImGuiWindow.getCPtr(window), window, ImGuiWindow.getCPtr(potential_parent), potential_parent);
  }

  public static boolean igIsWindowNavFocusable(ImGuiWindow window) {
    return CImGuiJNI.igIsWindowNavFocusable(ImGuiWindow.getCPtr(window), window);
  }

  public static void igGetWindowAllowedExtentRect(ImRect pOut, ImGuiWindow window) {
    CImGuiJNI.igGetWindowAllowedExtentRect(ImRect.getCPtr(pOut), pOut, ImGuiWindow.getCPtr(window), window);
  }

  public static void igSetWindowPosWindowPtr(ImGuiWindow window, ImVec2 pos, int cond) {
    CImGuiJNI.igSetWindowPosWindowPtr(ImGuiWindow.getCPtr(window), window, ImVec2.getCPtr(pos), pos, cond);
  }

  public static void igSetWindowSizeWindowPtr(ImGuiWindow window, ImVec2 size, int cond) {
    CImGuiJNI.igSetWindowSizeWindowPtr(ImGuiWindow.getCPtr(window), window, ImVec2.getCPtr(size), size, cond);
  }

  public static void igSetWindowCollapsedWindowPtr(ImGuiWindow window, boolean collapsed, int cond) {
    CImGuiJNI.igSetWindowCollapsedWindowPtr(ImGuiWindow.getCPtr(window), window, collapsed, cond);
  }

  public static void igSetWindowHitTestHole(ImGuiWindow window, ImVec2 pos, ImVec2 size) {
    CImGuiJNI.igSetWindowHitTestHole(ImGuiWindow.getCPtr(window), window, ImVec2.getCPtr(pos), pos, ImVec2.getCPtr(size), size);
  }

  public static void igFocusWindow(ImGuiWindow window) {
    CImGuiJNI.igFocusWindow(ImGuiWindow.getCPtr(window), window);
  }

  public static void igFocusTopMostWindowUnderOne(ImGuiWindow under_this_window, ImGuiWindow ignore_window) {
    CImGuiJNI.igFocusTopMostWindowUnderOne(ImGuiWindow.getCPtr(under_this_window), under_this_window, ImGuiWindow.getCPtr(ignore_window), ignore_window);
  }

  public static void igBringWindowToFocusFront(ImGuiWindow window) {
    CImGuiJNI.igBringWindowToFocusFront(ImGuiWindow.getCPtr(window), window);
  }

  public static void igBringWindowToDisplayFront(ImGuiWindow window) {
    CImGuiJNI.igBringWindowToDisplayFront(ImGuiWindow.getCPtr(window), window);
  }

  public static void igBringWindowToDisplayBack(ImGuiWindow window) {
    CImGuiJNI.igBringWindowToDisplayBack(ImGuiWindow.getCPtr(window), window);
  }

  public static void igSetCurrentFont(ImFont font) {
    CImGuiJNI.igSetCurrentFont(ImFont.getCPtr(font), font);
  }

  public static ImFont igGetDefaultFont() {
    long cPtr = CImGuiJNI.igGetDefaultFont();
    return (cPtr == 0) ? null : new ImFont(cPtr, false);
  }

  public static ImDrawList igGetForegroundDrawListWindowPtr(ImGuiWindow window) {
    long cPtr = CImGuiJNI.igGetForegroundDrawListWindowPtr(ImGuiWindow.getCPtr(window), window);
    return (cPtr == 0) ? null : new ImDrawList(cPtr, false);
  }

  public static void igInitialize(ImGuiContext context) {
    CImGuiJNI.igInitialize(ImGuiContext.getCPtr(context), context);
  }

  public static void igShutdown(ImGuiContext context) {
    CImGuiJNI.igShutdown(ImGuiContext.getCPtr(context), context);
  }

  public static void igUpdateHoveredWindowAndCaptureFlags() {
    CImGuiJNI.igUpdateHoveredWindowAndCaptureFlags();
  }

  public static void igStartMouseMovingWindow(ImGuiWindow window) {
    CImGuiJNI.igStartMouseMovingWindow(ImGuiWindow.getCPtr(window), window);
  }

  public static void igStartMouseMovingWindowOrNode(ImGuiWindow window, ImGuiDockNode node, boolean undock_floating_node) {
    CImGuiJNI.igStartMouseMovingWindowOrNode(ImGuiWindow.getCPtr(window), window, ImGuiDockNode.getCPtr(node), node, undock_floating_node);
  }

  public static void igUpdateMouseMovingWindowNewFrame() {
    CImGuiJNI.igUpdateMouseMovingWindowNewFrame();
  }

  public static void igUpdateMouseMovingWindowEndFrame() {
    CImGuiJNI.igUpdateMouseMovingWindowEndFrame();
  }

  public static void igTranslateWindowsInViewport(ImGuiViewportP viewport, ImVec2 old_pos, ImVec2 new_pos) {
    CImGuiJNI.igTranslateWindowsInViewport(ImGuiViewportP.getCPtr(viewport), viewport, ImVec2.getCPtr(old_pos), old_pos, ImVec2.getCPtr(new_pos), new_pos);
  }

  public static void igScaleWindowsInViewport(ImGuiViewportP viewport, float scale) {
    CImGuiJNI.igScaleWindowsInViewport(ImGuiViewportP.getCPtr(viewport), viewport, scale);
  }

  public static void igDestroyPlatformWindow(ImGuiViewportP viewport) {
    CImGuiJNI.igDestroyPlatformWindow(ImGuiViewportP.getCPtr(viewport), viewport);
  }

  public static void igShowViewportThumbnails() {
    CImGuiJNI.igShowViewportThumbnails();
  }

  public static void igMarkIniSettingsDirtyNil() {
    CImGuiJNI.igMarkIniSettingsDirtyNil();
  }

  public static void igMarkIniSettingsDirtyWindowPtr(ImGuiWindow window) {
    CImGuiJNI.igMarkIniSettingsDirtyWindowPtr(ImGuiWindow.getCPtr(window), window);
  }

  public static void igClearIniSettings() {
    CImGuiJNI.igClearIniSettings();
  }

  public static ImGuiWindowSettings igCreateNewWindowSettings(String name) {
    long cPtr = CImGuiJNI.igCreateNewWindowSettings(name);
    return (cPtr == 0) ? null : new ImGuiWindowSettings(cPtr, false);
  }

  public static ImGuiWindowSettings igFindWindowSettings(long id) {
    long cPtr = CImGuiJNI.igFindWindowSettings(id);
    return (cPtr == 0) ? null : new ImGuiWindowSettings(cPtr, false);
  }

  public static ImGuiWindowSettings igFindOrCreateWindowSettings(String name) {
    long cPtr = CImGuiJNI.igFindOrCreateWindowSettings(name);
    return (cPtr == 0) ? null : new ImGuiWindowSettings(cPtr, false);
  }

  public static ImGuiSettingsHandler igFindSettingsHandler(String type_name) {
    long cPtr = CImGuiJNI.igFindSettingsHandler(type_name);
    return (cPtr == 0) ? null : new ImGuiSettingsHandler(cPtr, false);
  }

  public static void igSetNextWindowScroll(ImVec2 scroll) {
    CImGuiJNI.igSetNextWindowScroll(ImVec2.getCPtr(scroll), scroll);
  }

  public static void igSetScrollXWindowPtr(ImGuiWindow window, float new_scroll_x) {
    CImGuiJNI.igSetScrollXWindowPtr(ImGuiWindow.getCPtr(window), window, new_scroll_x);
  }

  public static void igSetScrollYWindowPtr(ImGuiWindow window, float new_scroll_y) {
    CImGuiJNI.igSetScrollYWindowPtr(ImGuiWindow.getCPtr(window), window, new_scroll_y);
  }

  public static void igSetScrollFromPosXWindowPtr(ImGuiWindow window, float local_x, float center_x_ratio) {
    CImGuiJNI.igSetScrollFromPosXWindowPtr(ImGuiWindow.getCPtr(window), window, local_x, center_x_ratio);
  }

  public static void igSetScrollFromPosYWindowPtr(ImGuiWindow window, float local_y, float center_y_ratio) {
    CImGuiJNI.igSetScrollFromPosYWindowPtr(ImGuiWindow.getCPtr(window), window, local_y, center_y_ratio);
  }

  public static void igScrollToBringRectIntoView(ImVec2 pOut, ImGuiWindow window, ImRect item_rect) {
    CImGuiJNI.igScrollToBringRectIntoView(ImVec2.getCPtr(pOut), pOut, ImGuiWindow.getCPtr(window), window, ImRect.getCPtr(item_rect), item_rect);
  }

  public static long igGetItemID() {
    return CImGuiJNI.igGetItemID();
  }

  public static int igGetItemStatusFlags() {
    return CImGuiJNI.igGetItemStatusFlags();
  }

  public static long igGetActiveID() {
    return CImGuiJNI.igGetActiveID();
  }

  public static long igGetFocusID() {
    return CImGuiJNI.igGetFocusID();
  }

  public static void igSetActiveID(long id, ImGuiWindow window) {
    CImGuiJNI.igSetActiveID(id, ImGuiWindow.getCPtr(window), window);
  }

  public static void igSetFocusID(long id, ImGuiWindow window) {
    CImGuiJNI.igSetFocusID(id, ImGuiWindow.getCPtr(window), window);
  }

  public static void igClearActiveID() {
    CImGuiJNI.igClearActiveID();
  }

  public static long igGetHoveredID() {
    return CImGuiJNI.igGetHoveredID();
  }

  public static void igSetHoveredID(long id) {
    CImGuiJNI.igSetHoveredID(id);
  }

  public static void igKeepAliveID(long id) {
    CImGuiJNI.igKeepAliveID(id);
  }

  public static void igMarkItemEdited(long id) {
    CImGuiJNI.igMarkItemEdited(id);
  }

  public static void igPushOverrideID(long id) {
    CImGuiJNI.igPushOverrideID(id);
  }

  public static void igItemSizeVec2(ImVec2 size, float text_baseline_y) {
    CImGuiJNI.igItemSizeVec2(ImVec2.getCPtr(size), size, text_baseline_y);
  }

  public static void igItemSizeRect(ImRect bb, float text_baseline_y) {
    CImGuiJNI.igItemSizeRect(ImRect.getCPtr(bb), bb, text_baseline_y);
  }

  public static boolean igItemAdd(ImRect bb, long id, ImRect nav_bb) {
    return CImGuiJNI.igItemAdd(ImRect.getCPtr(bb), bb, id, ImRect.getCPtr(nav_bb), nav_bb);
  }

  public static boolean igItemHoverable(ImRect bb, long id) {
    return CImGuiJNI.igItemHoverable(ImRect.getCPtr(bb), bb, id);
  }

  public static boolean igIsClippedEx(ImRect bb, long id, boolean clip_even_when_logged) {
    return CImGuiJNI.igIsClippedEx(ImRect.getCPtr(bb), bb, id, clip_even_when_logged);
  }

  public static boolean igFocusableItemRegister(ImGuiWindow window, long id) {
    return CImGuiJNI.igFocusableItemRegister(ImGuiWindow.getCPtr(window), window, id);
  }

  public static void igFocusableItemUnregister(ImGuiWindow window) {
    CImGuiJNI.igFocusableItemUnregister(ImGuiWindow.getCPtr(window), window);
  }

  public static void igCalcItemSize(ImVec2 pOut, ImVec2 size, float default_w, float default_h) {
    CImGuiJNI.igCalcItemSize(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(size), size, default_w, default_h);
  }

  public static float igCalcWrapWidthForPos(ImVec2 pos, float wrap_pos_x) {
    return CImGuiJNI.igCalcWrapWidthForPos(ImVec2.getCPtr(pos), pos, wrap_pos_x);
  }

  public static void igPushMultiItemsWidths(int components, float width_full) {
    CImGuiJNI.igPushMultiItemsWidths(components, width_full);
  }

  public static void igPushItemFlag(int option, boolean enabled) {
    CImGuiJNI.igPushItemFlag(option, enabled);
  }

  public static void igPopItemFlag() {
    CImGuiJNI.igPopItemFlag();
  }

  public static boolean igIsItemToggledSelection() {
    return CImGuiJNI.igIsItemToggledSelection();
  }

  public static void igGetContentRegionMaxAbs(ImVec2 pOut) {
    CImGuiJNI.igGetContentRegionMaxAbs(ImVec2.getCPtr(pOut), pOut);
  }

  public static void igShrinkWidths(ImGuiShrinkWidthItem items, int count, float width_excess) {
    CImGuiJNI.igShrinkWidths(ImGuiShrinkWidthItem.getCPtr(items), items, count, width_excess);
  }

  public static void igLogBegin(int type, int auto_open_depth) {
    CImGuiJNI.igLogBegin(type, auto_open_depth);
  }

  public static void igLogToBuffer(int auto_open_depth) {
    CImGuiJNI.igLogToBuffer(auto_open_depth);
  }

  public static boolean igBeginChildEx(String name, long id, ImVec2 size_arg, boolean border, int flags) {
    return CImGuiJNI.igBeginChildEx(name, id, ImVec2.getCPtr(size_arg), size_arg, border, flags);
  }

  public static void igOpenPopupEx(long id) {
    CImGuiJNI.igOpenPopupEx(id);
  }

  public static void igClosePopupToLevel(int remaining, boolean restore_focus_to_window_under_popup) {
    CImGuiJNI.igClosePopupToLevel(remaining, restore_focus_to_window_under_popup);
  }

  public static void igClosePopupsOverWindow(ImGuiWindow ref_window, boolean restore_focus_to_window_under_popup) {
    CImGuiJNI.igClosePopupsOverWindow(ImGuiWindow.getCPtr(ref_window), ref_window, restore_focus_to_window_under_popup);
  }

  public static boolean igIsPopupOpenID(long id) {
    return CImGuiJNI.igIsPopupOpenID(id);
  }

  public static boolean igBeginPopupEx(long id, int extra_flags) {
    return CImGuiJNI.igBeginPopupEx(id, extra_flags);
  }

  public static void igBeginTooltipEx(int extra_flags, int tooltip_flags) {
    CImGuiJNI.igBeginTooltipEx(extra_flags, tooltip_flags);
  }

  public static ImGuiWindow igGetTopMostPopupModal() {
    long cPtr = CImGuiJNI.igGetTopMostPopupModal();
    return (cPtr == 0) ? null : new ImGuiWindow(cPtr, false);
  }

  public static void igFindBestWindowPosForPopup(ImVec2 pOut, ImGuiWindow window) {
    CImGuiJNI.igFindBestWindowPosForPopup(ImVec2.getCPtr(pOut), pOut, ImGuiWindow.getCPtr(window), window);
  }

  public static void igFindBestWindowPosForPopupEx(ImVec2 pOut, ImVec2 ref_pos, ImVec2 size, SWIGTYPE_p_int last_dir, ImRect r_outer, ImRect r_avoid, int policy) {
    CImGuiJNI.igFindBestWindowPosForPopupEx(ImVec2.getCPtr(pOut), pOut, ImVec2.getCPtr(ref_pos), ref_pos, ImVec2.getCPtr(size), size, SWIGTYPE_p_int.getCPtr(last_dir), ImRect.getCPtr(r_outer), r_outer, ImRect.getCPtr(r_avoid), r_avoid, policy);
  }

  public static void igNavInitWindow(ImGuiWindow window, boolean force_reinit) {
    CImGuiJNI.igNavInitWindow(ImGuiWindow.getCPtr(window), window, force_reinit);
  }

  public static boolean igNavMoveRequestButNoResultYet() {
    return CImGuiJNI.igNavMoveRequestButNoResultYet();
  }

  public static void igNavMoveRequestCancel() {
    CImGuiJNI.igNavMoveRequestCancel();
  }

  public static void igNavMoveRequestForward(int move_dir, int clip_dir, ImRect bb_rel, int move_flags) {
    CImGuiJNI.igNavMoveRequestForward(move_dir, clip_dir, ImRect.getCPtr(bb_rel), bb_rel, move_flags);
  }

  public static void igNavMoveRequestTryWrapping(ImGuiWindow window, int move_flags) {
    CImGuiJNI.igNavMoveRequestTryWrapping(ImGuiWindow.getCPtr(window), window, move_flags);
  }

  public static float igGetNavInputAmount(int n, int mode) {
    return CImGuiJNI.igGetNavInputAmount(n, mode);
  }

  public static void igGetNavInputAmount2d(ImVec2 pOut, int dir_sources, int mode, float slow_factor, float fast_factor) {
    CImGuiJNI.igGetNavInputAmount2d(ImVec2.getCPtr(pOut), pOut, dir_sources, mode, slow_factor, fast_factor);
  }

  public static int igCalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate) {
    return CImGuiJNI.igCalcTypematicRepeatAmount(t0, t1, repeat_delay, repeat_rate);
  }

  public static void igActivateItem(long id) {
    CImGuiJNI.igActivateItem(id);
  }

  public static void igSetNavID(long id, int nav_layer, long focus_scope_id) {
    CImGuiJNI.igSetNavID(id, nav_layer, focus_scope_id);
  }

  public static void igSetNavIDWithRectRel(long id, int nav_layer, long focus_scope_id, ImRect rect_rel) {
    CImGuiJNI.igSetNavIDWithRectRel(id, nav_layer, focus_scope_id, ImRect.getCPtr(rect_rel), rect_rel);
  }

  public static void igPushFocusScope(long id) {
    CImGuiJNI.igPushFocusScope(id);
  }

  public static void igPopFocusScope() {
    CImGuiJNI.igPopFocusScope();
  }

  public static long igGetFocusScopeID() {
    return CImGuiJNI.igGetFocusScopeID();
  }

  public static boolean igIsActiveIdUsingNavDir(int dir) {
    return CImGuiJNI.igIsActiveIdUsingNavDir(dir);
  }

  public static boolean igIsActiveIdUsingNavInput(int input) {
    return CImGuiJNI.igIsActiveIdUsingNavInput(input);
  }

  public static boolean igIsActiveIdUsingKey(int key) {
    return CImGuiJNI.igIsActiveIdUsingKey(key);
  }

  public static boolean igIsMouseDragPastThreshold(int button, float lock_threshold) {
    return CImGuiJNI.igIsMouseDragPastThreshold(button, lock_threshold);
  }

  public static boolean igIsKeyPressedMap(int key, boolean repeat) {
    return CImGuiJNI.igIsKeyPressedMap(key, repeat);
  }

  public static boolean igIsNavInputDown(int n) {
    return CImGuiJNI.igIsNavInputDown(n);
  }

  public static boolean igIsNavInputTest(int n, int rm) {
    return CImGuiJNI.igIsNavInputTest(n, rm);
  }

  public static int igGetMergedKeyModFlags() {
    return CImGuiJNI.igGetMergedKeyModFlags();
  }

  public static void igDockContextInitialize(ImGuiContext ctx) {
    CImGuiJNI.igDockContextInitialize(ImGuiContext.getCPtr(ctx), ctx);
  }

  public static void igDockContextShutdown(ImGuiContext ctx) {
    CImGuiJNI.igDockContextShutdown(ImGuiContext.getCPtr(ctx), ctx);
  }

  public static void igDockContextClearNodes(ImGuiContext ctx, long root_id, boolean clear_settings_refs) {
    CImGuiJNI.igDockContextClearNodes(ImGuiContext.getCPtr(ctx), ctx, root_id, clear_settings_refs);
  }

  public static void igDockContextRebuildNodes(ImGuiContext ctx) {
    CImGuiJNI.igDockContextRebuildNodes(ImGuiContext.getCPtr(ctx), ctx);
  }

  public static void igDockContextUpdateUndocking(ImGuiContext ctx) {
    CImGuiJNI.igDockContextUpdateUndocking(ImGuiContext.getCPtr(ctx), ctx);
  }

  public static void igDockContextUpdateDocking(ImGuiContext ctx) {
    CImGuiJNI.igDockContextUpdateDocking(ImGuiContext.getCPtr(ctx), ctx);
  }

  public static long igDockContextGenNodeID(ImGuiContext ctx) {
    return CImGuiJNI.igDockContextGenNodeID(ImGuiContext.getCPtr(ctx), ctx);
  }

  public static void igDockContextQueueDock(ImGuiContext ctx, ImGuiWindow target, ImGuiDockNode target_node, ImGuiWindow payload, int split_dir, float split_ratio, boolean split_outer) {
    CImGuiJNI.igDockContextQueueDock(ImGuiContext.getCPtr(ctx), ctx, ImGuiWindow.getCPtr(target), target, ImGuiDockNode.getCPtr(target_node), target_node, ImGuiWindow.getCPtr(payload), payload, split_dir, split_ratio, split_outer);
  }

  public static void igDockContextQueueUndockWindow(ImGuiContext ctx, ImGuiWindow window) {
    CImGuiJNI.igDockContextQueueUndockWindow(ImGuiContext.getCPtr(ctx), ctx, ImGuiWindow.getCPtr(window), window);
  }

  public static void igDockContextQueueUndockNode(ImGuiContext ctx, ImGuiDockNode node) {
    CImGuiJNI.igDockContextQueueUndockNode(ImGuiContext.getCPtr(ctx), ctx, ImGuiDockNode.getCPtr(node), node);
  }

  public static boolean igDockContextCalcDropPosForDocking(ImGuiWindow target, ImGuiDockNode target_node, ImGuiWindow payload, int split_dir, boolean split_outer, ImVec2 out_pos) {
    return CImGuiJNI.igDockContextCalcDropPosForDocking(ImGuiWindow.getCPtr(target), target, ImGuiDockNode.getCPtr(target_node), target_node, ImGuiWindow.getCPtr(payload), payload, split_dir, split_outer, ImVec2.getCPtr(out_pos), out_pos);
  }

  public static ImGuiDockNode igDockNodeGetRootNode(ImGuiDockNode node) {
    long cPtr = CImGuiJNI.igDockNodeGetRootNode(ImGuiDockNode.getCPtr(node), node);
    return (cPtr == 0) ? null : new ImGuiDockNode(cPtr, false);
  }

  public static int igDockNodeGetDepth(ImGuiDockNode node) {
    return CImGuiJNI.igDockNodeGetDepth(ImGuiDockNode.getCPtr(node), node);
  }

  public static ImGuiDockNode igGetWindowDockNode() {
    long cPtr = CImGuiJNI.igGetWindowDockNode();
    return (cPtr == 0) ? null : new ImGuiDockNode(cPtr, false);
  }

  public static boolean igGetWindowAlwaysWantOwnTabBar(ImGuiWindow window) {
    return CImGuiJNI.igGetWindowAlwaysWantOwnTabBar(ImGuiWindow.getCPtr(window), window);
  }

  public static void igBeginDocked(ImGuiWindow window, SWIGTYPE_p_bool p_open) {
    CImGuiJNI.igBeginDocked(ImGuiWindow.getCPtr(window), window, SWIGTYPE_p_bool.getCPtr(p_open));
  }

  public static void igBeginDockableDragDropSource(ImGuiWindow window) {
    CImGuiJNI.igBeginDockableDragDropSource(ImGuiWindow.getCPtr(window), window);
  }

  public static void igBeginDockableDragDropTarget(ImGuiWindow window) {
    CImGuiJNI.igBeginDockableDragDropTarget(ImGuiWindow.getCPtr(window), window);
  }

  public static void igSetWindowDock(ImGuiWindow window, long dock_id, int cond) {
    CImGuiJNI.igSetWindowDock(ImGuiWindow.getCPtr(window), window, dock_id, cond);
  }

  public static void igDockBuilderDockWindow(String window_name, long node_id) {
    CImGuiJNI.igDockBuilderDockWindow(window_name, node_id);
  }

  public static ImGuiDockNode igDockBuilderGetNode(long node_id) {
    long cPtr = CImGuiJNI.igDockBuilderGetNode(node_id);
    return (cPtr == 0) ? null : new ImGuiDockNode(cPtr, false);
  }

  public static ImGuiDockNode igDockBuilderGetCentralNode(long node_id) {
    long cPtr = CImGuiJNI.igDockBuilderGetCentralNode(node_id);
    return (cPtr == 0) ? null : new ImGuiDockNode(cPtr, false);
  }

  public static long igDockBuilderAddNode(long node_id, int flags) {
    return CImGuiJNI.igDockBuilderAddNode(node_id, flags);
  }

  public static void igDockBuilderRemoveNode(long node_id) {
    CImGuiJNI.igDockBuilderRemoveNode(node_id);
  }

  public static void igDockBuilderRemoveNodeDockedWindows(long node_id, boolean clear_settings_refs) {
    CImGuiJNI.igDockBuilderRemoveNodeDockedWindows(node_id, clear_settings_refs);
  }

  public static void igDockBuilderRemoveNodeChildNodes(long node_id) {
    CImGuiJNI.igDockBuilderRemoveNodeChildNodes(node_id);
  }

  public static void igDockBuilderSetNodePos(long node_id, ImVec2 pos) {
    CImGuiJNI.igDockBuilderSetNodePos(node_id, ImVec2.getCPtr(pos), pos);
  }

  public static void igDockBuilderSetNodeSize(long node_id, ImVec2 size) {
    CImGuiJNI.igDockBuilderSetNodeSize(node_id, ImVec2.getCPtr(size), size);
  }

  public static long igDockBuilderSplitNode(long node_id, int split_dir, float size_ratio_for_node_at_dir, SWIGTYPE_p_unsigned_int out_id_at_dir, SWIGTYPE_p_unsigned_int out_id_at_opposite_dir) {
    return CImGuiJNI.igDockBuilderSplitNode(node_id, split_dir, size_ratio_for_node_at_dir, SWIGTYPE_p_unsigned_int.getCPtr(out_id_at_dir), SWIGTYPE_p_unsigned_int.getCPtr(out_id_at_opposite_dir));
  }

  public static void igDockBuilderCopyDockSpace(long src_dockspace_id, long dst_dockspace_id, ImVector_const_charPtr in_window_remap_pairs) {
    CImGuiJNI.igDockBuilderCopyDockSpace(src_dockspace_id, dst_dockspace_id, ImVector_const_charPtr.getCPtr(in_window_remap_pairs), in_window_remap_pairs);
  }

  public static void igDockBuilderCopyNode(long src_node_id, long dst_node_id, ImVector_ImGuiID out_node_remap_pairs) {
    CImGuiJNI.igDockBuilderCopyNode(src_node_id, dst_node_id, ImVector_ImGuiID.getCPtr(out_node_remap_pairs), out_node_remap_pairs);
  }

  public static void igDockBuilderCopyWindowSettings(String src_name, String dst_name) {
    CImGuiJNI.igDockBuilderCopyWindowSettings(src_name, dst_name);
  }

  public static void igDockBuilderFinish(long node_id) {
    CImGuiJNI.igDockBuilderFinish(node_id);
  }

  public static boolean igBeginDragDropTargetCustom(ImRect bb, long id) {
    return CImGuiJNI.igBeginDragDropTargetCustom(ImRect.getCPtr(bb), bb, id);
  }

  public static void igClearDragDrop() {
    CImGuiJNI.igClearDragDrop();
  }

  public static boolean igIsDragDropPayloadBeingAccepted() {
    return CImGuiJNI.igIsDragDropPayloadBeingAccepted();
  }

  public static void igBeginColumns(String str_id, int count, int flags) {
    CImGuiJNI.igBeginColumns(str_id, count, flags);
  }

  public static void igEndColumns() {
    CImGuiJNI.igEndColumns();
  }

  public static void igPushColumnClipRect(int column_index) {
    CImGuiJNI.igPushColumnClipRect(column_index);
  }

  public static void igPushColumnsBackground() {
    CImGuiJNI.igPushColumnsBackground();
  }

  public static void igPopColumnsBackground() {
    CImGuiJNI.igPopColumnsBackground();
  }

  public static long igGetColumnsID(String str_id, int count) {
    return CImGuiJNI.igGetColumnsID(str_id, count);
  }

  public static ImGuiColumns igFindOrCreateColumns(ImGuiWindow window, long id) {
    long cPtr = CImGuiJNI.igFindOrCreateColumns(ImGuiWindow.getCPtr(window), window, id);
    return (cPtr == 0) ? null : new ImGuiColumns(cPtr, false);
  }

  public static float igGetColumnOffsetFromNorm(ImGuiColumns columns, float offset_norm) {
    return CImGuiJNI.igGetColumnOffsetFromNorm(ImGuiColumns.getCPtr(columns), columns, offset_norm);
  }

  public static float igGetColumnNormFromOffset(ImGuiColumns columns, float offset) {
    return CImGuiJNI.igGetColumnNormFromOffset(ImGuiColumns.getCPtr(columns), columns, offset);
  }

  public static boolean igBeginTabBarEx(ImGuiTabBar tab_bar, ImRect bb, int flags, ImGuiDockNode dock_node) {
    return CImGuiJNI.igBeginTabBarEx(ImGuiTabBar.getCPtr(tab_bar), tab_bar, ImRect.getCPtr(bb), bb, flags, ImGuiDockNode.getCPtr(dock_node), dock_node);
  }

  public static ImGuiTabItem igTabBarFindTabByID(ImGuiTabBar tab_bar, long tab_id) {
    long cPtr = CImGuiJNI.igTabBarFindTabByID(ImGuiTabBar.getCPtr(tab_bar), tab_bar, tab_id);
    return (cPtr == 0) ? null : new ImGuiTabItem(cPtr, false);
  }

  public static ImGuiTabItem igTabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar tab_bar) {
    long cPtr = CImGuiJNI.igTabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar.getCPtr(tab_bar), tab_bar);
    return (cPtr == 0) ? null : new ImGuiTabItem(cPtr, false);
  }

  public static void igTabBarAddTab(ImGuiTabBar tab_bar, int tab_flags, ImGuiWindow window) {
    CImGuiJNI.igTabBarAddTab(ImGuiTabBar.getCPtr(tab_bar), tab_bar, tab_flags, ImGuiWindow.getCPtr(window), window);
  }

  public static void igTabBarRemoveTab(ImGuiTabBar tab_bar, long tab_id) {
    CImGuiJNI.igTabBarRemoveTab(ImGuiTabBar.getCPtr(tab_bar), tab_bar, tab_id);
  }

  public static void igTabBarCloseTab(ImGuiTabBar tab_bar, ImGuiTabItem tab) {
    CImGuiJNI.igTabBarCloseTab(ImGuiTabBar.getCPtr(tab_bar), tab_bar, ImGuiTabItem.getCPtr(tab), tab);
  }

  public static void igTabBarQueueChangeTabOrder(ImGuiTabBar tab_bar, ImGuiTabItem tab, int dir) {
    CImGuiJNI.igTabBarQueueChangeTabOrder(ImGuiTabBar.getCPtr(tab_bar), tab_bar, ImGuiTabItem.getCPtr(tab), tab, dir);
  }

  public static boolean igTabItemEx(ImGuiTabBar tab_bar, String label, SWIGTYPE_p_bool p_open, int flags, ImGuiWindow docked_window) {
    return CImGuiJNI.igTabItemEx(ImGuiTabBar.getCPtr(tab_bar), tab_bar, label, SWIGTYPE_p_bool.getCPtr(p_open), flags, ImGuiWindow.getCPtr(docked_window), docked_window);
  }

  public static void igTabItemCalcSize(ImVec2 pOut, String label, boolean has_close_button) {
    CImGuiJNI.igTabItemCalcSize(ImVec2.getCPtr(pOut), pOut, label, has_close_button);
  }

  public static void igTabItemBackground(ImDrawList draw_list, ImRect bb, int flags, long col) {
    CImGuiJNI.igTabItemBackground(ImDrawList.getCPtr(draw_list), draw_list, ImRect.getCPtr(bb), bb, flags, col);
  }

  public static boolean igTabItemLabelAndCloseButton(ImDrawList draw_list, ImRect bb, int flags, ImVec2 frame_padding, String label, long tab_id, long close_button_id, boolean is_contents_visible) {
    return CImGuiJNI.igTabItemLabelAndCloseButton(ImDrawList.getCPtr(draw_list), draw_list, ImRect.getCPtr(bb), bb, flags, ImVec2.getCPtr(frame_padding), frame_padding, label, tab_id, close_button_id, is_contents_visible);
  }

  public static void igRenderText(ImVec2 pos, String text, String text_end, boolean hide_text_after_hash) {
    CImGuiJNI.igRenderText(ImVec2.getCPtr(pos), pos, text, text_end, hide_text_after_hash);
  }

  public static void igRenderTextWrapped(ImVec2 pos, String text, String text_end, float wrap_width) {
    CImGuiJNI.igRenderTextWrapped(ImVec2.getCPtr(pos), pos, text, text_end, wrap_width);
  }

  public static void igRenderTextClipped(ImVec2 pos_min, ImVec2 pos_max, String text, String text_end, ImVec2 text_size_if_known, ImVec2 align, ImRect clip_rect) {
    CImGuiJNI.igRenderTextClipped(ImVec2.getCPtr(pos_min), pos_min, ImVec2.getCPtr(pos_max), pos_max, text, text_end, ImVec2.getCPtr(text_size_if_known), text_size_if_known, ImVec2.getCPtr(align), align, ImRect.getCPtr(clip_rect), clip_rect);
  }

  public static void igRenderTextClippedEx(ImDrawList draw_list, ImVec2 pos_min, ImVec2 pos_max, String text, String text_end, ImVec2 text_size_if_known, ImVec2 align, ImRect clip_rect) {
    CImGuiJNI.igRenderTextClippedEx(ImDrawList.getCPtr(draw_list), draw_list, ImVec2.getCPtr(pos_min), pos_min, ImVec2.getCPtr(pos_max), pos_max, text, text_end, ImVec2.getCPtr(text_size_if_known), text_size_if_known, ImVec2.getCPtr(align), align, ImRect.getCPtr(clip_rect), clip_rect);
  }

  public static void igRenderTextEllipsis(ImDrawList draw_list, ImVec2 pos_min, ImVec2 pos_max, float clip_max_x, float ellipsis_max_x, String text, String text_end, ImVec2 text_size_if_known) {
    CImGuiJNI.igRenderTextEllipsis(ImDrawList.getCPtr(draw_list), draw_list, ImVec2.getCPtr(pos_min), pos_min, ImVec2.getCPtr(pos_max), pos_max, clip_max_x, ellipsis_max_x, text, text_end, ImVec2.getCPtr(text_size_if_known), text_size_if_known);
  }

  public static void igRenderFrame(ImVec2 p_min, ImVec2 p_max, long fill_col, boolean border, float rounding) {
    CImGuiJNI.igRenderFrame(ImVec2.getCPtr(p_min), p_min, ImVec2.getCPtr(p_max), p_max, fill_col, border, rounding);
  }

  public static void igRenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding) {
    CImGuiJNI.igRenderFrameBorder(ImVec2.getCPtr(p_min), p_min, ImVec2.getCPtr(p_max), p_max, rounding);
  }

  public static void igRenderColorRectWithAlphaCheckerboard(ImDrawList draw_list, ImVec2 p_min, ImVec2 p_max, long fill_col, float grid_step, ImVec2 grid_off, float rounding, int rounding_corners_flags) {
    CImGuiJNI.igRenderColorRectWithAlphaCheckerboard(ImDrawList.getCPtr(draw_list), draw_list, ImVec2.getCPtr(p_min), p_min, ImVec2.getCPtr(p_max), p_max, fill_col, grid_step, ImVec2.getCPtr(grid_off), grid_off, rounding, rounding_corners_flags);
  }

  public static void igRenderNavHighlight(ImRect bb, long id, int flags) {
    CImGuiJNI.igRenderNavHighlight(ImRect.getCPtr(bb), bb, id, flags);
  }

  public static String igFindRenderedTextEnd(String text, String text_end) {
    return CImGuiJNI.igFindRenderedTextEnd(text, text_end);
  }

  public static void igLogRenderedText(ImVec2 ref_pos, String text, String text_end) {
    CImGuiJNI.igLogRenderedText(ImVec2.getCPtr(ref_pos), ref_pos, text, text_end);
  }

  public static void igRenderArrow(ImDrawList draw_list, ImVec2 pos, long col, int dir, float scale) {
    CImGuiJNI.igRenderArrow(ImDrawList.getCPtr(draw_list), draw_list, ImVec2.getCPtr(pos), pos, col, dir, scale);
  }

  public static void igRenderBullet(ImDrawList draw_list, ImVec2 pos, long col) {
    CImGuiJNI.igRenderBullet(ImDrawList.getCPtr(draw_list), draw_list, ImVec2.getCPtr(pos), pos, col);
  }

  public static void igRenderCheckMark(ImDrawList draw_list, ImVec2 pos, long col, float sz) {
    CImGuiJNI.igRenderCheckMark(ImDrawList.getCPtr(draw_list), draw_list, ImVec2.getCPtr(pos), pos, col, sz);
  }

  public static void igRenderMouseCursor(ImDrawList draw_list, ImVec2 pos, float scale, int mouse_cursor, long col_fill, long col_border, long col_shadow) {
    CImGuiJNI.igRenderMouseCursor(ImDrawList.getCPtr(draw_list), draw_list, ImVec2.getCPtr(pos), pos, scale, mouse_cursor, col_fill, col_border, col_shadow);
  }

  public static void igRenderArrowPointingAt(ImDrawList draw_list, ImVec2 pos, ImVec2 half_sz, int direction, long col) {
    CImGuiJNI.igRenderArrowPointingAt(ImDrawList.getCPtr(draw_list), draw_list, ImVec2.getCPtr(pos), pos, ImVec2.getCPtr(half_sz), half_sz, direction, col);
  }

  public static void igRenderArrowDockMenu(ImDrawList draw_list, ImVec2 p_min, float sz, long col) {
    CImGuiJNI.igRenderArrowDockMenu(ImDrawList.getCPtr(draw_list), draw_list, ImVec2.getCPtr(p_min), p_min, sz, col);
  }

  public static void igRenderRectFilledRangeH(ImDrawList draw_list, ImRect rect, long col, float x_start_norm, float x_end_norm, float rounding) {
    CImGuiJNI.igRenderRectFilledRangeH(ImDrawList.getCPtr(draw_list), draw_list, ImRect.getCPtr(rect), rect, col, x_start_norm, x_end_norm, rounding);
  }

  public static void igRenderRectFilledWithHole(ImDrawList draw_list, ImRect outer, ImRect inner, long col, float rounding) {
    CImGuiJNI.igRenderRectFilledWithHole(ImDrawList.getCPtr(draw_list), draw_list, ImRect.getCPtr(outer), outer, ImRect.getCPtr(inner), inner, col, rounding);
  }

  public static void igTextEx(String text, String text_end, int flags) {
    CImGuiJNI.igTextEx(text, text_end, flags);
  }

  public static boolean igButtonEx(String label, ImVec2 size_arg, int flags) {
    return CImGuiJNI.igButtonEx(label, ImVec2.getCPtr(size_arg), size_arg, flags);
  }

  public static boolean igCloseButton(long id, ImVec2 pos) {
    return CImGuiJNI.igCloseButton(id, ImVec2.getCPtr(pos), pos);
  }

  public static boolean igCollapseButton(long id, ImVec2 pos, ImGuiDockNode dock_node) {
    return CImGuiJNI.igCollapseButton(id, ImVec2.getCPtr(pos), pos, ImGuiDockNode.getCPtr(dock_node), dock_node);
  }

  public static boolean igArrowButtonEx(String str_id, int dir, ImVec2 size_arg, int flags) {
    return CImGuiJNI.igArrowButtonEx(str_id, dir, ImVec2.getCPtr(size_arg), size_arg, flags);
  }

  public static void igScrollbar(int axis) {
    CImGuiJNI.igScrollbar(axis);
  }

  public static boolean igScrollbarEx(ImRect bb, long id, int axis, SWIGTYPE_p_float p_scroll_v, float avail_v, float contents_v, int rounding_corners) {
    return CImGuiJNI.igScrollbarEx(ImRect.getCPtr(bb), bb, id, axis, SWIGTYPE_p_float.getCPtr(p_scroll_v), avail_v, contents_v, rounding_corners);
  }

  public static void igGetWindowScrollbarRect(ImRect pOut, ImGuiWindow window, int axis) {
    CImGuiJNI.igGetWindowScrollbarRect(ImRect.getCPtr(pOut), pOut, ImGuiWindow.getCPtr(window), window, axis);
  }

  public static long igGetWindowScrollbarID(ImGuiWindow window, int axis) {
    return CImGuiJNI.igGetWindowScrollbarID(ImGuiWindow.getCPtr(window), window, axis);
  }

  public static long igGetWindowResizeID(ImGuiWindow window, int n) {
    return CImGuiJNI.igGetWindowResizeID(ImGuiWindow.getCPtr(window), window, n);
  }

  public static void igSeparatorEx(int flags) {
    CImGuiJNI.igSeparatorEx(flags);
  }

  public static boolean igButtonBehavior(ImRect bb, long id, SWIGTYPE_p_bool out_hovered, SWIGTYPE_p_bool out_held, int flags) {
    return CImGuiJNI.igButtonBehavior(ImRect.getCPtr(bb), bb, id, SWIGTYPE_p_bool.getCPtr(out_hovered), SWIGTYPE_p_bool.getCPtr(out_held), flags);
  }

  public static boolean igDragBehavior(long id, int data_type, SWIGTYPE_p_void p_v, float v_speed, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, String format, float power, int flags) {
    return CImGuiJNI.igDragBehavior(id, data_type, SWIGTYPE_p_void.getCPtr(p_v), v_speed, SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, power, flags);
  }

  public static boolean igSliderBehavior(ImRect bb, long id, int data_type, SWIGTYPE_p_void p_v, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max, String format, float power, int flags, ImRect out_grab_bb) {
    return CImGuiJNI.igSliderBehavior(ImRect.getCPtr(bb), bb, id, data_type, SWIGTYPE_p_void.getCPtr(p_v), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max), format, power, flags, ImRect.getCPtr(out_grab_bb), out_grab_bb);
  }

  public static boolean igSplitterBehavior(ImRect bb, long id, int axis, SWIGTYPE_p_float size1, SWIGTYPE_p_float size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay) {
    return CImGuiJNI.igSplitterBehavior(ImRect.getCPtr(bb), bb, id, axis, SWIGTYPE_p_float.getCPtr(size1), SWIGTYPE_p_float.getCPtr(size2), min_size1, min_size2, hover_extend, hover_visibility_delay);
  }

  public static boolean igTreeNodeBehavior(long id, int flags, String label, String label_end) {
    return CImGuiJNI.igTreeNodeBehavior(id, flags, label, label_end);
  }

  public static boolean igTreeNodeBehaviorIsOpen(long id, int flags) {
    return CImGuiJNI.igTreeNodeBehaviorIsOpen(id, flags);
  }

  public static void igTreePushOverrideID(long id) {
    CImGuiJNI.igTreePushOverrideID(id);
  }

  public static ImGuiDataTypeInfo igDataTypeGetInfo(int data_type) {
    long cPtr = CImGuiJNI.igDataTypeGetInfo(data_type);
    return (cPtr == 0) ? null : new ImGuiDataTypeInfo(cPtr, false);
  }

  public static int igDataTypeFormatString(byte[] buf, int buf_size, int data_type, SWIGTYPE_p_void p_data, String format) {
    return CImGuiJNI.igDataTypeFormatString(buf, buf_size, data_type, SWIGTYPE_p_void.getCPtr(p_data), format);
  }

  public static void igDataTypeApplyOp(int data_type, int op, SWIGTYPE_p_void output, SWIGTYPE_p_void arg_1, SWIGTYPE_p_void arg_2) {
    CImGuiJNI.igDataTypeApplyOp(data_type, op, SWIGTYPE_p_void.getCPtr(output), SWIGTYPE_p_void.getCPtr(arg_1), SWIGTYPE_p_void.getCPtr(arg_2));
  }

  public static boolean igDataTypeApplyOpFromText(byte[] buf, String initial_value_buf, int data_type, SWIGTYPE_p_void p_data, String format) {
    return CImGuiJNI.igDataTypeApplyOpFromText(buf, initial_value_buf, data_type, SWIGTYPE_p_void.getCPtr(p_data), format);
  }

  public static boolean igDataTypeClamp(int data_type, SWIGTYPE_p_void p_data, SWIGTYPE_p_void p_min, SWIGTYPE_p_void p_max) {
    return CImGuiJNI.igDataTypeClamp(data_type, SWIGTYPE_p_void.getCPtr(p_data), SWIGTYPE_p_void.getCPtr(p_min), SWIGTYPE_p_void.getCPtr(p_max));
  }

  public static boolean igInputTextEx(String label, String hint, byte[] buf, int buf_size, ImVec2 size_arg, int flags, InputTextCallback callback) {
    return CImGuiJNI.igInputTextEx(label, hint, buf, buf_size, ImVec2.getCPtr(size_arg), size_arg, flags, callback);
  }

  public static boolean igTempInputText(ImRect bb, long id, String label, byte[] buf, int buf_size, int flags) {
    return CImGuiJNI.igTempInputText(ImRect.getCPtr(bb), bb, id, label, buf, buf_size, flags);
  }

  public static boolean igTempInputScalar(ImRect bb, long id, String label, int data_type, SWIGTYPE_p_void p_data, String format, SWIGTYPE_p_void p_clamp_min, SWIGTYPE_p_void p_clamp_max) {
    return CImGuiJNI.igTempInputScalar(ImRect.getCPtr(bb), bb, id, label, data_type, SWIGTYPE_p_void.getCPtr(p_data), format, SWIGTYPE_p_void.getCPtr(p_clamp_min), SWIGTYPE_p_void.getCPtr(p_clamp_max));
  }

  public static boolean igTempInputIsActive(long id) {
    return CImGuiJNI.igTempInputIsActive(id);
  }

  public static ImGuiInputTextState igGetInputTextState(long id) {
    long cPtr = CImGuiJNI.igGetInputTextState(id);
    return (cPtr == 0) ? null : new ImGuiInputTextState(cPtr, false);
  }

  public static void igColorTooltip(String text, SWIGTYPE_p_float col, int flags) {
    CImGuiJNI.igColorTooltip(text, SWIGTYPE_p_float.getCPtr(col), flags);
  }

  public static void igColorEditOptionsPopup(SWIGTYPE_p_float col, int flags) {
    CImGuiJNI.igColorEditOptionsPopup(SWIGTYPE_p_float.getCPtr(col), flags);
  }

  public static void igColorPickerOptionsPopup(SWIGTYPE_p_float ref_col, int flags) {
    CImGuiJNI.igColorPickerOptionsPopup(SWIGTYPE_p_float.getCPtr(ref_col), flags);
  }

  public static int igPlotEx(int plot_type, String label, ValuesGetter values_getter, int values_count, int values_offset, String overlay_text, float scale_min, float scale_max, ImVec2 frame_size) {
    return CImGuiJNI.igPlotEx(plot_type, label, values_getter, values_count, values_offset, overlay_text, scale_min, scale_max, ImVec2.getCPtr(frame_size), frame_size);
  }

  public static void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList draw_list, int vert_start_idx, int vert_end_idx, ImVec2 gradient_p0, ImVec2 gradient_p1, long col0, long col1) {
    CImGuiJNI.igShadeVertsLinearColorGradientKeepAlpha(ImDrawList.getCPtr(draw_list), draw_list, vert_start_idx, vert_end_idx, ImVec2.getCPtr(gradient_p0), gradient_p0, ImVec2.getCPtr(gradient_p1), gradient_p1, col0, col1);
  }

  public static void igShadeVertsLinearUV(ImDrawList draw_list, int vert_start_idx, int vert_end_idx, ImVec2 a, ImVec2 b, ImVec2 uv_a, ImVec2 uv_b, boolean clamp) {
    CImGuiJNI.igShadeVertsLinearUV(ImDrawList.getCPtr(draw_list), draw_list, vert_start_idx, vert_end_idx, ImVec2.getCPtr(a), a, ImVec2.getCPtr(b), b, ImVec2.getCPtr(uv_a), uv_a, ImVec2.getCPtr(uv_b), uv_b, clamp);
  }

  public static void igGcCompactTransientWindowBuffers(ImGuiWindow window) {
    CImGuiJNI.igGcCompactTransientWindowBuffers(ImGuiWindow.getCPtr(window), window);
  }

  public static void igGcAwakeTransientWindowBuffers(ImGuiWindow window) {
    CImGuiJNI.igGcAwakeTransientWindowBuffers(ImGuiWindow.getCPtr(window), window);
  }

  public static void igDebugDrawItemRect(long col) {
    CImGuiJNI.igDebugDrawItemRect(col);
  }

  public static void igDebugStartItemPicker() {
    CImGuiJNI.igDebugStartItemPicker();
  }

  public static boolean igImFontAtlasBuildWithStbTruetype(ImFontAtlas atlas) {
    return CImGuiJNI.igImFontAtlasBuildWithStbTruetype(ImFontAtlas.getCPtr(atlas), atlas);
  }

  public static void igImFontAtlasBuildInit(ImFontAtlas atlas) {
    CImGuiJNI.igImFontAtlasBuildInit(ImFontAtlas.getCPtr(atlas), atlas);
  }

  public static void igImFontAtlasBuildSetupFont(ImFontAtlas atlas, ImFont font, ImFontConfig font_config, float ascent, float descent) {
    CImGuiJNI.igImFontAtlasBuildSetupFont(ImFontAtlas.getCPtr(atlas), atlas, ImFont.getCPtr(font), font, ImFontConfig.getCPtr(font_config), font_config, ascent, descent);
  }

  public static void igImFontAtlasBuildPackCustomRects(ImFontAtlas atlas, SWIGTYPE_p_void stbrp_context_opaque) {
    CImGuiJNI.igImFontAtlasBuildPackCustomRects(ImFontAtlas.getCPtr(atlas), atlas, SWIGTYPE_p_void.getCPtr(stbrp_context_opaque));
  }

  public static void igImFontAtlasBuildFinish(ImFontAtlas atlas) {
    CImGuiJNI.igImFontAtlasBuildFinish(ImFontAtlas.getCPtr(atlas), atlas);
  }

  public static void igImFontAtlasBuildMultiplyCalcLookupTable(SWIGTYPE_p_unsigned_char out_table, float in_multiply_factor) {
    CImGuiJNI.igImFontAtlasBuildMultiplyCalcLookupTable(SWIGTYPE_p_unsigned_char.getCPtr(out_table), in_multiply_factor);
  }

  public static void igImFontAtlasBuildMultiplyRectAlpha8(SWIGTYPE_p_unsigned_char table, SWIGTYPE_p_unsigned_char pixels, int x, int y, int w, int h, int stride) {
    CImGuiJNI.igImFontAtlasBuildMultiplyRectAlpha8(SWIGTYPE_p_unsigned_char.getCPtr(table), SWIGTYPE_p_unsigned_char.getCPtr(pixels), x, y, w, h, stride);
  }

  public static void igLogText(String fmt) {
    CImGuiJNI.igLogText(fmt);
  }

  public static void ImGuiTextBuffer_appendf(ImGuiTextBuffer buffer, String fmt) {
    CImGuiJNI.ImGuiTextBuffer_appendf(ImGuiTextBuffer.getCPtr(buffer), buffer, fmt);
  }

  public static float igGET_FLT_MAX() {
    return CImGuiJNI.igGET_FLT_MAX();
  }

  public static void igColorConvertRGBtoHSV(float r, float g, float b, SWIGTYPE_p_float out_h, SWIGTYPE_p_float out_s, SWIGTYPE_p_float out_v) {
    CImGuiJNI.igColorConvertRGBtoHSV(r, g, b, SWIGTYPE_p_float.getCPtr(out_h), SWIGTYPE_p_float.getCPtr(out_s), SWIGTYPE_p_float.getCPtr(out_v));
  }

  public static void igColorConvertHSVtoRGB(float h, float s, float v, SWIGTYPE_p_float out_r, SWIGTYPE_p_float out_g, SWIGTYPE_p_float out_b) {
    CImGuiJNI.igColorConvertHSVtoRGB(h, s, v, SWIGTYPE_p_float.getCPtr(out_r), SWIGTYPE_p_float.getCPtr(out_g), SWIGTYPE_p_float.getCPtr(out_b));
  }

  public static ImVector_ImWchar ImVector_ImWchar_create() {
    long cPtr = CImGuiJNI.ImVector_ImWchar_create();
    return (cPtr == 0) ? null : new ImVector_ImWchar(cPtr, false);
  }

  public static void ImVector_ImWchar_destroy(ImVector_ImWchar self) {
    CImGuiJNI.ImVector_ImWchar_destroy(ImVector_ImWchar.getCPtr(self), self);
  }

  public static void ImVector_ImWchar_Init(ImVector_ImWchar p) {
    CImGuiJNI.ImVector_ImWchar_Init(ImVector_ImWchar.getCPtr(p), p);
  }

  public static void ImVector_ImWchar_UnInit(ImVector_ImWchar p) {
    CImGuiJNI.ImVector_ImWchar_UnInit(ImVector_ImWchar.getCPtr(p), p);
  }

  public static SWIGTYPE_p_int new_intp() {
    long cPtr = CImGuiJNI.new_intp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static SWIGTYPE_p_int copy_intp(int value) {
    long cPtr = CImGuiJNI.copy_intp(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void delete_intp(SWIGTYPE_p_int obj) {
    CImGuiJNI.delete_intp(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static void intp_assign(SWIGTYPE_p_int obj, int value) {
    CImGuiJNI.intp_assign(SWIGTYPE_p_int.getCPtr(obj), value);
  }

  public static int intp_value(SWIGTYPE_p_int obj) {
    return CImGuiJNI.intp_value(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static SWIGTYPE_p_unsigned_int new_uintp() {
    long cPtr = CImGuiJNI.new_uintp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_int copy_uintp(long value) {
    long cPtr = CImGuiJNI.copy_uintp(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static void delete_uintp(SWIGTYPE_p_unsigned_int obj) {
    CImGuiJNI.delete_uintp(SWIGTYPE_p_unsigned_int.getCPtr(obj));
  }

  public static void uintp_assign(SWIGTYPE_p_unsigned_int obj, long value) {
    CImGuiJNI.uintp_assign(SWIGTYPE_p_unsigned_int.getCPtr(obj), value);
  }

  public static long uintp_value(SWIGTYPE_p_unsigned_int obj) {
    return CImGuiJNI.uintp_value(SWIGTYPE_p_unsigned_int.getCPtr(obj));
  }

  public static SWIGTYPE_p_size_t new_size_tp() {
    long cPtr = CImGuiJNI.new_size_tp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_size_t(cPtr, false);
  }

  public static SWIGTYPE_p_size_t copy_size_tp(long value) {
    long cPtr = CImGuiJNI.copy_size_tp(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_size_t(cPtr, false);
  }

  public static void delete_size_tp(SWIGTYPE_p_size_t obj) {
    CImGuiJNI.delete_size_tp(SWIGTYPE_p_size_t.getCPtr(obj));
  }

  public static void size_tp_assign(SWIGTYPE_p_size_t obj, long value) {
    CImGuiJNI.size_tp_assign(SWIGTYPE_p_size_t.getCPtr(obj), value);
  }

  public static long size_tp_value(SWIGTYPE_p_size_t obj) {
    return CImGuiJNI.size_tp_value(SWIGTYPE_p_size_t.getCPtr(obj));
  }

  public static SWIGTYPE_p_bool new_boolp() {
    long cPtr = CImGuiJNI.new_boolp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_bool(cPtr, false);
  }

  public static SWIGTYPE_p_bool copy_boolp(boolean value) {
    long cPtr = CImGuiJNI.copy_boolp(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_bool(cPtr, false);
  }

  public static void delete_boolp(SWIGTYPE_p_bool obj) {
    CImGuiJNI.delete_boolp(SWIGTYPE_p_bool.getCPtr(obj));
  }

  public static void boolp_assign(SWIGTYPE_p_bool obj, boolean value) {
    CImGuiJNI.boolp_assign(SWIGTYPE_p_bool.getCPtr(obj), value);
  }

  public static boolean boolp_value(SWIGTYPE_p_bool obj) {
    return CImGuiJNI.boolp_value(SWIGTYPE_p_bool.getCPtr(obj));
  }

  public static SWIGTYPE_p_float new_floatp() {
    long cPtr = CImGuiJNI.new_floatp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static SWIGTYPE_p_float copy_floatp(float value) {
    long cPtr = CImGuiJNI.copy_floatp(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static void delete_floatp(SWIGTYPE_p_float obj) {
    CImGuiJNI.delete_floatp(SWIGTYPE_p_float.getCPtr(obj));
  }

  public static void floatp_assign(SWIGTYPE_p_float obj, float value) {
    CImGuiJNI.floatp_assign(SWIGTYPE_p_float.getCPtr(obj), value);
  }

  public static float floatp_value(SWIGTYPE_p_float obj) {
    return CImGuiJNI.floatp_value(SWIGTYPE_p_float.getCPtr(obj));
  }

  public static SWIGTYPE_p_double new_doublep() {
    long cPtr = CImGuiJNI.new_doublep();
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static SWIGTYPE_p_double copy_doublep(double value) {
    long cPtr = CImGuiJNI.copy_doublep(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static void delete_doublep(SWIGTYPE_p_double obj) {
    CImGuiJNI.delete_doublep(SWIGTYPE_p_double.getCPtr(obj));
  }

  public static void doublep_assign(SWIGTYPE_p_double obj, double value) {
    CImGuiJNI.doublep_assign(SWIGTYPE_p_double.getCPtr(obj), value);
  }

  public static double doublep_value(SWIGTYPE_p_double obj) {
    return CImGuiJNI.doublep_value(SWIGTYPE_p_double.getCPtr(obj));
  }

  public static SWIGTYPE_p_p_unsigned_char new_unsigned_charpp() {
    long cPtr = CImGuiJNI.new_unsigned_charpp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_char(cPtr, false);
  }

  public static SWIGTYPE_p_p_unsigned_char copy_unsigned_charpp(SWIGTYPE_p_unsigned_char value) {
    long cPtr = CImGuiJNI.copy_unsigned_charpp(SWIGTYPE_p_unsigned_char.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_char(cPtr, false);
  }

  public static void delete_unsigned_charpp(SWIGTYPE_p_p_unsigned_char obj) {
    CImGuiJNI.delete_unsigned_charpp(SWIGTYPE_p_p_unsigned_char.getCPtr(obj));
  }

  public static void unsigned_charpp_assign(SWIGTYPE_p_p_unsigned_char obj, SWIGTYPE_p_unsigned_char value) {
    CImGuiJNI.unsigned_charpp_assign(SWIGTYPE_p_p_unsigned_char.getCPtr(obj), SWIGTYPE_p_unsigned_char.getCPtr(value));
  }

  public static SWIGTYPE_p_unsigned_char unsigned_charpp_value(SWIGTYPE_p_p_unsigned_char obj) {
    long cPtr = CImGuiJNI.unsigned_charpp_value(SWIGTYPE_p_p_unsigned_char.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static SWIGTYPE_p_p_void new_voidp() {
    long cPtr = CImGuiJNI.new_voidp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_p_void copy_voidp(SWIGTYPE_p_void value) {
    long cPtr = CImGuiJNI.copy_voidp(SWIGTYPE_p_void.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_void(cPtr, false);
  }

  public static void delete_voidp(SWIGTYPE_p_p_void obj) {
    CImGuiJNI.delete_voidp(SWIGTYPE_p_p_void.getCPtr(obj));
  }

  public static void voidp_assign(SWIGTYPE_p_p_void obj, SWIGTYPE_p_void value) {
    CImGuiJNI.voidp_assign(SWIGTYPE_p_p_void.getCPtr(obj), SWIGTYPE_p_void.getCPtr(value));
  }

  public static SWIGTYPE_p_void voidp_value(SWIGTYPE_p_p_void obj) {
    long cPtr = CImGuiJNI.voidp_value(SWIGTYPE_p_p_void.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_int new_intArray(int nelements) {
    long cPtr = CImGuiJNI.new_intArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void delete_intArray(SWIGTYPE_p_int ary) {
    CImGuiJNI.delete_intArray(SWIGTYPE_p_int.getCPtr(ary));
  }

  public static int intArray_getitem(SWIGTYPE_p_int ary, int index) {
    return CImGuiJNI.intArray_getitem(SWIGTYPE_p_int.getCPtr(ary), index);
  }

  public static void intArray_setitem(SWIGTYPE_p_int ary, int index, int value) {
    CImGuiJNI.intArray_setitem(SWIGTYPE_p_int.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_float new_floatArray(int nelements) {
    long cPtr = CImGuiJNI.new_floatArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static void delete_floatArray(SWIGTYPE_p_float ary) {
    CImGuiJNI.delete_floatArray(SWIGTYPE_p_float.getCPtr(ary));
  }

  public static float floatArray_getitem(SWIGTYPE_p_float ary, int index) {
    return CImGuiJNI.floatArray_getitem(SWIGTYPE_p_float.getCPtr(ary), index);
  }

  public static void floatArray_setitem(SWIGTYPE_p_float ary, int index, float value) {
    CImGuiJNI.floatArray_setitem(SWIGTYPE_p_float.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_bool new_boolArray(int nelements) {
    long cPtr = CImGuiJNI.new_boolArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_bool(cPtr, false);
  }

  public static void delete_boolArray(SWIGTYPE_p_bool ary) {
    CImGuiJNI.delete_boolArray(SWIGTYPE_p_bool.getCPtr(ary));
  }

  public static boolean boolArray_getitem(SWIGTYPE_p_bool ary, int index) {
    return CImGuiJNI.boolArray_getitem(SWIGTYPE_p_bool.getCPtr(ary), index);
  }

  public static void boolArray_setitem(SWIGTYPE_p_bool ary, int index, boolean value) {
    CImGuiJNI.boolArray_setitem(SWIGTYPE_p_bool.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_unsigned_short new_ushortArray(int nelements) {
    long cPtr = CImGuiJNI.new_ushortArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
  }

  public static void delete_ushortArray(SWIGTYPE_p_unsigned_short ary) {
    CImGuiJNI.delete_ushortArray(SWIGTYPE_p_unsigned_short.getCPtr(ary));
  }

  public static int ushortArray_getitem(SWIGTYPE_p_unsigned_short ary, int index) {
    return CImGuiJNI.ushortArray_getitem(SWIGTYPE_p_unsigned_short.getCPtr(ary), index);
  }

  public static void ushortArray_setitem(SWIGTYPE_p_unsigned_short ary, int index, int value) {
    CImGuiJNI.ushortArray_setitem(SWIGTYPE_p_unsigned_short.getCPtr(ary), index, value);
  }

  public static ImDrawCmd new_ImDrawCmdArray(int nelements) {
    long cPtr = CImGuiJNI.new_ImDrawCmdArray(nelements);
    return (cPtr == 0) ? null : new ImDrawCmd(cPtr, false);
  }

  public static void delete_ImDrawCmdArray(ImDrawCmd ary) {
    CImGuiJNI.delete_ImDrawCmdArray(ImDrawCmd.getCPtr(ary), ary);
  }

  public static ImDrawCmd ImDrawCmdArray_getitem(ImDrawCmd ary, int index) {
    return new ImDrawCmd(CImGuiJNI.ImDrawCmdArray_getitem(ImDrawCmd.getCPtr(ary), ary, index), true);
  }

  public static void ImDrawCmdArray_setitem(ImDrawCmd ary, int index, ImDrawCmd value) {
    CImGuiJNI.ImDrawCmdArray_setitem(ImDrawCmd.getCPtr(ary), ary, index, ImDrawCmd.getCPtr(value), value);
  }

  public static SWIGTYPE_p_p_ImDrawList new_pImDrawListArray(int nelements) {
    long cPtr = CImGuiJNI.new_pImDrawListArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_ImDrawList(cPtr, false);
  }

  public static void delete_pImDrawListArray(SWIGTYPE_p_p_ImDrawList ary) {
    CImGuiJNI.delete_pImDrawListArray(SWIGTYPE_p_p_ImDrawList.getCPtr(ary));
  }

  public static ImDrawList pImDrawListArray_getitem(SWIGTYPE_p_p_ImDrawList ary, int index) {
    long cPtr = CImGuiJNI.pImDrawListArray_getitem(SWIGTYPE_p_p_ImDrawList.getCPtr(ary), index);
    return (cPtr == 0) ? null : new ImDrawList(cPtr, false);
  }

  public static void pImDrawListArray_setitem(SWIGTYPE_p_p_ImDrawList ary, int index, ImDrawList value) {
    CImGuiJNI.pImDrawListArray_setitem(SWIGTYPE_p_p_ImDrawList.getCPtr(ary), index, ImDrawList.getCPtr(value), value);
  }

}
